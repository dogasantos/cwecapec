{
  "1": {
    "name": "Accessing Functionality Not Properly Constrained by ACLs",
    "description": "In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "122"
      },
      {
        "nature": "CanPrecede",
        "capecId": "17"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
        "techniques": [
          "Spidering web sites for all available links",
          "Brute force guessing of resource names",
          "Brute force guessing of user names / credentials",
          "Brute force guessing of function names / actions"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Identify Functionality] At each step, the attacker notes the resource or functionality access mechanism invoked upon performing specific actions",
        "techniques": [
          "Use the web inventory of all forms and inputs and apply attack data to those inputs.",
          "Use a packet sniffer to capture and record network traffic",
          "Execute the software in a debugger and record API calls into the operating system or important libraries. This might occur in an environment other than a production environment, in order to find weaknesses that can be exploited in a production environment."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Iterate over access capabilities] Possibly as a valid user, the attacker then tries to access each of the noted access mechanisms directly in order to perform functions not constrained by the ACLs.",
        "techniques": [
          "Fuzzing of API parameters (URL parameters, OS API parameters, protocol parameters)"
        ]
      }
    ],
    "prerequisites": [
      "The application must be navigable in a manner that associates elements (subsections) of the application with ACLs.",
      "The various resources, or individual URLs, must be somehow discoverable by the attacker",
      "The administrator must have forgotten to associate an ACL or has associated an inappropriately permissive ACL with a particular navigable resource."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "276",
      "285",
      "434",
      "693",
      "732",
      "1191",
      "1193",
      "1220",
      "1297",
      "1311",
      "1314",
      "1315",
      "1318",
      "1320",
      "1321",
      "1327"
    ],
    "mitreAttack": [
      "T1574.010"
    ]
  },
  "10": {
    "name": "Buffer Overflow via Environment Variables",
    "description": "This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack the adversary looks for an application that loads the content of an environment variable into a buffer.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "Change the values of environment variables thought to be used by the application to contain excessive data. If the program is loading the value of the environment variable into a buffer, this could cause a crash and an attack vector will be found."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The application uses environment variables.",
      "An environment variable exposed to the user is vulnerable to a buffer overflow.",
      "The vulnerable environment variable uses untrusted data.",
      "Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "302",
      "118",
      "119",
      "74",
      "99",
      "20",
      "680",
      "733",
      "697"
    ]
  },
  "100": {
    "name": "Overflow Buffers",
    "description": "Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "123"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary injects the crafted overflow content into the buffer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Targeted software performs buffer operations.",
      "Targeted software inadequately performs bounds-checking on buffer operations.",
      "Adversary has the capability to influence the input to buffer operations."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "In most cases, overflowing a buffer does not require advanced skills beyond the ability to notice an overflow and stuff an input variable with content."
      },
      {
        "level": "High",
        "details": "In cases of directed overflows, where the motive is to divert the flow of the program or application as per the adversaries' bidding, high level skills are required. This may involve detailed knowledge of the target system architecture and kernel."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "119",
      "131",
      "129",
      "805",
      "680"
    ]
  },
  "101": {
    "name": "Server Side Include (SSI) Injection",
    "description": "An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "253"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine applicability] The adversary determines whether server side includes are enabled on the target web server.",
        "techniques": [
          "Look for popular page file names. The attacker will look for .shtml, .shtm, .asp, .aspx, and other well-known strings in URLs to help determine whether SSI functionality is enabled.",
          "Fetch .htaccess file. In Apache web server installations, the .htaccess file may enable server side includes in specific locations. In those cases, the .htaccess file lives inside the directory where SSI is enabled, and is theoretically fetchable from the web server. Although most web servers deny fetching the .htaccess file, a misconfigured server will allow it. Thus, an attacker will frequently try it."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find Injection Point] Look for user controllable input, including HTTP headers, that can carry server side include directives to the web server.",
        "techniques": [
          "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject SSI] Using the found injection point, the adversary sends arbitrary code to be inlcuded by the application on the server side. They may then need to view a particular page in order to have the server execute the include directive and run a command or open a file on behalf of the adversary.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A web server that supports server side includes and has them enabled",
      "User controllable input that can carry include directives to the web server"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to be aware of SSI technology, determine the nature of injection and be able to craft input that results in the SSI directives being executed."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "97",
      "74",
      "20"
    ]
  },
  "102": {
    "name": "Session Sidejacking",
    "description": "Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "593"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Detect Unprotected Session Token Transfer] The attacker sniffs on the wireless network to detect unencrypted traffic that contains session tokens.",
        "techniques": [
          "The attacker uses a network sniffer tool like ferret or hamster to monitor the wireless traffic at a WiFi hotspot while examining it for evidence of transmittal of session tokens in unencrypted or recognizably encrypted form. An attacker applies their knowledge of the manner by which session tokens are generated and transmitted by various target systems to identify the session tokens."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Capture session token] The attacker uses sniffing tools to capture a session token from traffic.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Insert captured session token] The attacker attempts to insert a captured session token into communication with the targeted application to confirm viability for exploitation.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An attacker and the victim are both using the same WiFi network.",
      "The victim has an active session with a target system.",
      "The victim is not using a secure channel to communicate with the target system (e.g. SSL, VPN, etc.)",
      "The victim initiated communication with a target system that requires transfer of the session token or the target application uses AJAX and thereby periodically \"rings home\" asynchronously using the session token"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Easy to use tools exist to automate this attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "294",
      "522",
      "523",
      "319",
      "614"
    ]
  },
  "103": {
    "name": "Clickjacking",
    "description": "An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "173"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Craft a clickjacking page] The adversary utilizes web page layering techniques to try to craft a malicious clickjacking page",
        "techniques": [
          "The adversary leveraged iframe overlay capabilities to craft a malicious clickjacking page",
          "The adversary leveraged Flash file overlay capabilities to craft a malicious clickjacking page",
          "The adversary leveraged Silverlight overlay capabilities to craft a malicious clickjacking page",
          "The adversary leveraged cross-frame scripting to craft a malicious clickjacking page"
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Adversary lures victim to clickjacking page] Adversary utilizes some form of temptation, misdirection or coercion to lure the victim to loading and interacting with the clickjacking page in a way that increases the chances that the victim will click in the right areas.",
        "techniques": [
          "Lure the victim to the malicious site by sending the victim an e-mail with a URL to the site.",
          "Lure the victim to the malicious site by manipulating URLs on a site trusted by the victim.",
          "Lure the victim to the malicious site through a cross-site scripting attack."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Trick victim into interacting with the clickjacking page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.",
        "techniques": [
          "Hide action controls over very commonly used functionality.",
          "Hide action controls over very psychologically tempting content."
        ]
      }
    ],
    "prerequisites": [
      "The victim is communicating with the target application via a web based UI and not a thick client",
      "The victim's browser security policies allow at least one of the following JavaScript, Flash, iFrames, ActiveX, or CSS.",
      "The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser)",
      "The victim has an active session with the target system.",
      "The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system"
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Crafting the proper malicious site and luring the victim to this site are not trivial tasks."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1021"
    ]
  },
  "104": {
    "name": "Cross Zone Scripting",
    "description": "An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "233"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find systems susceptible to the attack] Find systems that contain functionality that is accessed from both the internet zone and the local zone. There needs to be a way to supply input to that functionality from the internet zone and that original input needs to be used later on a page from a local zone.",
        "techniques": [
          "Leverage knowledge of common local zone functionality on targeted platforms to guide attempted injection of code through relevant internet zone mechanisms. In some cases this may be due to standard system configurations enabling shared functionality between internet and local zones. The attacker can search for indicators that these standard configurations are in place."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find the insertion point for the payload] The attacker first needs to find some system functionality or possibly another weakness in the system (e.g. susceptibility to cross site scripting) that would provide the attacker with a mechanism to deliver the payload (i.e. the code to be executed) to the user. The location from which this code is executed in the user's browser needs to be within the local machine zone.",
        "techniques": [
          "Finding weaknesses in functionality used by both privileged and unprivileged users."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Craft and inject the payload] Develop the payload to be executed in the higher privileged zone in the user's browser. Inject the payload and attempt to lure the victim (if possible) into executing the functionality which unleashes the payload.",
        "techniques": [
          "The attacker makes it as likely as possible that the vulnerable functionality into which they have injected the payload has a high likelihood of being used by the victim.",
          "Leverage cross-site scripting vulnerability to inject payload."
        ]
      }
    ],
    "prerequisites": [
      "The target must be using a zone-aware browser."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to craft malicious scripts or find them elsewhere and ability to identify functionality that is running web controls in the local zone and to find an injection vector into that functionality"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "250",
      "638",
      "285",
      "116",
      "20"
    ]
  },
  "105": {
    "name": "HTTP Request Splitting",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "220"
      },
      {
        "nature": "PeerOf",
        "capecId": "34"
      },
      {
        "nature": "CanPrecede",
        "capecId": "115"
      },
      {
        "nature": "CanPrecede",
        "capecId": "141"
      },
      {
        "nature": "CanPrecede",
        "capecId": "63"
      },
      {
        "nature": "CanPrecede",
        "capecId": "593"
      },
      {
        "nature": "CanPrecede",
        "capecId": "148"
      },
      {
        "nature": "CanPrecede",
        "capecId": "154"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
        "techniques": [
          "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
        ]
      },
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests with custom strings and embedded web scripts and objects in HTTP headers to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
        "techniques": [
          "Continue the monitoring of HTTP traffic.",
          "\n                  \n                  \n                  \n                  \n               ",
          "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
        ]
      },
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Perform HTTP Request Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
        "techniques": [
          "Leverage techniques identified in the Experiment Phase."
        ]
      }
    ],
    "prerequisites": [
      "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
      "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
      "HTTP headers capable of being user-manipulated.",
      "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
      },
      {
        "level": "Medium",
        "details": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
      },
      {
        "level": "Medium",
        "details": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "74",
      "113",
      "138",
      "436"
    ]
  },
  "106": {
    "name": "DEPRECATED: XSS through Log Files",
    "description": "This attack pattern has been deprecated as it referes to an existing chain relationship between \"CAPEC-93 : Log Injection-Tampering-Forging\" and \"CAPEC-63 : Cross-Site Scripting\". Please refer to these CAPECs going forward."
  },
  "107": {
    "name": "Cross Site Tracing",
    "description": "Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "593"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine if HTTP Trace is enabled] Determine if HTTP Trace is enabled at the web server with which the victim has an active session",
        "techniques": [
          "An adversary may issue an HTTP Trace request to the target web server and observe if the response arrives with the original request in the body of the response."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Identify mechanism to launch HTTP Trace request] The adversary attempts to force the victim to issue an HTTP Trace request to the targeted application.",
        "techniques": [
          "The adversary probes for cross-site scripting vulnerabilities to force the victim into issuing an HTTP Trace request."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Create a malicious script that pings the web server with HTTP TRACE request] The adversary creates a malicious script that will induce the victim's browser to issue an HTTP TRACE request to the destination system's web server. The script will further intercept the response from the web server, pick up sensitive information out of it, and forward to the site controlled by the adversary.",
        "techniques": [
          "The adversary's malicious script circumvents the httpOnly cookie attribute that prevents from hijacking the victim's session cookie directly using document.cookie and instead leverages the HTTP TRACE to catch this information from the header of the HTTP request once it is echoed back from the web server in the body of the HTTP TRACE response."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Execute malicious HTTP Trace launching script] The adversary leverages an XSS vulnerability to force the victim to execute the malicious HTTP Trace launching script",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Intercept HTTP TRACE response] The adversary's script intercepts the HTTP TRACE response from teh web server, glance sensitive information from it, and forward that information to a server controlled by the adversary.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "HTTP TRACE is enabled on the web server",
      "The destination system is susceptible to XSS or an adversary can leverage some other weakness to bypass the same origin policy",
      "Scripting is enabled in the client's browser",
      "HTTP is used as the communication protocol between the server and the client"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Understanding of the HTTP protocol and an ability to craft a malicious script"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "693",
      "648"
    ]
  },
  "108": {
    "name": "Command Line Execution through SQL Injection",
    "description": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "66"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into user-controllable data inputs to search unfiltered execution of the SQL syntax in a query.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Achieve arbitrary command execution through SQL Injection with the MSSQL_xp_cmdshell directive] The attacker leverages a SQL Injection attack to inject shell code to be executed by leveraging the xp_cmdshell directive.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject malicious data in the database] Leverage SQL injection to inject data in the database that could later be used to achieve command injection if ever used as a command line argument",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Trigger command line execution with injected arguments] The attacker causes execution of command line functionality which leverages previously injected database content as arguments.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The application does not properly validate data before storing in the database",
      "Backend application implicitly trusts the data stored in the database",
      "Malicious data is used on the backend as a command line argument"
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The attacker most likely has to be familiar with the internal functionality of the system to launch this attack. Without that knowledge, there are not many feedback mechanisms to give an attacker the indication of how to perform command injection or whether the attack is succeeding."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "89",
      "74",
      "20",
      "78",
      "114"
    ]
  },
  "109": {
    "name": "Object Relational Mapping Injection",
    "description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "66"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Persistence Framework Used] An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.",
        "techniques": [
          "An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Probe for ORM Injection vulnerabilities] The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Perform SQL Injection through the generated data access layer] An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.",
        "techniques": [
          "An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application."
        ]
      }
    ],
    "prerequisites": [
      "An application uses data access layer generated by an ORM tool or framework",
      "An application uses user supplied data in queries executed against the database",
      "The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "20",
      "89",
      "564"
    ]
  },
  "11": {
    "name": "Cause Web Server Misclassification",
    "description": "An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "635"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Footprint file input vectors] Manually or using an automated tool, an attacker searches for all input locations where a user has control over the filenames or MIME types of files submitted to the web server.",
        "techniques": [
          "Attacker manually crawls application to identify file inputs",
          "Attacker uses an automated tool to crawl application identify file inputs",
          "Attacker manually assesses strength of access control protecting native application files from user control",
          "Attacker explores potential for submitting files directly to the web server via independently constructed HTTP Requests"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[File misclassification shotgunning] An attacker makes changes to file extensions and MIME types typically processed by web servers and looks for abnormal behavior.",
        "techniques": [
          "Attacker submits files with switched extensions (e.g. .php on a .jsp file) to web server.",
          "Attacker adds extra characters (e.g. adding an extra . after the file extension) to filenames of files submitted to web server."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[File misclassification sniping] Understanding how certain file types are processed by web servers, an attacker crafts varying file payloads and modifies their file extension or MIME type to be that of the targeted type to see if the web server is vulnerable to misclassification of that type.",
        "techniques": [
          "Craft a malicious file payload, modify file extension to the targeted file type and submit it to the web server.",
          "Craft a malicious file payload, modify its associated MIME type to the targeted file type and submit it to the web server."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Disclose information] The attacker, by manipulating a file extension or MIME type is able to make the web server return raw information (not executed).",
        "techniques": [
          "Manipulate the file names that are explicitly sent to the server.",
          "Manipulate the MIME sent in order to confuse the web server."
        ]
      }
    ],
    "prerequisites": [
      "Web server software must rely on file name or file extension for processing.",
      "The attacker must be able to make HTTP requests to the web server."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To modify file name or file extension"
      },
      {
        "level": "Medium",
        "details": "To use misclassification to force the Web server to disclose configuration information, source, or binary data"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "430"
    ],
    "mitreAttack": [
      "T1036.006"
    ]
  },
  "110": {
    "name": "SQL Injection through SOAP Parameter Tampering",
    "description": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "66"
      },
      {
        "nature": "CanPrecede",
        "capecId": "108"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Detect Incorrect SOAP Parameter Handling] The attacker tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.",
        "techniques": [
          "The attacker tampers with the SOAP message parameters by injecting some special characters such as single quotes, double quotes, semi columns, etc. The attacker observes system behavior."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe for SQL Injection vulnerability] The attacker injects SQL syntax into vulnerable SOAP parameters identified during the Explore phase to search for unfiltered execution of the SQL syntax in a query.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject SQL via SOAP Parameters] The attacker injects SQL via SOAP parameters identified as vulnerable during Explore phase to launch a first or second order SQL injection attack.",
        "techniques": [
          "An attacker performs a SQL injection attack via the usual methods leveraging SOAP parameters as the injection vector. An attacker has to be careful not to break the XML parser at the service provider which may prevent the payload getting through to the SQL query. The attacker may also look at the WSDL for the web service (if available) to better understand what is expected by the service provider."
        ]
      }
    ],
    "prerequisites": [
      "SOAP messages are used as a communication mechanism in the system",
      "SOAP parameters are not properly validated at the service provider",
      "The service provider does not properly utilize parameter binding when building SQL queries"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "If the attacker is able to gain good understanding of the system's database schema"
      },
      {
        "level": "High",
        "details": "If the attacker has to perform Blind SQL Injection"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "89",
      "20"
    ]
  },
  "111": {
    "name": "JSON Hijacking (aka JavaScript Hijacking)",
    "description": "An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "212"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Understand How to Request JSON Responses from the Target System] An attacker first explores the target system to understand what URLs need to be provided to it in order to retrieve JSON objects that contain information of interest to the attacker.",
        "techniques": [
          "An attacker creates an account with the target system and observes requests and the corresponding JSON responses from the server. Understanding how to properly elicit responses from the server is crucial to the attackers' ability to craft the exploit."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Craft a malicious website]\n                  \n                  \n               ",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Launch JSON hijack] An attacker lures the victim to the malicious website or leverages other means to get their malicious code executing in the victim's browser. Once that happens, the malicious code makes a request to the victim target system to retrieve a JSON object with sensitive information. The request includes the victim's session cookie if the victim is logged in.",
        "techniques": [
          "An attacker employs a myriad of standard techniques to get the victim to visit their malicious site or by some other means get the attackers' malicious code executing in the victim's browser."
        ]
      }
    ],
    "prerequisites": [
      "JSON is used as a transport mechanism between the client and the server",
      "The target server cannot differentiate real requests from forged requests",
      "The JSON object returned from the server can be accessed by the attackers' malicious code via a script tag"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Once this attack pattern is developed and understood, creating an exploit is not very complex.The attacker needs to have knowledge of the URLs that need to be accessed on the target system to request the JSON objects."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "345",
      "346",
      "352"
    ]
  },
  "112": {
    "name": "Brute Force",
    "description": "In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.",
    "typicalSeverity": "High",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine secret testing procedure] Determine how a potential guess of the secret may be tested. This may be accomplished by comparing some manipulation of the secret to a known value, use of the secret to manipulate some known set of data and determining if the result displays specific characteristics (for example, turning cryptotext into plaintext), or by submitting the secret to some external authority and having the external authority respond as to whether the value was the correct secret. Ideally, the attacker will want to determine the correctness of their guess independently since involvement of an external authority is usually slower and can provide an indication to the defender that a brute-force attack is being attempted.",
        "techniques": [
          "Determine if there is a way to parallelize the attack. Most brute force attacks can take advantage of parallel techniques by dividing the search space among available resources, thus dividing the average time to success by the number of resources available. If there is a single choke point, such as a need to check answers with an external authority, the attackers' position is significantly degraded."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Reduce search space] Find ways to reduce the secret space. The smaller the attacker can make the space they need to search for the secret value, the greater their chances for success. There are a great many ways in which the search space may be reduced.",
        "techniques": [
          "If possible, determine how the secret was selected. If the secret was determined algorithmically (such as by a random number generator) the algorithm may have patterns or dependencies that reduce the size of the secret space. If the secret was created by a human, behavioral factors may, if not completely reduce the space, make some types of secrets more likely than others. (For example, humans may use the same secrets in multiple places or use secrets that look or sound familiar for ease of recall.)",
          "If the secret was chosen algorithmically, cryptanalysis can be applied to the algorithm to discover patterns in this algorithm. (This is true even if the secret is not used in cryptography.) Periodicity, the need for seed values, or weaknesses in the generator all can result in a significantly smaller secret space.",
          "If the secret was chosen by a person, social engineering and simple espionage can indicate patterns in their secret selection. If old secrets can be learned (and a target may feel they have little need to protect a secret that has been replaced) hints as to their selection preferences can be gleaned. These can include character substitutions a target employs, patterns in sources (dates, famous phrases, music lyrics, family members, etc.). Once these patterns have been determined, the initial efforts of a brute-force attack can focus on these areas.",
          "Some algorithmic techniques for secret selection may leave indicators that can be tested for relatively easily and which could then be used to eliminate large areas of the search space for consideration. For example, it may be possible to determine that a secret does or does not start with a given character after a relatively small number of tests. Alternatively, it might be possible to discover the length of the secret relatively easily. These discoveries would significantly reduce the search space, thus increasing speed with which the attacker discovers the secret."
        ]
      },
      {
        "step": "3",
        "phase": "Explore",
        "description": "[Expand victory conditions] It is sometimes possible to expand victory conditions. For example, the attacker might not need to know the exact secret but simply needs a value that produces the same result using a one-way function. While doing this does not reduce the size of the search space, the presence of multiple victory conditions does reduce the likely amount of time that the attacker will need to explore the space before finding a workable value.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Gather information so attack can be performed independently.] If possible, gather the necessary information so a successful search can be determined without consultation of an external authority. This can be accomplished by capturing cryptotext (if the goal is decoding the text) or the encrypted password dictionary (if the goal is learning passwords).",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The attacker must be able to determine when they have successfully guessed the secret. As such, one-time pads are immune to this type of attack since there is no way to determine when a guess is correct."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The attack simply requires basic scripting ability to automate the exploration of the search space. More sophisticated attackers may be able to use more advanced methods to reduce the search space and increase the speed with which the secret is located."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "330",
      "326",
      "521"
    ],
    "mitreAttack": [
      "T1110"
    ]
  },
  "113": {
    "name": "Interface Manipulation",
    "description": "An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target system must expose interface functionality in a manner that can be discovered and manipulated by an adversary. This may require reverse engineering the interface or decrypting/de-obfuscating client-server exchanges."
    ],
    "relatedWeaknesses": [
      "1192"
    ]
  },
  "114": {
    "name": "Authentication Abuse",
    "description": "An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc. which is flawed in some way."
    ],
    "relatedWeaknesses": [
      "287",
      "1244"
    ],
    "mitreAttack": [
      "T1548"
    ]
  },
  "115": {
    "name": "Authentication Bypass",
    "description": "An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "An authentication mechanism or subsystem implementing some form of authentication such as passwords, digest authentication, security certificates, etc."
    ],
    "relatedWeaknesses": [
      "287"
    ],
    "mitreAttack": [
      "T1548"
    ]
  },
  "116": {
    "name": "Excavation",
    "description": "An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "163"
      }
    ],
    "prerequisites": [
      "An adversary requires some way of interacting with the system."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200",
      "1243"
    ]
  },
  "117": {
    "name": "Interception",
    "description": "An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target must transmit data over a medium that is accessible to the adversary."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "319"
    ]
  },
  "12": {
    "name": "Choosing Message Identifier",
    "description": "This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "PeerOf",
        "capecId": "21"
      },
      {
        "nature": "ChildOf",
        "capecId": "216"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Nature of Messages] Determine the nature of messages being transported as well as the identifiers to be used as part of the attack",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Authenticate] If required, authenticate to the distribution channel",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Identify Known Client Identifiers] If any particular client's information is available through a control channel available to all users, the adversary will discover particular identifiers for targeted clients by observing this channel, or requesting client information through this channel.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Change Message Identifier] Adversaries with client access connecting to output channels could change their channel identifier and see someone else's (perhaps more privileged) data.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Information and client-sensitive (and client-specific) data must be present through a distribution channel available to all users.",
      "Distribution means must code (through channel, message identifiers, or convention) message destination in a manner visible within the distribution means itself (such as a control channel) or in the messages themselves."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "All the adversary needs to discover is the format of the messages on the channel/distribution means and the particular identifier used within the messages."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "201",
      "306"
    ]
  },
  "120": {
    "name": "Double Encoding",
    "description": "The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an attacker records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] Try double-encoding for parts of the input in order to try to get past the filters. For instance, by double encoding certain characters in the URL (e.g. dots and slashes) an adversary may try to get access to restricted resources on the web server or force browse to protected pages (thus subverting the authorization service). An adversary can also attempt other injection style attacks using this attack pattern: command injection, SQL injection, etc.",
        "techniques": [
          "Try to use double-encoding to bypass validation routines."
        ]
      }
    ],
    "prerequisites": [
      "The target's filters must fail to detect that a character has been doubly encoded but its interpreting engine must still be able to convert a doubly encoded character to an un-encoded character.",
      "The application accepts and decodes URL string request.",
      "The application performs insufficient filtering/canonicalization on the URLs."
    ],
    "relatedWeaknesses": [
      "173",
      "172",
      "177",
      "181",
      "183",
      "184",
      "74",
      "20",
      "697",
      "692"
    ]
  },
  "121": {
    "name": "Exploit Non-Production Interfaces",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "113"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Vulnerable Interface] An adversary explores a target system for sample or test interfaces that have not been disabled by a system administrator and which may be exploitable by the adversary.",
        "techniques": [
          "If needed, the adversary explores an organization's network to determine if any specific systems of interest exist."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Leverage Test Interface to Execute Attacks] Once an adversary has discovered a system with a non-production interface, the interface is leveraged to exploit the system and/or conduct various attacks.",
        "techniques": [
          "The adversary can leverage the sample or test interface to conduct several types of attacks such as Adversary-in-the-Middle attacks (CAPEC-94), keylogging, Cross Site Scripting (XSS), hardware manipulation attacks, and more."
        ]
      }
    ],
    "prerequisites": [
      "The target must have configured non-production interfaces and failed to secure or remove them when brought into a production environment."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Exploiting non-production interfaces requires significant skill and knowledge about the potential non-production interfaces left enabled in production."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges",
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Read Data",
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Integrity"
        ],
        "impacts": [
          "Modify Data",
          "Alter Execution Logic"
        ]
      }
    ],
    "relatedWeaknesses": [
      "489",
      "1209",
      "1259",
      "1267",
      "1270",
      "1294",
      "1295",
      "1296",
      "1302",
      "1313"
    ]
  },
  "122": {
    "name": "Privilege Abuse",
    "description": "An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "664"
      }
    ],
    "prerequisites": [
      "The target must have misconfigured their access control mechanisms such that sensitive information, which should only be accessible to more trusted users, remains accessible to less trusted users.",
      "The adversary must have access to the target, albeit with an account that is less privileged than would be appropriate for the targeted resources."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversary can leverage privileged features they already have access to without additional effort or skill. Adversary is only required to have access to an account with improper priveleges."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "269",
      "732",
      "1317"
    ],
    "mitreAttack": [
      "T1548"
    ]
  },
  "123": {
    "name": "Buffer Manipulation",
    "description": "An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "prerequisites": [
      "The adversary must identify a programmatic means for interacting with a buffer, such as vulnerable C code, and be able to provide input to this interaction."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Modify Data",
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "119"
    ]
  },
  "124": {
    "name": "Shared Resource Manipulation",
    "description": "An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target applications, threads or functions must share resources between themselves.",
      "The adversary must be able to manipulate some piece of the shared resource either directly or indirectly and the other users of the data must accept the changed data as valid. Usually this requires that the adversary be able to compromise one of the sharing applications or threads in order to manipulate the shared data."
    ],
    "relatedWeaknesses": [
      "1189",
      "1331"
    ]
  },
  "125": {
    "name": "Flooding",
    "description": "An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "Any target that services requests is vulnerable to this attack on some level of scale."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "404",
      "770"
    ],
    "mitreAttack": [
      "T1498.001",
      "T1499"
    ]
  },
  "126": {
    "name": "Path Traversal",
    "description": "An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \\) and/or dots (.)) to reach desired directories or files.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "153"
      },
      {
        "nature": "CanPrecede",
        "capecId": "664"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Fingerprinting of the operating system] In order to perform a valid path traversal, the attacker needs to know what the underlying OS is so that the proper file seperator is used.",
        "techniques": [
          "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
          "TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
          "Induce errors to find informative error messages"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable file inputs",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The attacker must be able to control the path that is requested of the target.",
      "The target must fail to adequately sanitize incoming paths"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Simple command line attacks or to inject the malicious payload in a web page."
      },
      {
        "level": "Medium",
        "details": "Customizing attacks to bypass non trivial filters in the application."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Confidentiality",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "22"
    ]
  },
  "127": {
    "name": "Directory Indexing",
    "description": "An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "54"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Directory Discovery] Use a method, either manual, scripted, or automated to discover the directories on the server by making requests for directories that may possibly exist. During this phase the adversary is less concerned with whether a directory can be accessed or indexed and more focused on simply discovering what directories do exist on the target.",
        "techniques": [
          "Send requests to the web server for common directory names",
          "If directories are discovered that are native to a server type further refine the directory search to include directories usually present on those types of servers.",
          "Search for uncommon or potentially user created directories that may be present."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Iteratively explore directory/file structures] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
        "techniques": [
          "Use a scanner tool to dynamically add directories/files to include their scan based upon data obtained in initial probes.",
          "Use a browser to manually explore the website by issuing a request ending the URL in a slash '/'.",
          "Attempt to bypass ACLs on directories by using methods that known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
          "Sequentially request a list of common base files to each directory discovered.",
          "Try multiple fuzzing techniques to list directory contents for directories that will not reveal their contents with a \"/\" request"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Read directories or files which are not intended for public viewing.] The adversary attempts to access the discovered directories that allow access and may attempt to bypass server or application level ACLs by using manual or automated methods",
        "techniques": [
          "Try multiple exploit techniques to list directory contents for directories that will not reveal their contents with a \"/\" request",
          "Try other known exploits to elevate privileges sufficient to bypass protected directories.",
          "List the files in the directory by issuing a request with the URL ending in a \"/\" slash.",
          "Access the files via direct URL and capture contents.",
          "Attempt to bypass ACLs on directories by using methods that are known to work against some server types by appending data to the directory request. For instance, appending a Null byte to the end of the request which may cause an ACL to fail and allow access.",
          "Sequentially request a list of common base files to each directory discovered."
        ]
      }
    ],
    "prerequisites": [
      "The target must be misconfigured to return a list of a directory's content when it receives a request that ends in a directory name rather than a file name.",
      "The adversary must be able to control the path that is requested of the target.",
      "The administrator must have failed to properly configure an ACL or has associated an overly permissive ACL with a particular directory.",
      "The server version or patch level must not inherently prevent known directory listing attacks from working."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To issue the request to URL without given a specific file name"
      },
      {
        "level": "High",
        "details": "To bypass the access control of the directory of listings"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "424",
      "425",
      "288",
      "285",
      "732",
      "276",
      "693"
    ],
    "mitreAttack": [
      "T1083"
    ]
  },
  "128": {
    "name": "Integer Attacks",
    "description": "An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "153"
      }
    ],
    "prerequisites": [
      "The target application must have an integer variable for which only some of the possible integer values are expected by the application and where there are no checks on the value of the variable before use.",
      "The attacker must be able to manipulate the targeted integer variable such that normal operations result in non-standard values due to the storage structure of integers."
    ],
    "relatedWeaknesses": [
      "682"
    ]
  },
  "129": {
    "name": "Pointer Manipulation",
    "description": "This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target application must have a pointer variable that the attacker can influence to hold an arbitrary value."
    ],
    "relatedWeaknesses": [
      "682",
      "822",
      "823"
    ]
  },
  "13": {
    "name": "Subverting Environment Variable Values",
    "description": "The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "77"
      },
      {
        "nature": "CanPrecede",
        "capecId": "14"
      },
      {
        "nature": "PeerOf",
        "capecId": "10"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on. Most importantly, the adversary tries to determine what environment variables might be used by the underlying software, or even the application itself.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find user-controlled environment variables] Using the information found by probing the application, the adversary attempts to manipulate any user-controlled environment variables they have found are being used by the application, or suspect are being used by the application, and observe the effects of these changes. If the adversary notices any significant changes to the application, they will know that a certain environment variable is important to the application behavior and indicates a possible attack vector.",
        "techniques": [
          "Alter known environment variables such as \"$PATH\", \"$HOSTNAME\", or \"LD_LIBRARY_PATH\" and see if application behavior changes."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Manipulate user-controlled environment variables] The adversary manipulates the found environment variable(s) to abuse the normal flow of processes or to gain access to privileged resources.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An environment variable is accessible to the user.",
      "An environment variable used by the application can be tainted with user supplied data.",
      "Input data used in an environment variable is not validated properly.",
      "The variables encapsulation is not done properly. For instance setting a variable as public in a class makes it visible and an adversary may attempt to manipulate that variable."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "In a web based scenario, the client controls the data that it submitted to the server. So anybody can try to send malicious data and try to bypass the authentication mechanism."
      },
      {
        "level": "High",
        "details": "Some more advanced attacks may require knowledge about protocols and probing technique which help controlling a variable. The malicious user may try to understand the authentication mechanism in order to defeat it."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "353",
      "285",
      "302",
      "74",
      "15",
      "73",
      "20",
      "200"
    ],
    "mitreAttack": [
      "T1562.003",
      "T1574.006",
      "T1574.007"
    ]
  },
  "130": {
    "name": "Excessive Allocation",
    "description": "An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target must accept service requests from the attacker and the adversary must be able to control the resource allocation associated with this request to be in excess of the normal allocation. The latter is usually accomplished through the presence of a bug on the target that allows the adversary to manipulate variables used in the allocation."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "404",
      "770",
      "1325"
    ],
    "mitreAttack": [
      "T1499.003"
    ]
  },
  "131": {
    "name": "Resource Leak Exposure",
    "description": "An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target must have a resource leak that the adversary can repeatedly trigger."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "404"
    ],
    "mitreAttack": [
      "T1499"
    ]
  },
  "132": {
    "name": "Symlink Attack",
    "description": "An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "159"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify Target] Adversary identifies the target application by determining whether there is sufficient check before writing data to a file and creating symlinks to files in different directories.",
        "techniques": [
          "The adversary writes to files in different directories to check whether the application has sufficient checking before file operations.",
          "The adversary creates symlinks to files in different directories."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Try to create symlinks to different files] The adversary then uses a variety of techniques, such as monitoring or guessing to create symlinks to the files accessed by the target application in the directories which are identified in the explore phase.",
        "techniques": [
          "The adversary monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the adversary can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application.",
          "The adversary may need a little guesswork on the filenames on which the target application would operate.",
          "The adversary tries to create symlinks to the various filenames."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Target application operates on created symlinks to sensitive files] The adversary is able to create symlinks to sensitive files while the target application is operating on the file.",
        "techniques": [
          "Create the symlink to the sensitive file such as configuration files, etc."
        ]
      }
    ],
    "prerequisites": [
      "The targeted application must perform the desired activities on a file without checking whether the file is a symbolic link or not. The adversary must be able to predict the name of the file the target application is modifying and be able to create a new symbolic link where that file would appear."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To create symlinks"
      },
      {
        "level": "High",
        "details": "To identify the files and create the symlinks during the file operation time window"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "59"
    ],
    "mitreAttack": [
      "T1547.009"
    ]
  },
  "133": {
    "name": "Try All Common Switches",
    "description": "An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "113"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify application] Discover an application of interest by exploring service registry listings or by connecting on a known port or some similar means.",
        "techniques": [
          "Search via internet for known, published applications that allow option switches.",
          "Use automated tools to scan known ports to identify applications that might be accessible"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Authenticate to application] Authenticate to the application, if required, in order to explore it.",
        "techniques": [
          "Use published credentials to access system.",
          "Find unpublished credentails to access service.",
          "Use other attack pattern or weakness to bypass authentication."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Try all common switches] Using manual or automated means, attempt to run the application with many different known common switches. Observe the output to see if any switches seemed to put the application in a non production mode that might give more information.",
        "techniques": [
          "Manually execute the application with switches such as --debug, --test, --development, --verbose, etc.",
          "Use automated tools to run the application with common switches and observe the output"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use sensitive processing or configuration information] Once extra information is observed from an application through the use of a common switch, this information is used to aid other attacks on the application",
        "techniques": [
          "Using application information, formulate an attack on the application"
        ]
      }
    ],
    "prerequisites": [
      "The attacker must be able to control the options or switches sent to the target."
    ],
    "relatedWeaknesses": [
      "912"
    ]
  },
  "134": {
    "name": "Email Injection",
    "description": "An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "137"
      }
    ],
    "prerequisites": [
      "The target application must allow the user to send email to some recipient, to specify the content at least one header field in the message, and must fail to sanitize against the injection of command separators.",
      "The adversary must have the ability to access the target mail application."
    ],
    "relatedWeaknesses": [
      "150"
    ]
  },
  "135": {
    "name": "Format String Injection",
    "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "137"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey application] The adversary takes an inventory of the entry points of the application.",
        "techniques": [
          "Spider web sites for all available links",
          "List parameters, external variables, configuration files variables, etc. that are possibly used by the application."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine user-controllable input susceptible to format string injection] Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.",
        "techniques": [
          "Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Try to exploit the Format String Injection vulnerability] After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.",
        "techniques": [
          "Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc."
        ]
      }
    ],
    "prerequisites": [
      "The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "134",
      "20",
      "74"
    ]
  },
  "136": {
    "name": "LDAP Injection",
    "description": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey application] The attacker takes an inventory of the entry points of the application.",
        "techniques": [
          "Spider web sites for all available links",
          "Sniff network communications with application using a utility such as WireShark."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine user-controllable input susceptible to LDAP injection] For each user-controllable input that the attacker suspects is vulnerable to LDAP injection, attempt to inject characters that have special meaning in LDAP (such as a single quote character, etc.). The goal is to create a LDAP query with an invalid syntax",
        "techniques": [
          "Use web browser to inject input through text fields or through HTTP GET parameters",
          "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header.",
          "Use modified client (modified by reverse engineering) to inject input."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Try to exploit the LDAP injection vulnerability] After determining that a given input is vulnerable to LDAP Injection, hypothesize what the underlying query looks like. Possibly using a tool, iteratively try to add logic to the query to extract information from the LDAP, or to modify or delete information in the LDAP.",
        "techniques": [
          "Add logic to the LDAP query to change the meaning of that command. Automated tools could be used to generate the LDAP injection strings.",
          "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, or other HTTP header."
        ]
      }
    ],
    "prerequisites": [
      "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to have knowledge of LDAP, especially its query syntax."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "77",
      "90",
      "20"
    ]
  },
  "137": {
    "name": "Parameter Injection",
    "description": "An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (\u0026). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value \"myInput\u0026new_param=myValue\", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target application must use a parameter encoding where separators and parameter identifiers are expressed in regular text.",
      "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "88"
    ]
  },
  "138": {
    "name": "Reflection Injection",
    "description": "An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "137"
      }
    ],
    "prerequisites": [
      "The target application must utilize reflection libraries and allow users to directly control the parameters to these methods. If the adversary can host classes where the target can invoke them, more powerful variants of this attack are possible.",
      "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in the parameter encoding, and insert the user-supplied string in an encoding which is then processed."
    ],
    "relatedWeaknesses": [
      "470"
    ]
  },
  "139": {
    "name": "Relative Path Traversal",
    "description": "An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "126"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.",
        "techniques": [
          "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
          "TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
          "Induce errors to find informative error messages"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.",
        "techniques": [
          "Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.",
        "techniques": [
          "Provide \"../\" or \"..\\\" at the beginning of any filename to traverse to the parent directory",
          "Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as \"../\".",
          "Use a proxy tool to record results of manual input of relative path traversal probes in known URLs."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Access, modify, or execute arbitrary files.] An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.",
        "techniques": [
          "Manipulate file and its path by injecting relative path sequences (e.g. \"../\").",
          "Download files, modify files, or try to execute shell commands (with binary files)."
        ]
      }
    ],
    "prerequisites": [
      "The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To inject the malicious payload in a web page"
      },
      {
        "level": "High",
        "details": "To bypass non trivial filters in the application"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "23"
    ]
  },
  "14": {
    "name": "Client-side Injection-induced Buffer Overflow",
    "description": "This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target client-side application] The adversary identifies a target client-side application to perform the buffer overflow on. The most common are browsers. If there is a known browser vulnerability an adversary could target that.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "Many times client side applications will be open source, so an adversary can examine the source code to identify possible injection vectors.",
          "Examine APIs of the client-side application and look for areas where a buffer overflow might be possible."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Create hostile service] The adversary creates a hostile service that will deliver content to the client-side application. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "If the client-side application is a browser, the adversary will create a service that delivers a malicious webpage to the browser.",
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary delivers the content to the client-side application using the hostile service and overflows the buffer.",
        "techniques": [
          "If the adversary is targeting a local client-side application, they just need to use the service themselves.",
          "If the adversary is attempting to cause an overflow on an external user's client-side application, they must get the user to attach to their service by some other means. This could be getting a user to visit their hostile webpage to target a user's browser."
        ]
      }
    ],
    "prerequisites": [
      "The targeted client software communicates with an external server.",
      "The targeted client software has a buffer overflow vulnerability."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To achieve a denial of service, an attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap requires a more in-depth knowledge and higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "353",
      "118",
      "119",
      "74",
      "20",
      "680",
      "697"
    ]
  },
  "140": {
    "name": "Bypassing of Intermediate Forms in Multiple-Form Sets",
    "description": "Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "74"
      }
    ],
    "prerequisites": [
      "The target must collect information from the user in a series of forms where each form has its own URL that the attacker can anticipate and the application must fail to detect attempts to access intermediate forms without first filling out the previous forms."
    ],
    "relatedWeaknesses": [
      "372"
    ]
  },
  "141": {
    "name": "Cache Poisoning",
    "description": "An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "161"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify and explore caches] Use tools to sniff traffic and scan a network in order to locate application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache) that may have vulnerabilities. Look for poisoning point in cache table entries.",
        "techniques": [
          "Run tools that check available entries in the cache."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause specific data to be cached] An attacker sends bogus request to the target, and then floods responses that trick a cache to remember malicious responses, which are wrong answers of queries.",
        "techniques": [
          "Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID)."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Redirect users to malicious website] As the attacker succeeds in exploiting the vulnerability, they are able to manipulate and interpose malicious response data to targeted victim queries.",
        "techniques": [
          "Intercept or modify a query, or send a bogus query with known credentials (such as transaction ID).",
          "Adversary-in-the-Middle attacks (CAPEC-94) intercept secure communication between two parties."
        ]
      }
    ],
    "prerequisites": [
      "The attacker must be able to modify the value stored in a cache to match a desired value.",
      "The targeted application must not be able to detect the illicit modification of the cache and must trust the cache value in its calculations."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To overwrite/modify targeted cache"
      }
    ],
    "relatedWeaknesses": [
      "348",
      "345",
      "349",
      "346"
    ],
    "mitreAttack": [
      "T1557.002"
    ]
  },
  "142": {
    "name": "DNS Cache Poisoning",
    "description": "A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "141"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Explore resolver caches] Check DNS caches on local DNS server and client's browser with DNS cache enabled.",
        "techniques": [
          "Run tools that check the resolver cache in the memory to see if it contains a target DNS entry.",
          "Figure out if the client's browser has DNS cache enabled."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt sending crafted records to DNS cache] A request is sent to the authoritative server for target website and wait for the iterative name resolver. An adversary sends bogus request to the DNS local server, and then floods responses that trick a DNS cache to remember malicious responses, which are wrong answers of DNS query.",
        "techniques": [
          "Adversary must know the transaction ID by intercepting a DNS query, or sending a bogus query with known transaction ID.",
          "If the transaction ID used to identify each query instance is randomized in some new DNS software, the attack must guess the transaction ID. Slow the response of the real DNS server by causing Denial-of-service. This gives adversaries enough time to guess transaction",
          "Adversary crafts DNS response with the same transaction ID as in the request. The adversary sends out DNS responses before the authorized DNS server. This forces DNS local cache stores fake DNS response (wrong answer). The fake DNS responses usually include a malicious website's IP address."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Redirect users to malicious website] As the adversary succeeds in exploiting the vulnerability, the victim connects to a malicious site using a good web site's domain name.",
        "techniques": [
          "Redirecting Web traffic to a site that looks enough like the original so as to not raise any suspicion.",
          "Adversary-in-the-Middle (CAPEC-94) intercepts secure communication between two parties."
        ]
      }
    ],
    "prerequisites": [
      "A DNS cache must be vulnerable to some attack that allows the adversary to replace addresses in its lookup table.Client applications must trust the corrupted cashed values and utilize them for their domain name resolutions."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To overwrite/modify targeted DNS cache"
      }
    ],
    "relatedWeaknesses": [
      "348",
      "345",
      "349",
      "346",
      "350"
    ],
    "mitreAttack": [
      "T1584.002"
    ]
  },
  "143": {
    "name": "Detect Unpublicized Web Pages",
    "description": "An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find target web site] An adversary finds a target web site that they think may have unpublicized web pages",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree",
        "techniques": [
          "Use Dirbuster to brute force directories and file names to find unpublicized pages",
          "Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Try to find weaknesses or information] The adversary will try to find weaknesses or information on the unpublicized pages that the targeted site did not intend to be public",
        "techniques": [
          "Manually analyze files or pages for information that could be useful in a further attack",
          "Use a static analysis tool to find weaknesses in unpublished web pages"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted web site must include pages within its published tree that are not connected to its tree of links. The sensitivity of the content of these pages determines the severity of this attack."
    ],
    "relatedWeaknesses": [
      "425"
    ]
  },
  "144": {
    "name": "Detect Unpublicized Web Services",
    "description": "An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find target web site] An adversary finds a target web site that they think may have unpublicized web services",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Map the published web site] The adversary will map the published web site either by using an automated tool or by manually accessing well-known debugging or logging pages, or otherwise predictable pages within the site tree",
        "techniques": [
          "Use Dirbuster to brute force directories and file names to find unpublicized web services",
          "Find a pattern in the naming of documents and extrapolate this pattern to discover additional documents that have been created but are no longer externally linked"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Try to find weaknesses or information] The adversary will try to find weaknesses in the unpublicized services that the targeted site did not intend to be public",
        "techniques": [
          "Use Nikto to look for web service vulnerabilities"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted web site must include unpublished services within its web tree. The nature of these services determines the severity of this attack."
    ],
    "relatedWeaknesses": [
      "425"
    ]
  },
  "145": {
    "name": "Checksum Spoofing",
    "description": "An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "148"
      }
    ],
    "prerequisites": [
      "The adversary must be able to intercept a message from the sender (keeping the recipient from getting it), modify it, and send the modified message to the recipient.",
      "The sender and recipient must use a checksum to protect the integrity of their message and transmit this checksum in a manner where the adversary can intercept and modify it.",
      "The checksum value must be computable using information known to the adversary. A cryptographic checksum, which uses a key known only to the sender and recipient, would thwart this attack."
    ],
    "relatedWeaknesses": [
      "354"
    ]
  },
  "146": {
    "name": "XML Schema Poisoning",
    "description": "An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "271"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine if XML schema is local or remote] Because this attack differs slightly if the target uses remote XML schemas versus local schemas, the adversary first needs to determine which of the two are used.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Gain access to XML schema] The adversary gains access to the XML schema so that they can modify the contents.",
        "techniques": [
          "For a local scenario, the adversary needs access to the machine that the schema is located on and needs to gain permissions to alter the contents of the file.",
          "For a remote scenario, the adversary needs to be able to sniff HTTP traffic that contains an XML schema."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Poison XML schema] Once the adversary gains access to the XML schema, they will alter it to achieve a desired effect. Locally, they can simply modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.",
        "techniques": [
          "Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing. For example, the unaltered schema may require a @name attribute in all submitted documents. If the adversary removes this attribute from the schema then documents created using the new grammar may lack this field, which may cause the processing application to enter an unexpected state or record incomplete data.",
          "Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.",
          "Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B)."
        ]
      }
    ],
    "prerequisites": [
      "Some level of access to modify the target schema.",
      "The schema used by the target application must be improperly secured against unauthorized modification and manipulation."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "15",
      "472"
    ]
  },
  "147": {
    "name": "XML Ping of the Death",
    "description": "An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "528"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.",
        "techniques": [
          "Use an automated tool to record all instances of URLs to process XML requests.",
          "Use a browser to manually explore the website and analyze how the application processes XML requests."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Launch a resource depletion attack] The attacker delivers a large number of small XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.",
        "techniques": [
          "Send a large number of crafted small XML messages to the target URL."
        ]
      }
    ],
    "prerequisites": [
      "The target must receive and process XML transactions."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To send small XML messages"
      },
      {
        "level": "High",
        "details": "To use distributed network to launch the attack"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "400",
      "770"
    ]
  },
  "148": {
    "name": "Content Spoofing",
    "description": "An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target must provide content but fail to adequately protect it against modification.The adversary must have the means to alter data to which they are not authorized. If the content is to be modified in transit, the adversary must be able to intercept the targeted messages."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "345"
    ],
    "mitreAttack": [
      "T1491"
    ]
  },
  "149": {
    "name": "Explore for Predictable Temporary File Names",
    "description": "An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "497"
      },
      {
        "nature": "CanPrecede",
        "capecId": "155"
      }
    ],
    "prerequisites": [
      "The targeted application must create names for temporary files using a predictable procedure, e.g. using sequentially increasing numbers.",
      "The attacker must be able to see the names of the files the target is creating."
    ],
    "relatedWeaknesses": [
      "377"
    ]
  },
  "15": {
    "name": "Command Delimiters",
    "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "137"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Assess Target Runtime Environment] In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.",
        "techniques": [
          "Port mapping using network connection-based software (e.g., nmap, nessus, etc.)",
          "Port mapping by exploring the operating system (netstat, sockstat, etc.)",
          "TCP/IP Fingerprinting",
          "Induce errors to find informative error messages"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user",
        "techniques": [
          "Spidering web sites for all available links",
          "Inventory all application inputs"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Attempt delimiters in inputs] The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.",
        "techniques": [
          "Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)",
          "Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)",
          "Enter command delimiters directly in input fields."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use malicious command delimiters] The attacker uses combinations of payload and carefully placed command delimiters to attack the software.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Software's input validation or filtering must not detect and block presence of additional malicious command."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "146",
      "77",
      "184",
      "78",
      "185",
      "93",
      "140",
      "157",
      "138",
      "154",
      "697"
    ]
  },
  "150": {
    "name": "Collect Data from Common Resource Locations",
    "description": "An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "116"
      }
    ],
    "prerequisites": [
      "The targeted applications must either expect files to be located at a specific location or, if the location of the files can be configured by the user, the user either failed to move the files from the default location or placed them in a conventional location for files of the given type."
    ],
    "relatedWeaknesses": [
      "552",
      "1239",
      "1258",
      "1266",
      "1272",
      "1323",
      "1330"
    ],
    "mitreAttack": [
      "T1003",
      "T1119",
      "T1213",
      "T1530",
      "T1555",
      "T1602"
    ]
  },
  "151": {
    "name": "Identity Spoofing",
    "description": "Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The identity associated with the message or resource must be removable or modifiable in an undetectable way."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Authentication",
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "287"
    ]
  },
  "153": {
    "name": "Input Data Manipulation",
    "description": "An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target must accept user data for processing and the manner in which this data is processed must depend on some aspect of the format or flags that the attacker can control."
    ],
    "relatedWeaknesses": [
      "20"
    ]
  },
  "154": {
    "name": "Resource Location Spoofing",
    "description": "An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "None. All applications rely on file paths and therefore, in theory, they or their resources could be affected by this type of attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "451"
    ]
  },
  "155": {
    "name": "Screen Temporary Files for Sensitive Information",
    "description": "An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Look for temporary files in target application] An adversary will try to discover temporary files in a target application. Knowledge of where the temporary files are being stored is important information.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt to read temporary files] An adversary will attempt to read any temporary files they may have discovered through normal means.",
        "techniques": [
          "Attempt to get the file by querying the file path to a web server",
          "Using a remote shell into an application, read temporary files and send out information remotely if necessary",
          "Recover temporary information from a user's browser cache"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Use function weaknesses to gain access to temporary files] If normal means to read temporary files did not work, an adversary will attempt to exploit weak temporary file functions to gain access to temporary files.",
        "techniques": [
          "Some C functions such as tmpnam(), tempnam(), and mktemp() will create a temporary file with a unique name, but do not stop an adversary from creating a file of the same name before it is opened by the application. Because these functions do not create file names that are sufficiently random, an adversary will try to make a file of the same name, causing a collision, and possibly altering file permissions for the temporary file so that it is able to be read.",
          "Similar to the last technique, an adversary might also create a file name collision using a linked file in a unix system such that the temporary file contents written out by the application write to a file of the adversaries choosing, allowing them to read the file contents."
        ]
      }
    ],
    "prerequisites": [
      "The target application must utilize temporary files and must fail to adequately secure them against other parties reading them."
    ],
    "relatedWeaknesses": [
      "377"
    ]
  },
  "157": {
    "name": "Sniffing Attacks",
    "description": "In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "117"
      },
      {
        "nature": "CanPrecede",
        "capecId": "652"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.",
        "techniques": [
          "Look for application documentation that might describe a communication mechanism used by a target."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Position In Between Targets] The adversary positions themselves somewhere in the middle of the two components. If the communication is encrypted, the adversary will need to act as a proxy and route traffic between the components, exploiting a flaw in the encryption mechanism. Otherwise, the adversary can just observe the communication at either end.",
        "techniques": [
          "Use Wireshark or some other packet capturing tool to capture traffic on a network.",
          "Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.",
          "Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Listen to Communication] The adversary observes communication, but does not alter or block it. The adversary gains access to sensitive information and can potentially utilize this information in a malicious way.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target data stream must be transmitted on a medium to which the adversary has access."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "311"
    ]
  },
  "158": {
    "name": "Sniffing Network Traffic",
    "description": "In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "157"
      }
    ],
    "prerequisites": [
      "The target must be communicating on a network protocol visible by a network sniffing application.",
      "The adversary must obtain a logical position on the network from intercepting target network traffic is possible. Depending on the network topology, traffic sniffing may be simple or challenging. If both the target sender and target recipient are members of a single subnet, the adversary must also be on that subnet in order to see their traffic communication."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries can obtain and set up open-source network sniffing tools easily."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "311"
    ],
    "mitreAttack": [
      "T1040",
      "T1111"
    ]
  },
  "159": {
    "name": "Redirect Access to Libraries",
    "description": "An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "154"
      },
      {
        "nature": "CanPrecede",
        "capecId": "185"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify Target] The adversary identifies the target application and determines what libraries are being used.",
        "techniques": [
          "Find public source code and identify library dependencies.",
          "Gain access to the system hosting the application and look for libraries in common locations."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Deploy Malicious Libraries] The adversary crafts malicious libraries and deploys them on the system where the application is running, or in a remote location that can be loaded by the application.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Redirect Library Calls to Malicious Library] Once the malicious library crafted by the adversary is deployed, the adversary will manipulate the flow of the application such that it calls the malicious library. This can be done in a variety of ways based on how the application is loading and calling libraries.",
        "techniques": [
          "Poison the DNS cache of the system so that it loads a malicious library from a remote location hosted by the adversary instead of the legitimate location",
          "Create a symlink that tricks the application into thinking that a malicious library is the legitimate library.",
          "Use DLL side-loading to place a malicious verison of a DLL in the windows directory."
        ]
      }
    ],
    "prerequisites": [
      "The target must utilize external libraries and must fail to verify the integrity of these libraries before using them."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To modify the entries in the configuration file pointing to malicious libraries"
      },
      {
        "level": "Medium",
        "details": "To force symlink and timing issues for redirecting access to libraries"
      },
      {
        "level": "High",
        "details": "To reverse engineering the libraries and inject malicious code into the libraries"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "706"
    ],
    "mitreAttack": [
      "T1574.008"
    ]
  },
  "16": {
    "name": "Dictionary-based Password Attack",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "49"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
        "techniques": [
          "Determine minimum and maximum allowed password lengths.",
          "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
          "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Select dictionaries] Pick the dictionaries to be used in the attack (e.g. different languages, specific terminology, etc.)",
        "techniques": [
          "Select dictionary based on particular users' preferred languages.",
          "Select dictionary based on the application/system's supported languages."
        ]
      },
      {
        "step": "3",
        "phase": "Explore",
        "description": "[Determine username(s) to target] Determine username(s) whose passwords to crack.",
        "techniques": [
          "Obtain username(s) by sniffing network packets.",
          "Obtain username(s) by querying application/system (e.g. if upon a failed login attempt, the system indicates whether the entered username was valid or not)",
          "Obtain usernames from filesystem (e.g. list of directories in C:\\Documents and Settings\\ in Windows, and list in /etc/passwd in UNIX-like systems)"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use dictionary to crack passwords.] Use a password cracking tool that will leverage the dictionary to feed passwords to the system and see if they work.",
        "techniques": [
          "Try all words in the dictionary, as well as common misspellings of the words as passwords for the chosen username(s).",
          "Try common combinations of words in the dictionary, as well as common misspellings of the combinations as passwords for the chosen username(s)."
        ]
      }
    ],
    "prerequisites": [
      "The system uses one factor password based authentication.",
      "The system does not have a sound password policy that is being enforced.",
      "The system does not implement an effective password throttling mechanism."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "A variety of password cracking tools and dictionaries are available to launch this type of an attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "521",
      "262",
      "263",
      "654",
      "307",
      "308",
      "309"
    ]
  },
  "160": {
    "name": "Exploit Script-Based APIs",
    "description": "Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support \u003cscript\u003e tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "113"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify API] Discover an API of interest by exploring application documentation or observing responses to API calls",
        "techniques": [
          "Search via internet for known, published APIs that support scripting instructions as arguments"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Test simple script] Adversaries will attempt to give a smaller script as input to the API, such as simply printing to the console, to see if the attack is viable.",
        "techniques": [
          "Create a general script to be taken as input by the API"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Give malicious scripting instructions to API] Adversaries will now craft custom scripts to do malicious behavior. Depending on the setup of the application this script could be run with user or admin level priveleges.",
        "techniques": [
          "Crafting a malicious script to be run on a system based on priveleges and capabilities of the system"
        ]
      }
    ],
    "prerequisites": [
      "The target application must include the use of APIs that execute scripts.",
      "The target application must allow the attacker to provide some or all of the arguments to one of these script interpretation methods and must fail to adequately filter these arguments for dangerous or unwanted script commands."
    ],
    "relatedWeaknesses": [
      "346"
    ]
  },
  "161": {
    "name": "Infrastructure Manipulation",
    "description": "An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "664"
      }
    ],
    "prerequisites": [
      "The targeted client must access the site via infrastructure that the attacker has co-opted and must fail to adequately verify that the communication channel is operating correctly (e.g. by verifying that they are, in fact, connected to the site they intended.)"
    ],
    "relatedWeaknesses": [
      "923"
    ]
  },
  "162": {
    "name": "Manipulating Hidden Fields",
    "description": "An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "77"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probe target web application] The adversary first probes the target web application to find all possible pages that can be visited on the website.",
        "techniques": [
          "Use a spidering tool to follow and record all links",
          "Use a proxy tool to record all links visited during a manual traversal of the web application."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Find hidden fields] Once the web application has been traversed, the adversary looks for all hidden HTML fields present in the client-side.",
        "techniques": [
          "Use the inspect tool on all modern browsers and filter for the keyword \"hidden\"",
          "Specifically look for hidden fields inside form elements."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Send modified hidden fields to server-side] Once the adversary has found hidden fields in the client-side, they will modify the values of these hidden fields one by one and then interact with the web application so that this data is sent to the server-side. The adversary observes the response from the server to determine if the values of each hidden field are being validated.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Manipulate hidden fields] Once the adversary has determined which hidden fields are not being validated by the server, they will manipulate them to change the normal behavior of the web application in a way that benefits the adversary.",
        "techniques": [
          "Manipulate a hidden field inside a form element and then submit the form so that the manipulated data is sent to the server."
        ]
      }
    ],
    "prerequisites": [
      "The targeted site must contain hidden fields to be modified.",
      "The targeted site must not validate the hidden fields with backend processing."
    ],
    "relatedWeaknesses": [
      "602"
    ]
  },
  "163": {
    "name": "Spear Phishing",
    "description": "An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "98"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Obtain useful contextual detailed information about the targeted user or organization] An adversary collects useful contextual detailed information about the targeted user or organization in order to craft a more deceptive and enticing message to lure the target into responding.",
        "techniques": [
          "Conduct web searching research of target. See also: CAPEC-118.",
          "Identify trusted associates, colleagues and friends of target. See also: CAPEC-118.",
          "Utilize social engineering attack patterns such as Pretexting. See also: CAPEC-407.",
          "Collect social information via dumpster diving. See also: CAPEC-406.",
          "Collect social information via traditional sources. See also: CAPEC-118.",
          "Collect social information via Non-traditional sources. See also: CAPEC-118."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Optional: Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
        "techniques": [
          "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L).",
          "Optionally obtain a legitimate SSL certificate for the new domain name."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Optional: Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
        "techniques": [
          "Use spidering software to get copy of web pages on legitimate site.",
          "Manually save copies of required web pages from legitimate site.",
          "Create new web pages that have the legitimate site's look at feel, but contain completely new content."
        ]
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Optional: Build variants of the website with very specific user information e.g., living area, etc.] Once the adversary has their website which duplicates a legitimate website, they need to build very custom user related information in it. For example, they could create multiple variants of the website which would target different living area users by providing information such as local news, local weather, etc. so that the user believes this is a new feature from the website.",
        "techniques": [
          "Integrate localized information in the web pages created to duplicate the original website. Those localized information could be dynamically generated based on unique key or IP address of the future victim."
        ]
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a message (typically an e-mail) to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to adversary's website) and log in. The key is to get the victim to believe that the message is coming from a legitimate entity trusted by the victim or with which the victim or does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
        "techniques": [
          "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
          "Place phishing link in post to online forum."
        ]
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
        "techniques": [
          "Log in to the legitimate site using another user's supplied credentials."
        ]
      }
    ],
    "prerequisites": [
      "None. Any user can be targeted by a Spear Phishing attack."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Spear phishing attacks require specific knowledge of the victims being targeted, such as which bank is being used by the victims, or websites they commonly log into (Google, Facebook, etc)."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "451"
    ],
    "mitreAttack": [
      "T1534",
      "T1566.001",
      "T1566.002",
      "T1566.003",
      "T1598.001",
      "T1598.002",
      "T1598.003"
    ]
  },
  "164": {
    "name": "Mobile Phishing",
    "description": "An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "98"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate site more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
        "techniques": [
          "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
          "Optionally obtain a legitimate SSL certificate for the new domain name."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Explore legitimate website and create duplicate] An adversary creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
        "techniques": [
          "Use spidering software to get copy of web pages on legitimate site.",
          "Manually save copies of required web pages from legitimate site.",
          "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Convince user to enter sensitive information on adversary's site.] An adversary sends a text message to the victim that has a call-to-action, in order to persuade the user into clicking the included link (which then takes the victim to the adversary's website) and logging in. The key is to get the victim to believe that the text message originates from a legitimate entity with which the victim does business and that the website pointed to by the URL in the text message is the legitimate website. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
        "techniques": [
          "Send the user a message from a spoofed legitimate-looking mobile number that asks the user to click on the included link."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use stolen credentials to log into legitimate site] Once the adversary captures some sensitive information through phishing (login credentials, credit card information, etc.) the adversary can leverage this information. For instance, the adversary can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
        "techniques": [
          "Log in to the legitimate site using another user's supplied credentials"
        ]
      }
    ],
    "prerequisites": [
      "An adversary needs mobile phone numbers to initiate contact with the victim.",
      "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
      "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
      "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "451"
    ]
  },
  "165": {
    "name": "File Manipulation",
    "description": "An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target must use the affected file without verifying its integrity."
    ],
    "mitreAttack": [
      "T1036.003"
    ]
  },
  "166": {
    "name": "Force the System to Reset Values",
    "description": "An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "161"
      }
    ],
    "prerequisites": [
      "The targeted application must have a reset function that returns the configuration of the application to an earlier state.",
      "The reset functionality must be inadequately protected against use."
    ],
    "relatedWeaknesses": [
      "306",
      "1221",
      "1232"
    ]
  },
  "167": {
    "name": "White Box Reverse Engineering",
    "description": "An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "188"
      }
    ],
    "prerequisites": [
      "Direct access to the object or software."
    ],
    "relatedWeaknesses": [
      "1323"
    ]
  },
  "168": {
    "name": "Windows ::DATA Alternate Data Stream",
    "description": "An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "636"
      }
    ],
    "prerequisites": [
      "The target must be running the Microsoft NTFS file system."
    ],
    "relatedWeaknesses": [
      "212",
      "69"
    ]
  },
  "169": {
    "name": "Footprinting",
    "description": "An adversary engages in probing and exploration activities to identify constituents and properties of the target.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very Low",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Request Footprinting] The attacker examines the website information and source code of the website and uses automated tools to get as much information as possible about the system and organization.",
        "techniques": [
          "Open Source Footprinting: Examine the website about the organization and skim through the webpage's HTML source to look for comments.",
          "Network Enumeration: Perform various queries (Registrar Query, Organizational Query, Domain Query, Network Query, POC Query) on the many whois databases found on the internet to identify domain names and associated networks.",
          "DNS Interrogation: Once basic information is gathered the attack could begin to query DNS.",
          "Other Techniques: Use ping sweep, TCP scan, UDP scan, OS Identification various techniques to gain more information about the system and network."
        ]
      }
    ],
    "prerequisites": [
      "An application must publicize identifiable information about the system or application through voluntary or involuntary means. Certain identification details of information systems are visible on communication networks (e.g., if an adversary uses a sniffer to inspect the traffic) due to their inherent structure and protocol standards. Any system or network that can be detected can be footprinted. However, some configuration choices may limit the useful information that can be collected during a footprinting attack."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary knows how to send HTTP request, run the scan tool."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1217",
      "T1592",
      "T1595"
    ]
  },
  "17": {
    "name": "Using Malicious Files",
    "description": "An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "122"
      },
      {
        "nature": "CanPrecede",
        "capecId": "233"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine File/Directory Configuration] The adversary looks for misconfigured files or directories on a system that might give executable access to an overly broad group of users.",
        "techniques": [
          "Through shell access to a system, use the command \"ls -l\" to view permissions for files and directories."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Upload Malicious Files] If the adversary discovers a directory that has executable permissions, they will attempt to upload a malicious file to execute.",
        "techniques": [
          "Upload a malicious file through a misconfigured FTP server."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute Malicious File] The adversary either executes the uploaded malicious file, or executes an existing file that has been misconfigured to allow executable access to the adversary.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To identify and execute against an over-privileged system interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "732",
      "285",
      "272",
      "59",
      "282",
      "270",
      "693"
    ],
    "mitreAttack": [
      "T1574.005",
      "T1574.010"
    ]
  },
  "170": {
    "name": "Web Application Fingerprinting",
    "description": "An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "541"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Request fingerprinting] Use automated tools or send web server specific commands to web server and wait for server's response.",
        "techniques": [
          "Use automated tools or send web server specific commands to web server and then receive server's response."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Increase the accuracy of server fingerprinting of Web servers] Attacker usually needs to send several different commands to accurately identify the web server. Attacker can also use automated tools to send requests to the server. The responses of the server may be different in terms of protocol behavior.",
        "techniques": [
          "Observe the ordering of the several HTTP response headers. The ordering of the header of each server may have unique identities.",
          "Send bad requests or requests of nonexistent pages to the server.",
          "Attacker takes existing automated tools to recognize the type and the version of the web server in use."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Identify Web Application Software] After the web server platform software has been identified, the attacker start to identify web application technologies such as ASP, .NET, PHP and Java on the server.",
        "techniques": [
          "Examine the file name extensions in URL, for example .php indicates PHP script interfaced with Apache server.",
          "Examine the HTTP Response Headers. This may leak information about software signatures",
          "Examine Cookies that may contain server's software information.",
          "Check error pages."
        ]
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Identify Backend Database Version] Determining the database engine type can assist attackers' attempt to successfully execute SQL injection. Some database API such as ODBC will show a database type as part of the driver information when reporting an error.",
        "techniques": [
          "Use tools to send bogus SQL query to the server and check error pages."
        ]
      }
    ],
    "prerequisites": [
      "Any web application can be fingerprinted. However, some configuration choices can limit the useful information an attacker may collect during a fingerprinting attack."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Attacker knows how to send HTTP request, SQL query to a web application."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "497"
    ]
  },
  "171": {
    "name": "DEPRECATED: Variable Manipulation",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-77 : Manipulating User-Controlled Variables\". Please refer to this other CAPEC going forward."
  },
  "173": {
    "name": "Action Spoofing",
    "description": "An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "prerequisites": [
      "The adversary must convince the victim into performing the decoy action.",
      "The adversary must have the means to control a user's interface to present them with a decoy action as well as the actual malicious action. Simple versions of this attack can be performed using web pages requiring only that the adversary be able to host (or control) content that the user visits."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "451"
    ]
  },
  "174": {
    "name": "Flash Parameter Injection",
    "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "182"
      },
      {
        "nature": "CanAlsoBe",
        "capecId": "460"
      },
      {
        "nature": "CanPrecede",
        "capecId": "63"
      },
      {
        "nature": "CanPrecede",
        "capecId": "178"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Spider] Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.",
        "techniques": [
          "Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.",
          "Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine the application susceptibility to Flash parameter injection] Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.",
        "techniques": [
          "When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.",
          "When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.",
          "When the arguments passed in the 'flashvars' attributes, the adversary injects '\u0026' and payload in the URL.",
          "If some of the attributes of the \u003cobject\u003e tag are received as parameters, the 'flashvars' attribute is injected into the \u003cobject\u003e tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.",
          "If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute Flash Parameter Injection Attack] Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.",
        "techniques": [
          "Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document."
        ]
      }
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The adversary needs to be smart enough to convince the victim to click on their crafted link."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "88"
    ]
  },
  "175": {
    "name": "Code Inclusion",
    "description": "An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "prerequisites": [
      "The target application must include external code/libraries that are executed when the application runs and the adversary must be able to influence the specific files that get included.",
      "The victim must run the targeted application, possibly using the crafted parameters that the adversary uses to identify the code to include."
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "176": {
    "name": "Configuration/Environment Manipulation",
    "description": "An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The target application must consult external files or configuration controls to control its execution. All but the very simplest applications meet this requirement."
    ],
    "relatedWeaknesses": [
      "15",
      "1233",
      "1234",
      "1304",
      "1328"
    ]
  },
  "177": {
    "name": "Create files with the same name as files protected with a higher classification",
    "description": "An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "17"
      }
    ],
    "prerequisites": [
      "The target application must include external files. Most non-trivial applications meet this criterion.",
      "The target application does not verify that a located file is the one it was looking for through means other than the name. Many applications fail to perform checks of this type.",
      "The directories the target application searches to find the included file include directories writable by the attacker which are searched before the protected directory containing the actual files. It is much less common for applications to meet this criterion, but if an attacker can manipulate the application's search path (possibly by controlling environmental variables) then they can force this criterion to be met."
    ],
    "relatedWeaknesses": [
      "706"
    ],
    "mitreAttack": [
      "T1036"
    ]
  },
  "178": {
    "name": "Cross-Site Flashing",
    "description": "An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "182"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identification] Using a browser or an automated tool, an attacker records all instances of URLs (or partial URL such as domain) passed to a flash file (SWF).",
        "techniques": [
          "Use an automated tool to record the variables passed to a flash file.",
          "Use a browser to manually explore the website and analyze how the flash file receive variables, e.g. JavaScript using SetVariable/GetVariable, HTML FlashVars param tag, etc.",
          "Use decompilers to retrieve the flash source code and record all user-controllable variables passed to a loadMovie* directive."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt to inject a remote flash file] The attacker makes use of a remotely available flash file (SWF) that generates a uniquely identifiable output when executed inside the targeted flash file.",
        "techniques": [
          "Modify the variable of the SWF file that contains the remote movie URL to the attacker controlled flash file."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Access or Modify Flash Application Variables] As the attacker succeeds in exploiting the vulnerability, they target the content of the flash application to steal variable content, password, etc.",
        "techniques": [
          "Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and loaded by the victim browser's flash plugin and sends document information to the attacker.",
          "Develop malicious Flash application that is injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the flash application to execute appropriately."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Execute JavaScript in victim's browser] When the attacker targets the current flash application, they can choose to inject JavaScript in the client's DOM and therefore execute cross-site scripting attack.",
        "techniques": [
          "Develop malicious JavaScript that is injected from the rogue flash movie to the targeted flash application through vectors identified during the Experiment Phase and loaded by the victim's browser."
        ]
      }
    ],
    "prerequisites": [
      "The targeted Flash application must reference external URLs and the locations thus referenced must be controllable through parameters. The Flash application must fail to sanitize such parameters against malicious manipulation. The victim must follow a crafted link created by the attacker."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "knowledge of Flash internals, parameters and remote referencing."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "601"
    ]
  },
  "179": {
    "name": "Calling Micro-Services Directly",
    "description": "An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "554"
      }
    ],
    "prerequisites": [
      "The target site must use micro-services that interact with the server and one or more of these micro-services must be vulnerable to some other attack pattern."
    ]
  },
  "18": {
    "name": "XSS Targeting Non-Script Elements",
    "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (\u003cimg\u003e), comments in XML documents (\u003c !-CDATA-\u003e), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.",
        "techniques": [
          "Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).",
          "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).",
          "Use a proxy tool to record results of the created requests."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Create malicious XSS content] Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
        "techniques": [
          "Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim.",
          "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
        "techniques": [
          "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
          "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
        ]
      }
    ],
    "prerequisites": [
      "The target client software must allow the execution of scripts generated by remote hosts."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine."
      },
      {
        "level": "High",
        "details": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "80"
    ]
  },
  "180": {
    "name": "Exploiting Incorrectly Configured Access Control Security Levels",
    "description": "An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "122"
      },
      {
        "nature": "CanPrecede",
        "capecId": "17"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user.",
        "techniques": [
          "Spider the web site for all available links.",
          "Brute force to guess all function names/action with different privileges."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Identify weak points in access control configurations] The attacker probes the access control for functions and data identified in the Explore phase to identify potential weaknesses in how the access controls are configured.",
        "techniques": [
          "The attacker attempts authenticated access to targeted functions and data.",
          "The attacker attempts unauthenticated access to targeted functions and data.",
          "The attacker attempts indirect and side channel access to targeted functions and data."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Access the function or data bypassing the access control] The attacker executes the function or accesses the data identified in the Explore phase bypassing the access control.",
        "techniques": [
          "The attacker executes the function or accesses the data not authorized to them."
        ]
      }
    ],
    "prerequisites": [
      "The target must apply access controls, but incorrectly configure them. However, not all incorrect configurations can be exploited by an attacker. If the incorrect configuration applies too little security to some functionality, then the attacker may be able to exploit it if the access control would be the only thing preventing an attacker's access and it no longer does so. If the incorrect configuration applies too much security, it must prevent legitimate activity and the attacker must be able to force others to require this activity.."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "In order to discover unrestricted resources, the attacker does not need special tools or skills. They only have to observe the resources or access mechanisms invoked as each action is performed and then try and access those access mechanisms directly."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "732",
      "1190",
      "1191",
      "1193",
      "1220",
      "1268",
      "1280",
      "1297",
      "1311",
      "1315",
      "1318",
      "1320",
      "1321"
    ],
    "mitreAttack": [
      "T1574.010"
    ]
  },
  "181": {
    "name": "Flash File Overlay",
    "description": "An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "103"
      }
    ],
    "prerequisites": [
      "The victim must be tricked into navigating to the attackers' decoy site and performing the actions on the decoy page.",
      "The victim's browser must support invisible Flash overlays."
    ],
    "relatedWeaknesses": [
      "1021"
    ]
  },
  "182": {
    "name": "Flash Injection",
    "description": "An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "137"
      },
      {
        "nature": "CanAlsoBe",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find Injection Entry Points] The attacker first takes an inventory of the entry points of the application.",
        "techniques": [
          "Spider the website for all available URLs that reference a Flash application.",
          "List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine the application's susceptibility to Flash injection] Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.",
        "techniques": [
          "Test the page using direct load asfunction, getURL,javascript:gotRoot(\"\")///d.jpg",
          "Test the page using controlled evil page/host, http://example.com/evil.swf",
          "Test the page using Flash HTML injection, \"'\u003e\u003cimg src='asfunction:getURL,javascript:gotRoot(\"\")//.jpg' \u003e",
          "Test the page using DOM injection, (gotRoot(''))"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject malicious content into target] Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to have knowledge of Flash, especially how to insert content the executes commands."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "20",
      "184",
      "697"
    ]
  },
  "183": {
    "name": "IMAP/SMTP Command Injection",
    "description": "An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify Target Web-Mail Server] The adversary first identifies the web-mail server they wish to exploit.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Identify Vulnerable Parameters] Once the adversary has identified a web-mail server, they identify any vulnerable parameters by altering their values in requests. The adversary knows that the parameter is vulnerable if the web-mail server returns an error of any sort. Ideally, the adversary is looking for a descriptive error message.",
        "techniques": [
          "Assign a null value to a parameter being used by the web-mail server and observe the response.",
          "Assign a random value to a parameter being used by the web-mail server and observe the response.",
          "Add additional values to a parameter being used by the web-mail server and observe the response.",
          "Add non standard special characters (i.e.: \\, ', \", @, #, !, |) to a parameter being used by the web-mail server and observe the response.",
          "Eliminate a parameter being used by the web-mail server and observe the response."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Determine Level of Injection] After identifying all vulnerable parameters, the adversary determines what level of injection is possible.",
        "techniques": [
          "Evaluate error messages to determine what IMAP/SMTP command is being executed for the vulnerable parameter. Sometimes the actually query will be placed in the error message.",
          "If there aren't descriptive error messages, the adversary will analyze the affected functionality to deduce the possible commands that could be being used by the mail-server."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Inject IMAP/SMTP Commands] The adversary manipulates the vulnerable parameters to inject an IMAP/SMTP command and execute it on the mail-server.",
        "techniques": [
          "Structure the injection as a header, body, and footer. The header contains the ending of the expected message, the body contains the injection of the new command, and the footer contains the beginning of the expected command.",
          "Each part of the injection payload needs to be terminated with the CRLF (%0d%0a) sequence."
        ]
      }
    ],
    "prerequisites": [
      "The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker.",
      "The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server.",
      "The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server."
    ],
    "relatedWeaknesses": [
      "77"
    ]
  },
  "184": {
    "name": "Software Integrity Attack",
    "description": "An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.",
    "typicalSeverity": "Low",
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the attacker to host a payload and then trigger the installation of the payload code."
      }
    ],
    "relatedWeaknesses": [
      "494"
    ]
  },
  "185": {
    "name": "Malicious Software Download",
    "description": "An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "184"
      },
      {
        "nature": "CanPrecede",
        "capecId": "662"
      }
    ],
    "relatedWeaknesses": [
      "494"
    ]
  },
  "186": {
    "name": "Malicious Software Update",
    "description": "An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "184"
      },
      {
        "nature": "CanFollow",
        "capecId": "98"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target] The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Craft a deployment mechanism based on the target] The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.",
        "techniques": [
          "Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.",
          "Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update",
          "Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.",
          "Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.",
          "Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Deploy malicious software update] Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.",
        "techniques": null
      }
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "This attack requires advanced cyber capabilities"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Availability",
          "Confidentiality"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494"
    ],
    "mitreAttack": [
      "T1195.002"
    ]
  },
  "187": {
    "name": "Malicious Automated Software Update via Redirection",
    "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "186"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Availability",
          "Confidentiality"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494"
    ],
    "mitreAttack": [
      "T1072"
    ]
  },
  "188": {
    "name": "Reverse Engineering",
    "description": "An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or \"back engineer\" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "prerequisites": [
      "Access to targeted system, resources, and information."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Understanding of low level programming languages or technologies can be very helpful. For example, when reverse engineering a binary file, an understanding of assembly languages can help to determine the purpose and inner-workings of the code. Another example is reverse engineering an application that relies on networking. Here, an understanding networking protocols can provide insight into application details."
      }
    ],
    "relatedWeaknesses": [
      "1278"
    ]
  },
  "189": {
    "name": "Black Box Reverse Engineering",
    "description": "An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "188"
      }
    ],
    "relatedWeaknesses": [
      "203",
      "1255",
      "1300"
    ]
  },
  "19": {
    "name": "Embedding Scripts within Scripts",
    "description": "An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "242"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Spider] Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side script element. These script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.",
        "techniques": [
          "Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.",
          "Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.",
          "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side script elements context and observe system behavior to determine if script was executed.",
          "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a server-side script elements context and observe system behavior to determine if script was executed.",
          "Use a proxy tool to record results of the created requests."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Steal session IDs, credentials, page content, etc.] As the adversary succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.",
        "techniques": [
          "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the adversary.",
          "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute appropriately."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Forceful browsing] When the adversary targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).",
        "techniques": [
          "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site",
          "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an adversary's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities)."
        ]
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Content spoofing] By manipulating the content, the adversary targets the information that the user would like to get from the website.",
        "techniques": [
          "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes adversary-modified invalid information to the user on the current web page."
        ]
      }
    ],
    "prerequisites": [
      "Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To load malicious script into open, e.g. world writable directory"
      },
      {
        "level": "Medium",
        "details": "Executing remote scripts on host and collecting output"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1027.009",
      "T1546.004",
      "T1546.016"
    ]
  },
  "190": {
    "name": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality",
    "description": "An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "167"
      }
    ],
    "relatedWeaknesses": [
      "912"
    ]
  },
  "191": {
    "name": "Read Sensitive Constants Within an Executable",
    "description": "\n            \n         ",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "167"
      }
    ],
    "prerequisites": [
      "Access to a binary or executable such that it can be analyzed by various utilities."
    ],
    "relatedWeaknesses": [
      "798"
    ],
    "mitreAttack": [
      "T1552.001"
    ]
  },
  "192": {
    "name": "Protocol Analysis",
    "description": "An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "prerequisites": [
      "Access to a binary executable.",
      "The ability to observe and interact with a communication channel between communicating processes."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Knowlegde of the Open Systems Interconnection model (OSI model), and famililarity with Wireshark or some other packet analyzer."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "326"
    ]
  },
  "193": {
    "name": "PHP Remote File Inclusion",
    "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "253"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.",
        "techniques": [
          "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt variations on input parameters] The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before. They send parameters that include variations of payloads which include a reference to the remote PHP script. They record all the responses from the server that include the output of the execution of remote PHP script.",
        "techniques": [
          "Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script.",
          "Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Run arbitrary server-side code] As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.",
        "techniques": [
          "Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script."
        ]
      }
    ],
    "prerequisites": [
      "Target application server must allow remote files to be included in the \"require\", \"include\", etc. PHP directives",
      "The adversary must have the ability to make HTTP requests to the target web application."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To inject the malicious payload in a web page"
      },
      {
        "level": "Medium",
        "details": "To bypass filters in the application"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "98",
      "80"
    ]
  },
  "194": {
    "name": "Fake the Source of Data",
    "description": "An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified \"From\" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "657"
      },
      {
        "nature": "CanPrecede",
        "capecId": "667"
      }
    ],
    "prerequisites": [
      "This attack is only applicable when a vulnerable entity associates data or services with an identity. Without such an association, there would be no reason to fake the source."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "287"
    ]
  },
  "195": {
    "name": "Principal Spoof",
    "description": "A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "151"
      }
    ],
    "prerequisites": [
      "The target must associate data or activities with a person's identity and the adversary must be able to modify this identity without detection."
    ]
  },
  "196": {
    "name": "Session Credential Falsification through Forging",
    "description": "An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "384"
      },
      {
        "nature": "CanPrecede",
        "capecId": "61"
      },
      {
        "nature": "ChildOf",
        "capecId": "21"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Analyze and Understand Session IDs] The attacker finds that the targeted application use session credentials to identify legitimate users.",
        "techniques": [
          "An attacker makes many anonymous connections and records the session IDs.",
          "An attacker makes authorized connections and records the session tokens or credentials."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create Session IDs.] Attackers craft messages containing their forged credentials in GET, POST request, HTTP headers or cookies.",
        "techniques": [
          "The attacker manipulates the HTTP request message and adds their forged session IDs in to the requests or cookies."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Abuse the Victim's Session Credentials] The attacker fixates falsified session ID to the victim when victim access the system. Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the forged session identifier.",
        "techniques": [
          "The attacker loads the predefined or predicted session ID into their browser and browses to protected data or functionality.",
          "The attacker loads the predefined or predicted session ID into their software and utilizes functionality with the rights of the victim."
        ]
      }
    ],
    "prerequisites": [
      "The targeted application must use session credentials to identify legitimate users. Session identifiers that remains unchanged when the privilege levels change. Predictable session identifiers."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Forge the session credential and reply the request."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "384",
      "664"
    ],
    "mitreAttack": [
      "T1134.002",
      "T1134.003",
      "T1606"
    ]
  },
  "197": {
    "name": "Exponential Data Expansion",
    "description": "An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "230"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using subsitituion on the victim's side.",
        "techniques": [
          "Use an automated tool to record all instances of URLs to process requests.",
          "Use a browser to manually explore the website and analyze how the application processes requests."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Craft malicious payload] The adversary crafts a malicious message containing nested exponential expansion that completely uses up available server resources. See the \"Example Instances\" section for details on how to craft this malicious payload.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Send the message] Send the malicious crafted message to the target URL.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "This type of attack requires that the target must receive input but either fail to provide an upper limit for entity expansion or provide a limit that is so large that it does not preclude significant resource consumption."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Ability to craft nested data expansion messages."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "770",
      "776"
    ]
  },
  "198": {
    "name": "XSS Targeting Error Pages",
    "description": "An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs as URL parameters] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application, looking for URLs which use parameters.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause application to return error page] The adversary uses the URLs gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters into the parameters to see if an error page occurs, and if the injected payload is executed by the error page.",
        "techniques": [
          "Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
          "Use a list of HTML special characters to inject into parameters of known URLs and check if they caused errors"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS through an error page, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter to include a malicious script tag.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "A third party web server which fails to adequately sanitize messages sent in error pages.",
      "The victim must be made to execute a query crafted by the adversary which results in the infected error report."
    ],
    "relatedWeaknesses": [
      "81"
    ]
  },
  "199": {
    "name": "XSS Using Alternate Syntax",
    "description": "An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the \"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass filters where \"script\" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS vulnerability] Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before using alternate syntax. These inputs are designed to bypass incomplete filtering (e.g., incomplete HTML encoding etc.) and try many variations of characters injection that would enable the XSS payload. They record all the responses from the server that include unmodified versions of their script.",
        "techniques": [
          "Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier. Attempt numerous variations based on form, format, syntax \u0026 encoding.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter to include a malicious script tag created using alternate syntax to bypass filters.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "Target client software must allow scripting such as JavaScript."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To inject the malicious payload in a web page"
      },
      {
        "level": "High",
        "details": "To bypass non trivial filters in the application"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "87"
    ]
  },
  "2": {
    "name": "Inducing Account Lockout",
    "description": "An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "212"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Investigate account lockout behavior of system] Investigate the security features present in the system that may trigger an account lockout",
        "techniques": [
          "Analyze system documentation to find list of events that could potentially cause account lockout",
          "Obtain user account in system and attempt to lock it out by sending malformed or incorrect data repeatedly",
          "Determine another user's login ID, and attempt to brute force the password (or other credentials) for it a predetermined number of times, or until the system provides an indication that the account is locked out."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Obtain list of user accounts to lock out] Generate a list of valid user accounts to lock out",
        "techniques": [
          "Obtain list of authorized users using another attack pattern, such as SQL Injection.",
          "Attempt to create accounts if possible; system should indicate if a user ID is already taken.",
          "Attempt to brute force user IDs if system reveals whether a given user ID is valid or not upon failed login attempts."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Lock Out Accounts] Perform lockout procedure for all accounts that the attacker wants to lock out.",
        "techniques": [
          "For each user ID to be locked out, perform the lockout procedure discovered in the first step."
        ]
      }
    ],
    "prerequisites": [
      "The system has a lockout mechanism.",
      "An attacker must be able to reproduce behavior that would result in an account being locked."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "No programming skills or computer knowledge is needed. An attacker can easily use this attack pattern following the Execution Flow above."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "645"
    ],
    "mitreAttack": [
      "T1531"
    ]
  },
  "20": {
    "name": "Encryption Brute Forcing",
    "description": "An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "112"
      },
      {
        "nature": "CanPrecede",
        "capecId": "668"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "Determine the ciphertext and the encryption algorithm.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "Perform an exhaustive brute force search of the key space, producing candidate plaintexts and observing if they make sense.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Ciphertext is known.",
      "Encryption algorithm and key size are known."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Brute forcing encryption does not require much skill."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "326",
      "327",
      "693",
      "1204"
    ]
  },
  "200": {
    "name": "Removal of filters: Input filters, output filters, data masking",
    "description": "An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "207"
      }
    ],
    "prerequisites": [
      "The target application must utilize some sort of filtering mechanism (input, output, or data masking)."
    ]
  },
  "201": {
    "name": "Serialized Data External Linking",
    "description": "An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "122"
      },
      {
        "nature": "ChildOf",
        "capecId": "278"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using a browser or an automated tool, an adversary records all instances of web services that process requests with serialized data.",
        "techniques": [
          "Use an automated tool to record all instances of URLs that process requests with serialized data.",
          "Use a browser to manually explore the website and analyze how the application processes serialized data requests."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Craft malicious payload] The adversary crafts malicious data message that contains references to sensitive files.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Launch an External Linking attack] Send the malicious crafted message containing the reference to a sensitive file to the target URL.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target must follow external data references without validating the validity of the reference target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To send serialized data messages with maliciously crafted schema."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "202": {
    "name": "Create Malicious Client",
    "description": "An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "22"
      }
    ],
    "prerequisites": [
      "The targeted service must make assumptions about the behavior of the client application that interacts with it, which can be abused by an adversary."
    ],
    "relatedWeaknesses": [
      "602"
    ]
  },
  "203": {
    "name": "Manipulate Registry Information",
    "description": "An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "176"
      }
    ],
    "prerequisites": [
      "The targeted application must rely on values stored in a registry.",
      "The adversary must have a means of elevating permissions in order to access and modify registry content through either administrator privileges (e.g., credentialed access), or a remote access tool capable of editing a registry through an API."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The adversary requires privileged credentials or the development/acquiring of a tailored remote access tool."
      }
    ],
    "relatedWeaknesses": [
      "15"
    ],
    "mitreAttack": [
      "T1112",
      "T1647"
    ]
  },
  "204": {
    "name": "Lifting Sensitive Data Embedded in Cache",
    "description": "An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "167"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify Application Cache] An adversary first identifies an application that utilizes a cache. This could either be a web application storing data in a browser cache, or an application running on a separate machine. The adversary examines the cache to determine file permissions and possible encryption.",
        "techniques": [
          "Use probing tools to look for application cache files on a machine.",
          "Use a web application and determine if any sensitive information is stored in browser cache."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt to Access Cache] Once the cache has been discovered, the adversary attempts to access the cached data. This often requires previous access to a machine hosting the target application.",
        "techniques": [
          "Use priviledge escalation to access cache files that might have strict privileges.",
          "If the application cache is encrypted with weak encryption, attempt to understand the encryption technique and break the encryption."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Lift Sensitive Data from Cache] After gaining access to cached data, an adversary looks for potentially sensitive information and stores it for malicious use. This sensitive data could possibly be used in follow-up attacks related to authentication or authorization.",
        "techniques": [
          "Using a public computer, or gaining access to a victim's computer, examine browser cache to look for sensitive data left over from previous sessions."
        ]
      }
    ],
    "prerequisites": [
      "The target application must store sensitive information in a cache.",
      "The cache must be inadequately protected against attacker access."
    ],
    "relatedWeaknesses": [
      "524",
      "311",
      "1239",
      "1258"
    ],
    "mitreAttack": [
      "T1005"
    ]
  },
  "205": {
    "name": "DEPRECATED: Lifting credential(s)/key material embedded in client distributions (thick or thin)",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-37 : Retrieve Embedded Sensitive Data. Please refer to this other pattern going forward."
  },
  "206": {
    "name": "Signing Malicious Code",
    "description": "The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The adversary first attempts to obtain a digital certificate in order to sign their malware or tools. This certificate could be stolen, created by the adversary, or acquired normally through a certificate authority.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "Based on the type of certificate obtained, the adversary will create a goal for their attack. This is either a broad or targeted attack. If an adversary was able to steal a certificate from a targeted organization, they could target this organization by pretending to have legitimate code signed by them. In other cases, the adversary would simply sign their malware and pose as legitimate software such that any user might trust it. This is the more broad approach",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "The adversary creates their malware and signs it with the obtained digital certificate. The adversary then checks if the code that they signed is valid either through downloading from the targeted source or testing locally.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "Once the malware has been signed, it is then deployed to the desired location. They wait for a trusting user to run their malware, thinking that it is legitimate software. This malware could do a variety of things based on the motivation of the adversary.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted developer must use a signing key to sign code bundles. (Note that not doing this is not a defense - it only means that the adversary does not need to steal the signing key before forging code bundles in the developer's name.)"
    ],
    "relatedWeaknesses": [
      "732"
    ],
    "mitreAttack": [
      "T1553.002"
    ]
  },
  "207": {
    "name": "Removing Important Client Functionality",
    "description": "An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "22"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probing] The adversary probes, through brute-forcing, reverse-engineering or other similar means, the functionality on the client that server assumes to be present and trustworthy.",
        "techniques": [
          "The adversary probes by exploring an application's functionality and its underlying mapping to server-side components.",
          "The adversary reverse engineers client-side code to identify the functionality that the server relies on for the proper or secure operation."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine which functionality to disable or remove] The adversary tries to determine which functionality to disable or remove through reverse-engineering from the list of functionality identified in the Explore phase.",
        "techniques": [
          "The adversary reverse engineers the client-side code to determine which functionality to disable or remove."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Disable or remove the critical functionality from the client code] Once the functionality has been determined, the adversary disables or removes the critical functionality from the client code to perform malicious actions that the server believes are prohibited.",
        "techniques": [
          "The adversary disables or removes the functionality from the client-side code to perform malicious actions, such as sending of dangerous content (such as scripts) to the server."
        ]
      }
    ],
    "prerequisites": [
      "The targeted server must assume the client performs important actions to protect the server or the server functionality. For example, the server may assume the client filters outbound traffic or that the client performs all price calculations correctly. Moreover, the server must fail to detect when these assumptions are violated by a client."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "To reverse engineer the client-side code to disable/remove the functionality on the client that the server relies on."
      },
      {
        "level": "Low",
        "details": "The adversary installs a web tool that allows scripts or the DOM model of web-based applications to be modified before they are executed in a browser. GreaseMonkey and Firebug are two examples of such tools."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "602"
    ]
  },
  "208": {
    "name": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",
    "description": "An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "207"
      }
    ],
    "prerequisites": [
      "The targeted server must rely on the client to correctly perform monetary calculations and must fail to detect errors in these calculations."
    ],
    "relatedWeaknesses": [
      "602"
    ]
  },
  "209": {
    "name": "XSS Using MIME Type Mismatch",
    "description": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "592"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all areas that allow a user to upload content through an HTTP POST request. This is typically found in blogs or forums.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to file upload features",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for MIME type mismatch] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and uploads files with scripting content, but whose MIME type is specified as a file type that cannot execute scripting content. If the application only checks the MIME type of the file, it may let the file through, causing the script to be executed by any user who accesses the file.",
        "techniques": [
          "Upload a script file with a MIME type of text/plain to a forum and then access the uploaded file to see if the script is executed. If possible, the script displays a unique identifier so the adversary knows for certain it was executed when testing."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Store malicious XSS content] Once the adversary has determined which file upload locations are vulnerable to MIME type mismatch, they will upload a malicious script disguised as a non scripting file. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
        "techniques": [
          "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
        "techniques": [
          "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
          "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
        ]
      }
    ],
    "prerequisites": [
      "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file.",
      "The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content."
    ],
    "relatedWeaknesses": [
      "79",
      "20",
      "646"
    ]
  },
  "21": {
    "name": "Exploitation of Trusted Identifiers",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for Indicators of Susceptibility] Using a variety of methods, until one is found that applies to the target, the adversary probes for cookies, session tokens, or entry points that bypass identifiers altogether.",
        "techniques": [
          "Spider all available pages",
          "Attack known bad interfaces",
          "Search outward-facing configuration and properties files for identifiers."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Fetch samples] The adversary fetches many samples of identifiers. This may be through legitimate access (logging in, legitimate connections, etc.) or via systematic probing.",
        "techniques": [
          "An adversary makes many anonymous connections and records the session IDs assigned.",
          "An adversary makes authorized connections and records the session tokens or credentials issued.",
          "An adversary gains access to (legitimately or illegitimately) a nearby system (e.g., in the same operations network, DMZ, or local network) and makes a connection from it, attempting to gain the same privileges as a trusted system."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Server software must rely on weak identifier proof and/or verification schemes.",
      "Identifiers must have long lifetimes and potential for reusability.",
      "Server software must allow concurrent sessions to exist."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To achieve a direct connection with the weak or non-existent server session access control, and pose as an authorized user"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "290",
      "302",
      "346",
      "539",
      "6",
      "384",
      "664",
      "602",
      "642"
    ],
    "mitreAttack": [
      "T1134",
      "T1528",
      "T1539"
    ]
  },
  "211": {
    "name": "DEPRECATED: Leveraging web tools (e.g. Mozilla's GreaseMonkey, Firebug) to change application behavior",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern."
  },
  "212": {
    "name": "Functionality Misuse",
    "description": "An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The adversary has the capability to interact with the application directly.The target system does not adequately implement safeguards to prevent misuse of authorized actions/processes."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "General computer knowledge about how applications are launched, how they interact with input/output, and how they are configured."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1242",
      "1246",
      "1281"
    ]
  },
  "213": {
    "name": "DEPRECATED: Directory Traversal",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-126 : Path Traversal\". Please refer to this other CAPEC going forward."
  },
  "214": {
    "name": "DEPRECATED: Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping",
    "description": "This attack pattern has been deprecated as it was merged into \"CAPEC-215 : Fuzzing for application mapping\". Please refer to this other CAPEC going forward."
  },
  "215": {
    "name": "Fuzzing for application mapping",
    "description": "An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "54"
      },
      {
        "nature": "ChildOf",
        "capecId": "28"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.",
        "techniques": [
          "Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.",
          "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
          "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
        "techniques": [
          "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
          "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that might provide information to map the application",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Craft exploit payloads] An adversary usually needs to modify the fuzzing parameters according to the observed error messages to get the desired sensitive information for the application. To defeat correlation, the adversary may try changing the origin IP addresses or client browser identification strings or start a new session from where they left off in obfuscating the attack.",
        "techniques": [
          "Modify the parameters in the fuzzing tool according to the observed error messages. Repeat with enough parameters until the application has been sufficiently mapped.",
          "If the application rejects the large amount of fuzzing messages from the same host machine, the adversary needs to hide the attacks by changing the IP addresses or other credentials."
        ]
      }
    ],
    "prerequisites": [
      "The target application must fail to sanitize incoming messages adequately before processing."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Although fuzzing parameters is not difficult, and often possible with automated fuzzing tools, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "209",
      "532"
    ]
  },
  "216": {
    "name": "Communication Channel Manipulation",
    "description": "An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "94"
      }
    ],
    "prerequisites": [
      "The target application must leverage an open communications channel.",
      "The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94)."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Read Data",
          "Modify Data",
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "306"
    ]
  },
  "217": {
    "name": "Exploiting Incorrectly Configured SSL/TLS",
    "description": "An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.",
    "likelihoodOfAttack": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "216"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine SSL/TLS Configuration] Determine the SSL/TLS configuration of either the server or client being targeted, preferably both. This is not a hard requirement, as the adversary can simply assume commonly exploitable configuration settings and indiscriminately attempt them.",
        "techniques": [
          "If the target is a webpage, some of the SSL/TLS configuration can be viewed through the browser's security information, such as the key sizes and cipher being used."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Intercept Communication] Provide controlled access to the server by the client, by either providing a link for the client to click on, or by positioning one's self at a place on the network to intercept and control the flow of data between client and server, e.g. AiTM (adversary in the middle - CAPEC-94).",
        "techniques": [
          "Create a malicious webpage that looks identical to the target webpage, but routes client traffic to the server such that the adversary can observe the traffic and perform an adverary in the middle attack.",
          "If the adversary has access to the network that either the client or server is on, the can attempt to use a packet sniffer to perform an adversary in the middle attack.",
          "Install a packet sniffer through malware directly to a client device that can intercept SSL/TLS traffic and perform an adversary in the middle attack."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Capture or Manipulate Sensitive Data] Once the adversary has the ability to intercept the secure communication, they exploit the incorrectly configured SSL to view the encrypted communication. The adversary can choose to just record the secure communication or manipulate the data to achieve a desired effect.",
        "techniques": [
          "Use known exploits for old SSL and TLS versions.",
          "Use known exploits for weak ciphers such as DES and RC4."
        ]
      }
    ],
    "prerequisites": [
      "Access to the client/server stream."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The adversary needs real-time access to network traffic in such a manner that the adversary can grab needed information from the SSL stream, possibly influence the decided-upon encryption method and options, and perform automated analysis to decipher encrypted material recovered. Tools exist to automate part of the tasks, but to successfully use these tools in an attack scenario requires detailed understanding of the underlying principles."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "201"
    ]
  },
  "218": {
    "name": "Spoofing of UDDI/ebXML Messages",
    "description": "An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "148"
      }
    ],
    "prerequisites": [
      "The targeted business's UDDI or ebXML information must be served from a location that the attacker can spoof or compromise or the attacker must be able to intercept and modify unsecured UDDI/ebXML messages in transit."
    ],
    "relatedWeaknesses": [
      "345"
    ]
  },
  "219": {
    "name": "XML Routing Detour Attacks",
    "description": "An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "94"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using command line or an automated tool, an attacker records all instances of web services to process XML requests.",
        "techniques": [
          "Use automated tool to record all instances to process XML requests or find exposed WSDL.",
          "Use tools to crawl WSDL"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Identify SOAP messages that have multiple state processing.] Inspect instance to see whether the XML processing has multiple stages or not.",
        "techniques": [
          "Inspect the SOAP message routing head to see whether the XML processing has multiple stages or not."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Launch an XML routing detour attack] The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message identified in the Explore phase. Thus, the attacker can route the XML message to the attacker controlled node (and access the message contents).",
        "techniques": [
          "The attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header of the SOAP message"
        ]
      }
    ],
    "prerequisites": [
      "The targeted system must have multiple stages processing of XML content."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To inject a bogus node in the XML routing table"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "441",
      "610"
    ]
  },
  "22": {
    "name": "Exploiting Trust in Client",
    "description": "An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "prerequisites": [
      "Server software must rely on client side formatted and validated values, and not reinforce these checks on the server side."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker must have fairly detailed knowledge of the syntax and semantics of client/server communications protocols and grammars"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "290",
      "287",
      "20",
      "200",
      "693"
    ]
  },
  "220": {
    "name": "Client-Server Protocol Manipulation",
    "description": "An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "272"
      }
    ],
    "prerequisites": [
      "The client and/or server must utilize a protocol that has a weakness allowing manipulation of the interaction."
    ],
    "relatedWeaknesses": [
      "757"
    ]
  },
  "221": {
    "name": "Data Serialization External Entities Blowup",
    "description": "This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "231"
      },
      {
        "nature": "ChildOf",
        "capecId": "278"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find target web service] The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Host malicious file on a server] The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Craft malicious data] Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Send serialized data containing URI] The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A server that has an implementation that accepts entities containing URI values."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "611"
    ]
  },
  "222": {
    "name": "iFrame Overlay",
    "description": "In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "103"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Craft an iFrame Overlay page] The adversary crafts a malicious iFrame overlay page.",
        "techniques": [
          "The adversary leverages iFrame overlay capabilities to craft a malicious iFrame overlay page."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[adversary tricks victim to load the iFrame overlay page] adversary utilizes some form of temptation, misdirection or coercion to trick the victim to loading and interacting with the iFrame overlay page in a way that increases the chances that the victim will visit the malicious page.",
        "techniques": [
          "Trick the victim to the malicious site by sending the victim an e-mail with a URL to the site.",
          "Trick the victim to the malicious site by manipulating URLs on a site trusted by the victim.",
          "Trick the victim to the malicious site through a cross-site scripting attack."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Trick victim into interacting with the iFrame overlay page in the desired manner] The adversary tricks the victim into clicking on the areas of the UI which contain the hidden action controls and thereby interacts with the target system maliciously with the victim's level of privilege.",
        "techniques": [
          "Hide action controls over very commonly used functionality.",
          "Hide action controls over very psychologically tempting content."
        ]
      }
    ],
    "prerequisites": [
      "The victim is communicating with the target application via a web based UI and not a thick client. The victim's browser security policies allow iFrames. The victim uses a modern browser that supports UI elements like clickable buttons (i.e. not using an old text only browser). The victim has an active session with the target system. The target system's interaction window is open in the victim's browser and supports the ability for initiating sensitive actions on behalf of the user in the target system."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Crafting the proper malicious site and luring the victim to this site is not a trivial task."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1021"
    ]
  },
  "224": {
    "name": "Fingerprinting",
    "description": "An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very Low",
    "prerequisites": [
      "A means by which to interact with the target system directly."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Some fingerprinting activity requires very specific knowledge of how different operating systems respond to various TCP/IP requests. Application fingerprinting can be as easy as envoking the application with the correct command line argument, or mouse clicking in the appropriate place on the screen."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "226": {
    "name": "Session Credential Falsification through Manipulation",
    "description": "An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "196"
      }
    ],
    "prerequisites": [
      "The targeted application must use session credentials to identify legitimate users."
    ],
    "relatedWeaknesses": [
      "565",
      "472"
    ]
  },
  "227": {
    "name": "Sustained Client Engagement",
    "description": "An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.",
    "prerequisites": [
      "This pattern of attack requires a temporal aspect to the servicing of a given request. Success can be achieved if the adversary can make requests that collectively take more time to complete than legitimate user requests within the same time frame."
    ],
    "relatedWeaknesses": [
      "400"
    ],
    "mitreAttack": [
      "T1499"
    ]
  },
  "228": {
    "name": "DTD Injection",
    "description": "An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "250"
      },
      {
        "nature": "CanPrecede",
        "capecId": "197"
      },
      {
        "nature": "CanPrecede",
        "capecId": "491"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process XML requests.",
        "techniques": [
          "Use an automated tool to record all instances of URLs to process XML requests.",
          "Use a browser to manually explore the website and analyze how the application processes XML requests."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine use of XML with DTDs] Examine application input to identify XML input that leverage the use of one or more DTDs.",
        "techniques": [
          "Examine any available documentation for the application that discusses expected XML input.",
          "Exercise the application using XML input with and without a DTD specified. Failure without DTD likely indicates use of DTD."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Craft and inject XML containg malicious DTD payload]",
        "techniques": [
          "Inject XML expansion attack that creates a Denial of Service impact on the targeted server using its DTD.",
          "Inject XML External Entity (XEE) attack that can cause the disclosure of confidential information, execute abitrary code, create a Denial of Service of the targeted server, or several other malicious impacts."
        ]
      }
    ],
    "prerequisites": [
      "The target must be running an XML based application that leverages DTDs."
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "229": {
    "name": "Serialized Data Parameter Blowup",
    "description": "This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "231"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using a browser or an automated tool, an attacker records all instances of web services to process requests using serialized data.",
        "techniques": [
          "Use an automated tool to record all instances of URLs to process requests from serialized data.",
          "Use a browser to manually explore the website and analyze how the application processes requests using serialized data."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Launch a Blowup attack] The attacker crafts malicious messages that contain multiple configuration parameters in the same dataset.",
        "techniques": [
          "Send the malicious crafted message containing the multiple configuration parameters to the target URL, causing a denial of service."
        ]
      }
    ],
    "prerequisites": [
      "The server accepts input in the form of serialized data and is using a parser with a runtime longer than O(n) for the insertion of a new configuration parameter in the data container.(examples are .NET framework 1.0 and 1.1)"
    ],
    "relatedWeaknesses": [
      "770"
    ]
  },
  "23": {
    "name": "File Content Injection",
    "description": "An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "242"
      },
      {
        "nature": "CanAlsoBe",
        "capecId": "165"
      }
    ],
    "prerequisites": [
      "The target software must consume files.",
      "The adversary must have access to modify files that the target software will consume."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "How to poison a file with malicious payload that will exploit a vulnerability when the file is opened. The adversary must also know how to place the file onto a system where it will be opened by an unsuspecting party, or force the file to be opened."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "20"
    ]
  },
  "230": {
    "name": "Serialized Data with Nested Payloads",
    "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An application's user-controllable data is expressed in a language that supports subsitution.",
      "An application does not perform sufficient validation to ensure that user-controllable data is not malicious."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "112",
      "20",
      "674",
      "770"
    ]
  },
  "231": {
    "name": "Oversized Serialized Data Payloads",
    "description": "An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An application uses an parser for serialized data to perform transformation on user-controllable data.",
      "An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Denial of service"
      },
      {
        "level": "High",
        "details": "Arbitrary code execution"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "112",
      "20",
      "674",
      "770"
    ]
  },
  "233": {
    "name": "Privilege Escalation",
    "description": "An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.",
    "relatedWeaknesses": [
      "269",
      "1264",
      "1311"
    ],
    "mitreAttack": [
      "T1548"
    ]
  },
  "234": {
    "name": "Hijacking a privileged process",
    "description": "An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "233"
      },
      {
        "nature": "CanFollow",
        "capecId": "242"
      },
      {
        "nature": "CanFollow",
        "capecId": "175"
      },
      {
        "nature": "CanFollow",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find process with elevated priveleges] The adversary probes for processes running with elevated privileges.",
        "techniques": [
          "On Windows, use the process explorer's security tab to see if a process is running with administror privileges.",
          "On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find vulnerability in running process] The adversary looks for a vulnerability in the running process that would allow for arbitrary code execution with the privilege of the running process.",
        "techniques": [
          "Look for improper input validation",
          "Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data.",
          "Utilize system utilities that support process control that have been inadequately secured"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute arbitrary code] The adversary exploits the vulnerability that they have found and hijacks the running process.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted process or operating system must contain a bug that allows attackers to hijack the targeted process."
    ],
    "relatedWeaknesses": [
      "732",
      "648"
    ]
  },
  "235": {
    "name": "DEPRECATED: Implementing a callback to system routine (old AWT Queue)",
    "description": "This attack pattern has been deprecated. Please refer to CAPEC:30 - Hijacking a Privileged Thread of Execution."
  },
  "236": {
    "name": "DEPRECATED: Catching exception throw/signal from privileged block",
    "description": "This attack pattern has been deprecated as it did not have enough distinction from CAPEC-30 : Hijacking a Privileged Thread of Execution. Please refer to CAPEC-30 moving forward."
  },
  "237": {
    "name": "Escaping a Sandbox by Calling Code in Another Language",
    "description": "The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "480"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probing] The attacker probes the target application to see whether calling code of another language is allowed within a sandbox.",
        "techniques": [
          "The attacker probes the target application to see whether calling code of another language is allowed within a sandbox."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Analysis] The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox.",
        "techniques": [
          "The attacker analyzes the target application to get a list of cross code weaknesses in the standard libraries of the sandbox."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Verify the exploitable security weaknesses] The attacker tries to craft malicious code of another language allowed by the sandbox to verify the security weaknesses of the standard libraries found in the Explore phase.",
        "techniques": [
          "The attacker tries to explore the security weaknesses by calling malicious code of another language allowed by the sandbox."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Exploit the security weaknesses in the standard libraries] The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries verified in the Experiment phase. The attacker will be able to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox.",
        "techniques": [
          "The attacker calls malicious code of another language to exploit the security weaknesses in the standard libraries."
        ]
      }
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The attacker must have a good knowledge of the platform specific mechanisms of signing and verifying code. Most code signing and verification schemes are based on use of cryptography, the attacker needs to have an understand of these cryptographic operations in good detail."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "693"
    ]
  },
  "238": {
    "name": "DEPRECATED: Using URL/codebase / G.A.C. (code source) to convince sandbox of privilege",
    "description": "This attack pattern has been deprecated as it did not appear to be a valid attack pattern."
  },
  "239": {
    "name": "DEPRECATED: Subversion of Authorization Checks: Cache Filtering, Programmatic Security, etc.",
    "description": "This attack pattern has been deprecated as it did not contain any content and did not serve any useful purpose. Please refer to \"CAPEC-207: removing Important Client Functionality\" going forward."
  },
  "24": {
    "name": "Filter Failure through Buffer Overflow",
    "description": "In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey] The attacker surveys the target application, possibly as a valid and authenticated user",
        "techniques": [
          "Spidering web sites for inputs that involve potential filtering",
          "Brute force guessing of filtered inputs"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt injections] Try to feed overly long data to the system. This can be done manually or a dynamic tool (black box) can be used to automate this. An attacker can also use a custom script for that purpose.",
        "techniques": [
          "Brute force attack through black box penetration test tool.",
          "Fuzzing of communications protocols",
          "Manual testing of possible inputs with attack data."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Monitor responses] Watch for any indication of failure occurring. Carefully watch to see what happened when filter failure occurred. Did the data get in?",
        "techniques": [
          "Boron tagging. Choose clear attack inputs that are easy to notice in output. In binary this is often 0xa5a5a5a5 (alternating 1s and 0s). Another obvious tag value is all zeroes, but it is not always obvious what goes wrong if the null values get into the data.",
          "Check Log files. An attacker with access to log files can look at the outcome of bad input."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Abuse the system through filter failure] An attacker writes a script to consistently induce the filter failure.",
        "techniques": [
          "DoS through filter failure. The attacker causes the system to crash or stay down because of its failure to filter properly.",
          "Malicious code execution. An attacker introduces a malicious payload and executes arbitrary code on the target system.",
          "An attacker can use the filter failure to introduce malicious data into the system and leverage a subsequent SQL injection, Cross Site Scripting, Command Injection or similar weakness if it exists."
        ]
      }
    ],
    "prerequisites": [
      "Ability to control the length of data passed to an active filter."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker can simply overflow a buffer by inserting a long string into an attacker-modifiable injection vector. The result can be a DoS."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "119",
      "118",
      "74",
      "20",
      "680",
      "733",
      "697"
    ]
  },
  "240": {
    "name": "Resource Injection",
    "description": "An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "prerequisites": [
      "The target application allows the user to both specify the identifier used to access a system resource. Through this permission, the user gains the capability to perform actions on that resource (e.g., overwrite the file)"
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "99"
    ]
  },
  "241": {
    "name": "DEPRECATED: Code Injection",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-242 : Code Injection\". Please refer to this other CAPEC going forward."
  },
  "242": {
    "name": "Code Injection",
    "description": "An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "prerequisites": [
      "The target software does not validate user-controlled input such that the execution of a process may be altered by sending code in through legitimate data channels, using no other mechanism."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "94"
    ]
  },
  "243": {
    "name": "XSS Targeting HTML Attributes",
    "description": "An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS targeting HTML attributes] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various malicious expressions as input, hoping to embed them as HTML attributes.",
        "techniques": [
          "Inject single and double quotes into URL parameters or other inputs to see if they are filtered out. Also use URL encoding to bypass filters.",
          "Use single or double quotes to close attribute evaluation and enter a new attribute that contains an expression."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "The target application must fail to adequately sanitize HTML attributes against the presence of dangerous commands."
    ],
    "relatedWeaknesses": [
      "83"
    ]
  },
  "244": {
    "name": "XSS Targeting URI Placeholders",
    "description": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To inject the malicious payload in a web page"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "83"
    ]
  },
  "245": {
    "name": "XSS Using Doubled Characters",
    "description": "The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the \u003c before a script command, (\u003c\u003cscript or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS using double characters] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads modified to use double characters and doubled special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Use a list of XSS probe strings using double characters to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
          "Use a list of doubled HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Execute a script using an expression embedded in an HTML attribute, which avoids needing to inject a script tag.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "The targeted web application does not fully normalize input before checking for prohibited syntax. In particular, it must fail to recognize prohibited methods preceded by certain sequences of repeated characters."
    ],
    "relatedWeaknesses": [
      "85"
    ]
  },
  "246": {
    "name": "DEPRECATED: XSS Using Flash",
    "description": "This pattern has been deprecated as it is covered by a chaining relationship between CAPEC-174: Flash Parameter Injection and CAPEC-591: Stored XSS. Please refer to these CAPECs going forward."
  },
  "247": {
    "name": "XSS Using Invalid Characters",
    "description": "An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS vulnerabilities using invalid characters] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters preceded by an invalid character(s) to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. The adversary is looking for cases where an invalid character causes an input filter to stop processing, allowing the malicious input that follows to bypass the filter",
        "techniques": [
          "Use a list of XSS probe strings preceded by an invalid character(s) such as null, carriage return, line feed, or tab to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
          "Use a list of HTML special characters preceded by an invalid character(s) to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter to include a malicious script tag preceded by invalid character(s).",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters."
    ],
    "relatedWeaknesses": [
      "86"
    ]
  },
  "248": {
    "name": "Command Injection",
    "description": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "prerequisites": [
      "The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "77"
    ]
  },
  "249": {
    "name": "DEPRECATED: Linux Terminal Injection",
    "description": "This attack pattern has been deprecated as it is covered by \"CAPEC-40 : Manipulating Writeable Terminal Devices\". Please refer to this CAPEC going forward."
  },
  "25": {
    "name": "Forced Deadlock",
    "description": "The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The adversary initiates an exploratory phase to get familiar with the system.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "The adversary triggers a first action (such as holding a resource) and initiates a second action which will wait for the first one to finish.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Explore",
        "description": "If the target program has a deadlock condition, the program waits indefinitely resulting in a denial of service.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target host has a deadlock condition. There are four conditions for a deadlock to occur, known as the Coffman conditions. [REF-101]",
      "The target host exposes an API to the user."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "This type of attack may be sophisticated and require knowledge about the system's resources and APIs."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "412",
      "567",
      "662",
      "667",
      "833",
      "1322"
    ],
    "mitreAttack": [
      "T1499.004"
    ]
  },
  "250": {
    "name": "XML Injection",
    "description": "An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.",
    "likelihoodOfAttack": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the Target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XML queries",
        "techniques": [
          "Use an automated tool to record all instances of user-controllable input used to contruct XML queries.",
          "Use a browser to manually explore the website and analyze how the application processes inputs."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine the Structure of Queries] Using manual or automated means, test inputs found for XML weaknesses.",
        "techniques": [
          "Use XML reserved characters or words, possibly with other input data to attempt to cause unexpected results and identify improper input validation."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject Content into XML Queries] Craft malicious content containing XML expressions that is not validated by the application and is executed as part of the XML queries.",
        "techniques": [
          "Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker."
        ]
      }
    ],
    "prerequisites": [
      "XML queries used to process user input and retrieve information stored in XML documents",
      "User-controllable input not properly sanitized"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker must have knowledge of XML syntax and constructs in order to successfully leverage XML Injection"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "91",
      "74",
      "20",
      "707"
    ]
  },
  "251": {
    "name": "Local Code Inclusion",
    "description": "The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "175"
      }
    ],
    "prerequisites": [
      "The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture.",
      "Some variants of this attack may require that old versions of some code files be present and in predictable locations."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "829"
    ],
    "mitreAttack": [
      "T1055"
    ]
  },
  "252": {
    "name": "PHP Local File Inclusion",
    "description": "The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "251"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey application] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find. The adversary is looking for URLs that show PHP file inclusion is used, which can look something like \"http://vulnerable-website/file.php?file=index.php\".",
        "techniques": [
          "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt variations on input parameters] Once the adversary finds a vulnerable URL that takes file input, they attempt a variety of path traversal techniques to attempt to get the application to display the contents of a local file, or execute a different PHP file already stored locally on the server.",
        "techniques": [
          "Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of path traversal techniques used to include well known files.",
          "Use a proxy tool to record results of manual input of local file inclusion probes in known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Include desired local file] Once the adversary has determined which techniques of path traversal successfully work with the vulnerable PHP application, they will target a specific local file to include. These can be files such as \"/etc/passwd\", \"/etc/shadow\", or configuration files for the application that might expose sensitive information.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted PHP application must have a bug that allows an attacker to control which code file is loaded at some juncture."
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "253": {
    "name": "Remote Code Inclusion",
    "description": "The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "175"
      },
      {
        "nature": "CanPrecede",
        "capecId": "664"
      }
    ],
    "prerequisites": [
      "Target application server must allow remote files to be included.The malicious file must be placed on the remote machine previously."
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "254": {
    "name": "DEPRECATED: DTD Injection in a SOAP Message",
    "description": "This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the pattern CAPEC-228 : DTD Injection going forward."
  },
  "256": {
    "name": "SOAP Array Overflow",
    "description": "An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application to perform the buffer overflow on. In this attack, adversaries look for applications that utilize SOAP as a communication mechanism.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "The adversary creates a SOAP message that incorrectly specifies the size of its array to be smaller than the size of the actual content by a large margin and sends it to the application. If this causes a crash or some unintended behavior, it is likely that this is a valid injection vector."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs",
          "The adversary will choose a SOAP type that allows them to put shellcode into the buffer when the array is read into the application."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary sends the crafted SOAP message to the program, overflowing the buffer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted SOAP server must trust that the array size as stated in messages it receives is correct, but read through the entire content of the message regardless of the stated size of the array."
    ],
    "relatedWeaknesses": [
      "805"
    ]
  },
  "257": {
    "name": "DEPRECATED: Abuse of Transaction Data Structure",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern."
  },
  "258": {
    "name": "DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-65 : Sniff Application Code\". Please refer to this other CAPEC going forward."
  },
  "259": {
    "name": "DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-65 : Sniff Application Code\". Please refer to this other CAPEC going forward."
  },
  "26": {
    "name": "Leveraging Race Conditions",
    "description": "The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by \"running the race\", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The adversary explores to gauge what level of access they have.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The adversary gains access to a resource on the target host. The adversary modifies the targeted resource. The resource's value is used to determine the next normal execution action.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "The resource is modified/checked concurrently by multiple processes. By using one of the processes, the adversary is able to modify the value just before it is consumed by a different process. A race condition occurs and is exploited by the adversary to abuse the target host.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A resource is accessed/modified concurrently by multiple processes such that a race condition exists.",
      "The adversary has the ability to modify the resource."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Being able to \"run the race\" requires basic knowledge of concurrent processing including synchonization techniques."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "368",
      "363",
      "366",
      "370",
      "362",
      "662",
      "689",
      "667",
      "665",
      "1223",
      "1254",
      "1298"
    ]
  },
  "260": {
    "name": "DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-65 : Sniff Application Code\". Please refer to this other CAPEC going forward."
  },
  "261": {
    "name": "Fuzzing for garnering other adjacent user/sensitive data",
    "description": "An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "54"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Observe communication and inputs] The fuzzing adversary observes the target system looking for inputs and communications between modules, subsystems, or systems.",
        "techniques": [
          "Network sniffing. Using a network sniffer such as wireshark, the adversary observes communications into and out of the target system.",
          "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the adversary observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
          "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
        "techniques": [
          "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
          "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if there are any log or error messages that either provide user/sensitive data or give information about an expected template that could be used to produce this data.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Craft exploit payloads] If the logs did not reveal any user/sensitive data, an adversary will attempt to make the fuzzing inputs form to an expected template",
        "techniques": [
          "Create variants of expected templates that request additional information",
          "Create variants that exclude limiting clauses",
          "Create variants that alter fields taht identify the requester in order to subvert access controls",
          "Repeat different fuzzing variants until sensitive information is divulged"
        ]
      }
    ],
    "prerequisites": [
      "The server must assume that the queries it receives follow specific templates and/or have fields or attributes that follow specific procedures. The server must process queries that it receives without adequately checking or sanitizing queries to ensure they follow these templates."
    ],
    "relatedWeaknesses": [
      "20"
    ]
  },
  "263": {
    "name": "Force Use of Corrupted Files",
    "description": "This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "17"
      }
    ],
    "prerequisites": [
      "The targeted application must utilize a configuration file that an attacker is able to corrupt. In some cases, the attacker must be able to force the (re-)reading of the corrupted file if the file is normally only consulted at startup.",
      "The severity of the attack hinges on how the application responds to the corrupted file. If the application detects the corruption and locks down, this may result in the denial of services provided by the application. If the application fails to detect the corruption, the result could be a more severe denial of service (crash or hang) or even an exploitable buffer overflow. If the application detects the corruption but fails in an unsafe way, this attack could result in the continuation of services but without certain security structures, such as filters or access controls. For example, if the corrupted file configures filters, an unsafe response from an application could result in simply disabling the filtering mechanisms due to the lack of usable configuration data."
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "264": {
    "name": "DEPRECATED: Environment Variable Manipulation",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-13 : Subverting Environment Variable Values\". Please refer to this other CAPEC going forward."
  },
  "265": {
    "name": "DEPRECATED: Global variable manipulation",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-77 : Manipulating User-Controlled Variables\". Please refer to this other CAPEC going forward."
  },
  "266": {
    "name": "DEPRECATED: Manipulate Canonicalization",
    "description": "This attack pattern has been deprecated."
  },
  "267": {
    "name": "Leverage Alternate Encoding",
    "description": "An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "153"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads using a variety of different types of encodings to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Try to use different encodings of content in order to bypass validation routines."
        ]
      }
    ],
    "prerequisites": [
      "The application's decoder accepts and interprets encoded characters. Data canonicalization, input filtering and validating is not done properly leaving the door open to harmful characters for the target host."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can inject different representation of a filtered character in a different encoding."
      },
      {
        "level": "Medium",
        "details": "An adversary may craft subtle encoding of input data by using the knowledge that they have gathered about the target host."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "173",
      "172",
      "180",
      "181",
      "73",
      "74",
      "20",
      "697",
      "692"
    ],
    "mitreAttack": [
      "T1027"
    ]
  },
  "268": {
    "name": "Audit Log Manipulation",
    "description": "The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "161"
      }
    ],
    "prerequisites": [
      "The target host is logging the action and data of the user.",
      "The target host insufficiently protects access to the logs or logging mechanisms."
    ],
    "relatedWeaknesses": [
      "117"
    ],
    "mitreAttack": [
      "T1070",
      "T1562.002",
      "T1562.003",
      "T1562.008"
    ]
  },
  "269": {
    "name": "DEPRECATED: Registry Manipulation",
    "description": "This pattern has been deprecated as it was determined to be a duplicate of another pattern. Please refer to the pattern CAPEC-203 : Manipulate Application Registry Values going forward."
  },
  "27": {
    "name": "Leveraging Race Conditions via Symbolic Links",
    "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "29"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Verify that target host's platform supports symbolic links.] This attack pattern is only applicable on platforms that support symbolic links.",
        "techniques": [
          "Research target platform to determine whether it supports symbolic links.",
          "Create a symbolic link and ensure that it works as expected on the given platform."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Examine application's file I/O behavior] Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.",
        "techniques": [
          "Use kernel tracing utility such as ktrace to monitor application behavior.",
          "Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls",
          "Watch temporary directories to see when temporary files are created, modified and deleted.",
          "Analyze source code for open-source systems like Linux, Apache, etc."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Verify ability to write to filesystem] The attacker verifies ability to write to the target host's file system.",
        "techniques": [
          "Create a file that does not exist in the target directory (e.g. \"touch temp.txt\" in UNIX-like systems)",
          "On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.",
          "Verify permissions on target directory"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Replace file with a symlink to a sensitive system file.] Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.",
        "techniques": [
          "Create an infinite loop containing commands such as \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.",
          "Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it."
        ]
      }
    ],
    "prerequisites": [
      "The attacker is able to create Symlink links on the target host.",
      "Tainted data from the attacker is used and copied to temporary files.",
      "The target host does insecure temporary file creation."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them)."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "367",
      "61",
      "662",
      "689",
      "667"
    ]
  },
  "270": {
    "name": "Modification of Registry Run Keys",
    "description": "An adversary adds a new entry to the \"run keys\" in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "203"
      },
      {
        "nature": "CanPrecede",
        "capecId": "568"
      },
      {
        "nature": "CanPrecede",
        "capecId": "529"
      },
      {
        "nature": "CanPrecede",
        "capecId": "646"
      },
      {
        "nature": "CanFollow",
        "capecId": "555"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target system] The adversary must first determine the system they wish to target. This attack only works on Windows.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the Windows registry.",
        "techniques": [
          "Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.",
          "Gain remote access to a system through a variety of means."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Modify Windows registry] The adversary will modify the Windows registry by adding a new entry to the \"run keys\" referencing a desired program. This program will be run whenever the user logs in.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data",
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "15"
    ],
    "mitreAttack": [
      "T1547.001",
      "T1547.014"
    ]
  },
  "271": {
    "name": "Schema Poisoning",
    "description": "An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "176"
      },
      {
        "nature": "CanFollow",
        "capecId": "94"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find target application and schema] The adversary first finds the application that they want to target. This application must use schemas in some way, so the adversary also needs to confirm that schemas are being used.",
        "techniques": [
          "Gain access to the system that the application is on and look for a schema.",
          "Observe HTTP traffic to the application and look for a schema being transmitted."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Gain access to schema] The adversary gains access to the schema so that they can modify the contents.",
        "techniques": [
          "For a local scenario, the adversary needs access to the machine that the schema is located on and gain permissions to alter the contents of the schema file.",
          "For a remote scenario, the adversary needs to be able to perform an adversary in the middle attack on the HTTP traffic that contains a schema."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Poison schema] Once the adversary gains access to the schema, they will alter it to achieve a desired effect. Locally, they can just modify the file. For remote schemas, the adversary will alter the schema in transit by performing an adversary in the middle attack.",
        "techniques": [
          "Cause a denial of service by modifying the schema so that it does not contain required information for subsequent processing.",
          "Manipulation of the data types described in the schema may affect the results of calculations. For example, a float field could be changed to an int field.",
          "Change the encoding defined in the schema for certain fields allowing the contents to bypass filters that scan for dangerous strings. For example, the modified schema might use a URL encoding instead of ASCII, and a filter that catches a semicolon (;) might fail to detect its URL encoding (%3B)."
        ]
      }
    ],
    "prerequisites": [
      "Some level of access to modify the target schema.",
      "The schema used by the target application must be improperly secured against unauthorized modification and manipulation."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "15"
    ]
  },
  "272": {
    "name": "Protocol Manipulation",
    "description": "An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The protocol or implementations thereof must contain bugs that an adversary can exploit."
    ]
  },
  "273": {
    "name": "HTTP Response Smuggling",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "220"
      },
      {
        "nature": "PeerOf",
        "capecId": "33"
      },
      {
        "nature": "CanPrecede",
        "capecId": "115"
      },
      {
        "nature": "CanPrecede",
        "capecId": "141"
      },
      {
        "nature": "CanPrecede",
        "capecId": "63"
      },
      {
        "nature": "CanPrecede",
        "capecId": "593"
      },
      {
        "nature": "CanPrecede",
        "capecId": "148"
      },
      {
        "nature": "CanPrecede",
        "capecId": "154"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
        "techniques": [
          "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
        ]
      },
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure to intended targets in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause differential HTTP responses by experimenting with identified HTTP Response vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP response. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
        "techniques": [
          "Continue the monitoring of HTTP traffic.",
          "\n                  \n                  \n                  \n               ",
          "\n                  \n                  \n               ",
          "Monitor HTTP traffic using a tool such as a Network Protocol Analyzer."
        ]
      },
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Perform HTTP Response Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
        "techniques": [
          "Leverage techniques identified in the Experiment Phase."
        ]
      }
    ],
    "prerequisites": [
      "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
      "Differences in the way the two HTTP agents parse and interpret HTTP responses and its headers.",
      "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
      },
      {
        "level": "Medium",
        "details": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
      },
      {
        "level": "Medium",
        "details": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "74",
      "436",
      "444"
    ]
  },
  "274": {
    "name": "HTTP Verb Tampering",
    "description": "An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "220"
      }
    ],
    "prerequisites": [
      "The targeted system must attempt to filter access based on the HTTP verb used in requests."
    ],
    "relatedWeaknesses": [
      "302",
      "654"
    ]
  },
  "275": {
    "name": "DNS Rebinding",
    "description": "An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "194"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify potential DNS rebinding targets] An adversary publishes content on their own server with their own name and DNS server. Attract HTTP traffic and explore rebinding vulnerabilities in browsers, flash players of old version.",
        "techniques": [
          "Adversary uses Web advertisements to attract the victim to access adversary's DNS. Explore the versions of web browser or flash players in HTTP request."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Establish initial target access to adversary DNS] The first time the target accesses the adversary's content, the adversary's name must be resolved to an IP address. The adversary's DNS server performs this resolution, providing a short Time-To-Live (TTL) in order to prevent the target from caching the value.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Rebind DNS resolution to target address] The target makes a subsequent request to the adversary's content and the adversary's DNS server must again be queried, but this time the DNS server returns an address internal to the target's organization that would not be accessible from an outside source.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Determine exploitability of DNS rebinding access to target address] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the named internal addresses.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Access \u0026 exfiltrate data within the victim's security zone] The adversary can then use scripts in the content the target retrieved from the adversary in the original message to exfiltrate data from the internal addresses. This allows adversaries to discover sensitive information about the internal network of an enterprise.",
        "techniques": [
          "Adversary attempts to use victim's browser as an HTTP proxy to other resources inside the target's security zone. This allows two IP addresses placed in the same security zone.",
          "Adversary tries to scan and access all internal hosts in victim's local network by sending multiple short-lived IP addresses."
        ]
      }
    ],
    "prerequisites": [
      "The target browser must access content server from the adversary controlled DNS name. Web advertisements are often used for this purpose. The target browser must honor the TTL value returned by the adversary and re-resolve the adversary's DNS name after initial contact."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Setup DNS server and the adversary's web server. Write a malicious script to allow the victim to connect to the web server."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "350"
    ]
  },
  "276": {
    "name": "Inter-component Protocol Manipulation",
    "description": "Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "272"
      }
    ],
    "relatedWeaknesses": [
      "707"
    ]
  },
  "277": {
    "name": "Data Interchange Protocol Manipulation",
    "description": "Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "272"
      }
    ],
    "relatedWeaknesses": [
      "707"
    ]
  },
  "278": {
    "name": "Web Services Protocol Manipulation",
    "description": "An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "272"
      }
    ],
    "prerequisites": [
      "The targeted application or service must rely on web service protocols in such a way that malicious manipulation of them can alter functionality."
    ],
    "relatedWeaknesses": [
      "707"
    ]
  },
  "279": {
    "name": "SOAP Manipulation",
    "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "278"
      },
      {
        "nature": "CanPrecede",
        "capecId": "110"
      },
      {
        "nature": "CanPrecede",
        "capecId": "228"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Find target application] The adversary needs to identify an application that uses SOAP as a communication protocol.",
        "techniques": [
          "Observe HTTP traffic to an application and look for SOAP headers."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Detect Incorrect SOAP Parameter Handling] The adversary tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.",
        "techniques": [
          "Send more data than would seem reasonable for a field and see if the server complains.",
          "Send nonsense data in a field that expects a certain subset, such as product names or sequence numbers, and see if the server complains.",
          "Send XML metacharacters as data and see how the server responds."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Manipulate SOAP parameters] The adversary manipulates SOAP parameters in a way that causes undesirable behavior for the server. This can result in denial of service, information disclosure, arbitrary code exection, and more.",
        "techniques": [
          "Create a recursive XML payload that will take up all of the memory on the server when parsed, resulting in a denial of service. This is known as the billion laughs attack.",
          "Insert XML metacharacters into data fields that could cause the server to go into an error state when parsing. This could lead to a denial of service.",
          "Insert a large amount of data into a field that should have a character limit, causing a buffer overflow."
        ]
      }
    ],
    "prerequisites": [
      "An application uses SOAP-based web service api.",
      "An application does not perform sufficient input validation to ensure that user-controllable data is safe for an XML parser.",
      "The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "707"
    ]
  },
  "28": {
    "name": "Fuzzing",
    "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Observe communication and inputs] The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.",
        "techniques": [
          "Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.",
          "Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.",
          "Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Generate fuzzed inputs] Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.",
        "techniques": [
          "Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).",
          "Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Observe the outcome] Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Craft exploit payloads] Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.",
        "techniques": [
          "Identify and embed shell code for the target system.",
          "Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)",
          "Induce denial of service by exploiting resource leaks or bad error handling."
        ]
      }
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "There is a wide variety of fuzzing tools available."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      }
    ],
    "relatedWeaknesses": [
      "74",
      "20"
    ]
  },
  "280": {
    "name": "DEPRECATED: SOAP Parameter Tampering",
    "description": "This attack pattern has been deprecated as its contents have been included in CAPEC-279 : SOAP Manipulation. Please refer to this other pattern going forward."
  },
  "285": {
    "name": "ICMP Echo Request Ping",
    "description": "An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The ability to send an ICMP type 8 query (Echo Request) to a remote target and receive an ICMP type 0 message (ICMP Echo Reply) in response. Any firewalls or access control lists between the sender and receiver must allow ICMP Type 8 and ICMP Type 0 messages in order for a ping operation to succeed."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary needs to know certain linux commands for this type of attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "287": {
    "name": "TCP SYN Scan",
    "description": "An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends SYN packets to ports they want to scan and checks the response without completing the TCP handshake.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. The adversary can determine the state of a port based on the following responses. When a SYN is sent to an open port and unfiltered port, a SYN/ACK will be generated. When a SYN packet is sent to a closed port a RST is generated, indicating the port is closed. When SYN scanning to a particular port generates no response, or when the request triggers ICMP Type 3 unreachable errors, the port is filtered.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "This scan type is not possible with some operating systems (Windows XP SP 2). On Linux and Unix systems it requires root privileges to use raw sockets."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "288": {
    "name": "DEPRECATED: ICMP Echo Request Ping",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-285\". Please refer to this other CAPEC going forward.",
    "typicalSeverity": "Low"
  },
  "289": {
    "name": "DEPRECATED: Infrastructure-based footprinting",
    "description": "This attack pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the meta level pattern CAPEC-169 : going forward, or to any of its children patterns."
  },
  "29": {
    "name": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
    "description": "This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "26"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The adversary explores to gauge what level of access they have.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The adversary confirms access to a resource on the target host. The adversary confirms ability to modify the targeted resource.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "The adversary decides to leverage the race condition by \"running the race\", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary can replace the resource and cause an escalation of privilege.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A resource is access/modified concurrently by multiple processes.",
      "The adversary is able to modify resource.",
      "A race condition exists while accessing a resource."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "This attack can get sophisticated since the attack has to occur within a short interval of time."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "367",
      "368",
      "366",
      "370",
      "362",
      "662",
      "691",
      "663",
      "665"
    ]
  },
  "290": {
    "name": "Enumerate Mail Exchange (MX) Records",
    "description": "An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "309"
      }
    ],
    "prerequisites": [
      "The adversary requires access to a DNS server that will return the MX records for a network."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "291": {
    "name": "DNS Zone Transfers",
    "description": "An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "309"
      }
    ],
    "prerequisites": [
      "Access to a DNS server that allows Zone transfers."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "292": {
    "name": "Host Discovery",
    "description": "An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary requires logical access to the target network in order to carry out host discovery."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1018"
    ]
  },
  "293": {
    "name": "Traceroute Route Enumeration",
    "description": "An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "309"
      }
    ],
    "prerequisites": [
      "A network capable of routing the attackers' packets to the destination network."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "294": {
    "name": "ICMP Address Mask Request",
    "description": "An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, \"Internet Standard Subnetting Procedure.\" An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The ability to send an ICMP type 17 query (Address Mask Request) to a remote target and receive an ICMP type 18 message (ICMP Address Mask Reply) in response. Generally, modern operating systems will ignore ICMP type 17 messages, however, routers will commonly respond to this request."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "295": {
    "name": "Timestamp Request",
    "description": "This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The ability to send a timestamp request to a remote target and receive a response."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1124"
    ]
  },
  "296": {
    "name": "ICMP Information Request",
    "description": "An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The ability to send an ICMP Type 15 Information Request and receive an ICMP Type 16 Information Reply in response."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary needs to know certain linux commands for this type of attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "297": {
    "name": "TCP ACK Ping",
    "description": "An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The ability to send an ACK packet to a remote host and identify the response. Creating the ACK packet without building a full connection requires the use of raw sockets. As a result, it is not possible to send a TCP ACK ping from some systems (Windows XP SP 2) without the use of third-party packet drivers like Winpcap. On other systems (BSD, Linux) administrative privileges are required in order to write to the raw socket.",
      "The target must employ a stateless firewall that lacks a rule set that rejects unsolicited ACK packets.",
      "The adversary requires the ability to craft custom TCP ACK segments for use during network reconnaissance. Sending an ACK ping requires the ability to access \"raw sockets\" in order to create the packets with direct access to the packet header."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "298": {
    "name": "UDP Ping",
    "description": "An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The adversary requires the ability to send a UDP datagram to a remote host and receive a response.",
      "The adversary requires the ability to craft custom UDP Packets for use during network reconnaissance.",
      "The target's firewall must not be configured to block egress ICMP messages."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "299": {
    "name": "TCP SYN Ping",
    "description": "An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN \"synchronize\" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST \"reset\" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The ability to send a TCP SYN packet to a remote target. Depending upon the operating system, the ability to craft SYN packets may require elevated privileges."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary needs to know how to craft and send protocol commands from the command line or within a tool."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "3": {
    "name": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
    "description": "Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading \"ghost\" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various leading 'Ghost' character sequences to determine how to application filters them.",
        "techniques": [
          "Add additional characters to common sequences such as \"../\" to see how the application will filter them.",
          "Try repeating special characters (?, @, #, *, etc.) at the beginning of user input to see how the application filters these out."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Bypass input filtering] Using what the adversary learned about how the application filters input data, they craft specific input data that bypasses the filter. This can lead to directory traversal attacks, arbitrary shell command execution, corruption of files, etc.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted API must ignore the leading ghost characters that are used to get past the filters for the semantics to be the same."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The ability to make an API request, and knowledge of \"ghost\" characters that will not be filtered by any input validation. These \"ghost\" characters must be known to not affect the way in which the request will be interpreted."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "173",
      "41",
      "172",
      "179",
      "180",
      "181",
      "183",
      "184",
      "20",
      "74",
      "697",
      "707"
    ]
  },
  "30": {
    "name": "Hijacking a Privileged Thread of Execution",
    "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "233"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target thread] The adversary determines the underlying system thread that is subject to user-control",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Gain handle to thread] The adversary then gains a handle to a process thread.",
        "techniques": [
          "Use the \"OpenThread\" API call in Windows on a known thread.",
          "Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Alter process memory] Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.",
        "techniques": [
          "On Windows, use \"SuspendThread\" followed by \"VirtualAllocEx\", \"WriteProcessMemory\", and \"SetThreadContext\"."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Resume thread execution] Once the process memory has been altered to execute malicious code, the thread is then resumed.",
        "techniques": [
          "On Windows, use \"ResumeThread\"."
        ]
      }
    ],
    "prerequisites": [
      "The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users",
      "In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "270"
    ],
    "mitreAttack": [
      "T1055.003"
    ]
  },
  "300": {
    "name": "Port Scanning",
    "description": "An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary requires logical access to the target's network in order to carry out this type of attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1046"
    ]
  },
  "301": {
    "name": "TCP Connect Scan",
    "description": "An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary attempts to initialize a TCP connection with with the target port.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the result of their TCP connection to determine the state of the target port. A successful connection indicates a port is open with a service listening on it while a failed connection indicates the port is not open.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary requires logical access to the target network. The TCP connect Scan requires the ability to connect to an available port and complete a 'three-way-handshake' This scanning technique does not require any special privileges in order to perform. This type of scan works against all TCP/IP stack implementations."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "302": {
    "name": "TCP FIN Scan",
    "description": "An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends TCP packets with the FIN flag but not associated with an existing connection to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "FIN scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "303": {
    "name": "TCP Xmas Scan",
    "description": "An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends TCP packets with all flags set but not associated with an existing connection to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary needs logical access to the target network. XMAS scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "304": {
    "name": "TCP Null Scan",
    "description": "An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends TCP packets with no flags set and that are not associated with an existing connection to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. If no response is received the port is open. If a RST packet is received then the port is closed.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary requires logical access to the target network. NULL scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "305": {
    "name": "TCP ACK Scan",
    "description": "An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. If a RST packet is received the target port is either closed or the ACK was sent out-of-sync. If no response is received, the target is likely using a stateful firewall.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary requires logical access to the target network. ACK scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "306": {
    "name": "TCP Window Scan",
    "description": "An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends TCP packets with the ACK flag set and that are not associated with an existing connection to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. Specifically, the adversary views the TCP window size from the returned RST packet if one was received. Depending on the target operating system, a positive window size may indicate an open port while a negative window size may indicate a closed port.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "TCP Window scanning requires the use of raw sockets, and thus cannot be performed from some Windows systems (Windows XP SP 2, for example). On Unix and Linux, raw socket manipulations require root privileges."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "307": {
    "name": "TCP RPC Scan",
    "description": "An adversary scans for RPC services listing on a Unix/Linux host.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends RCP packets to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine which, if any, RPC service is running on that port. Responses will vary based on which RPC service is running.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "RPC scanning requires no special privileges when it is performed via a native system utility."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "308": {
    "name": "UDP Scan",
    "description": "An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "300"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "An adversary sends UDP packets to target ports.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary uses the response from the target to determine the port's state. Whether a port responds to a UDP packet is dependant on what application is listening on that port. No response does not indicate the port is not open.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The ability to send UDP datagrams to a host and receive ICMP error messages from that host. In cases where particular types of ICMP messaging is disallowed, the reliability of UDP scanning drops off sharply."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "309": {
    "name": "Network Topology Mapping",
    "description": "An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      },
      {
        "nature": "CanPrecede",
        "capecId": "664"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1016",
      "T1049",
      "T1590"
    ]
  },
  "31": {
    "name": "Accessing/Intercepting/Modifying HTTP Cookies",
    "description": "This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "39"
      },
      {
        "nature": "ChildOf",
        "capecId": "157"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Obtain copy of cookie] The adversary first needs to obtain a copy of the cookie. The adversary may be a legitimate end user wanting to escalate privilege, or could be somebody sniffing on a network to get a copy of HTTP cookies.",
        "techniques": [
          "Sniff cookie using a network sniffer such as Wireshark",
          "Obtain cookie using a utility such as the Firefox Cookie Manager, Chrome DevTools or AnEC Cookie Editor.",
          "Steal cookie via a cross-site scripting attack.",
          "Guess cookie contents if it contains predictable information."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Obtain sensitive information from cookie] The adversary may be able to get sensitive information from the cookie. The web application developers may have assumed that cookies are not accessible by end users, and thus, may have put potentially sensitive information in them.",
        "techniques": [
          "If cookie shows any signs of being encoded using a standard scheme such as base64, decode it.",
          "Analyze the cookie's contents to determine whether it contains any sensitive information."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Modify cookie to subvert security controls.] The adversary may be able to modify or replace cookies to bypass security controls in the application.",
        "techniques": [
          "Modify logical parts of cookie and send it back to server to observe the effects.",
          "Modify numeric parts of cookie arithmetically and send it back to server to observe the effects.",
          "Modify cookie bitwise and send it back to server to observe the effects.",
          "Replace cookie with an older legitimate cookie and send it back to server to observe the effects. This technique would be helpful in cases where the cookie contains a \"points balance\" for a given user where the points have some value. The user may spend their points and then replace their cookie with an older one to restore their balance."
        ]
      }
    ],
    "prerequisites": [
      "Target server software must be a HTTP daemon that relies on cookies.",
      "The cookies must contain sensitive information.",
      "The adversary must be able to make HTTP requests to the server, and the cookie must be contained in the reply."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To overwrite session cookie data, and submit targeted attacks via HTTP"
      },
      {
        "level": "High",
        "details": "Exploiting a remote buffer overflow generated by attack"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "565",
      "302",
      "311",
      "113",
      "539",
      "20",
      "315",
      "384",
      "472",
      "602",
      "642"
    ],
    "mitreAttack": [
      "T1539"
    ]
  },
  "310": {
    "name": "Scanning for Vulnerable Software",
    "description": "An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "541"
      }
    ],
    "prerequisites": [
      "Access to the network on which the targeted system resides.",
      "Software tools used to probe systems over a range of ports and protocols."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To probe a system remotely without detection requires careful planning and patience."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "311": {
    "name": "DEPRECATED: OS Fingerprinting",
    "description": "This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level patterns CAPEC-312 : Active OS Fingerprinting or CAPEC-313 : Passive OS Fingerprinting going forward, or to any of the detailed patterns that are children of them."
  },
  "312": {
    "name": "Active OS Fingerprinting",
    "description": "An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "224"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1082"
    ]
  },
  "313": {
    "name": "Passive OS Fingerprinting",
    "description": "An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "224"
      }
    ],
    "prerequisites": [
      "The ability to monitor network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1082"
    ]
  },
  "314": {
    "name": "DEPRECATED: IP Fingerprinting Probes",
    "description": "This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312."
  },
  "315": {
    "name": "DEPRECATED: TCP/IP Fingerprinting Probes",
    "description": "This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312."
  },
  "316": {
    "name": "DEPRECATED: ICMP Fingerprinting Probes",
    "description": "This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312."
  },
  "317": {
    "name": "IP ID Sequencing Probe",
    "description": "This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "318": {
    "name": "IP 'ID' Echoed Byte-Order Probe",
    "description": "This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "319": {
    "name": "IP (DF) 'Don't Fragment Bit' Echoing Probe",
    "description": "This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "32": {
    "name": "XSS Through HTTP Query Strings",
    "description": "An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.",
        "techniques": [
          "Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe public links for XSS vulnerability] The adversary uses the public links gathered in the \"Explore\" phase as a target list and requests variations on the URLs they spidered before. They send parameters that include variations of payloads. They record all the responses from the server that include unmodified versions of their script.",
        "techniques": [
          "Use a list of XSS probe strings to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter to include a malicious script tag.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "Target client software must allow scripting such as JavaScript. Server software must allow display of remote generated HTML without sufficient input or output validation."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To place malicious payload on server via HTTP"
      },
      {
        "level": "High",
        "details": "Exploiting any information gathered by HTTP Query on script host"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "80"
    ]
  },
  "320": {
    "name": "TCP Timestamp Probe",
    "description": "This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine if timestamps are present.] The adversary sends a probe packet to the remote host to identify if timestamps are present.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Record and analyze timestamp values.] If the remote host is using timestamp, obtain several timestamps, analyze them and compare them to known values.",
        "techniques": [
          "The adversary sends several requests and records the timestamp values.",
          "The adversary analyzes the timestamp values and determines an average increments per second in the timestamps for the target.",
          "The adversary compares this result to a database of known TCP timestamp increments for a possible match."
        ]
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card.The target OS must support the TCP timestamp option in order to obtain a fingerprint."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "321": {
    "name": "TCP Sequence Number Probe",
    "description": "This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "322": {
    "name": "TCP (ISN) Greatest Common Divisor Probe",
    "description": "This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "323": {
    "name": "TCP (ISN) Counter Rate Probe",
    "description": "This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "324": {
    "name": "TCP (ISN) Sequence Predictability Probe",
    "description": "This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "325": {
    "name": "TCP Congestion Control Flag (ECN) Probe",
    "description": "This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "326": {
    "name": "TCP Initial Window Size Probe",
    "description": "This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the \"connected\" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "327": {
    "name": "TCP Options Probe",
    "description": "This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "328": {
    "name": "TCP 'RST' Flag Checksum Probe",
    "description": "This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "329": {
    "name": "ICMP Error Message Quoting Probe",
    "description": "An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or \"Quoted\" from the originating request that generated the ICMP error message.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "33": {
    "name": "HTTP Request Smuggling",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "220"
      },
      {
        "nature": "PeerOf",
        "capecId": "273"
      },
      {
        "nature": "CanPrecede",
        "capecId": "115"
      },
      {
        "nature": "CanPrecede",
        "capecId": "141"
      },
      {
        "nature": "CanPrecede",
        "capecId": "63"
      },
      {
        "nature": "CanPrecede",
        "capecId": "593"
      },
      {
        "nature": "CanPrecede",
        "capecId": "148"
      },
      {
        "nature": "CanPrecede",
        "capecId": "154"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.",
        "techniques": [
          "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
        ]
      },
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
        "techniques": [
          "Continue the monitoring of HTTP traffic.",
          "\n                  \n                  \n                  \n               ",
          "\n                  \n                  \n               ",
          "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
        ]
      },
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Perform HTTP Request Smuggling attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
        "techniques": [
          "Leverage techniques identified in the Experiment Phase."
        ]
      }
    ],
    "prerequisites": [
      "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
      "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
      "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
      },
      {
        "level": "Medium",
        "details": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
      },
      {
        "level": "Medium",
        "details": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "444"
    ]
  },
  "330": {
    "name": "ICMP Error Message Echoing Integrity Probe",
    "description": "An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or \"Quoted\" from the originating request that generated the error message.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications.Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "331": {
    "name": "ICMP IP Total Length Field Probe",
    "description": "An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable\" error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "204"
    ]
  },
  "332": {
    "name": "ICMP IP 'ID' Field Error Message Probe",
    "description": "An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "312"
      }
    ],
    "prerequisites": [
      "The ability to monitor and interact with network communications. Access to at least one host, and the privileges to interface with the network interface card."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "204"
    ]
  },
  "34": {
    "name": "HTTP Response Splitting",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "220"
      },
      {
        "nature": "PeerOf",
        "capecId": "105"
      },
      {
        "nature": "CanPrecede",
        "capecId": "115"
      },
      {
        "nature": "CanPrecede",
        "capecId": "141"
      },
      {
        "nature": "CanPrecede",
        "capecId": "63"
      },
      {
        "nature": "CanPrecede",
        "capecId": "593"
      },
      {
        "nature": "CanPrecede",
        "capecId": "148"
      },
      {
        "nature": "CanPrecede",
        "capecId": "154"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey network to identify target] The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets",
        "techniques": [
          "Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer."
        ]
      },
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Identify vulnerabilities in targeted HTTP infrastructure and technologies] The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, HTTP headers, syntax checking and input filtering.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities] The adversary sends maliciously crafted HTTP request to back-end HTTP infrastructure to inject adversary data (in the form of HTTP headers with custom strings and embedded web scripts and objects) into HTTP responses (intended for intermediary and/or front-end client/victim HTTP agents communicating with back-end HTTP infrastructure) for the purpose of interfering with the parsing of HTTP responses by intermediary and front-end client/victim HTTP agents. The intended consequences of the malicious HTTP request and the subsequent adversary injection and manipulation of HTTP responses to intermediary and front-end client/victim HTTP agents, will be observed to confirm applicability of identified vulnerabilities in the adversary's plan of attack.",
        "techniques": [
          "Continue the monitoring of HTTP traffic.",
          "\n                  \n                  \n                  \n                  \n               ",
          "Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request."
        ]
      },
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Perform HTTP Response Splitting attack] Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.",
        "techniques": [
          "Leverage techniques identified in the Experiment Phase."
        ]
      }
    ],
    "prerequisites": [
      "A vulnerable or compromised server or domain/site capable of allowing adversary to insert/inject malicious content that will appear in the server's response to target HTTP agents (e.g., proxies and users' web browsers).",
      "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
      "HTTP headers capable of being user-manipulated.",
      "HTTP agents running on HTTP/1.0 or HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Detailed knowledge on HTTP protocol: request and response messages structure and usage of specific headers."
      },
      {
        "level": "Medium",
        "details": "Detailed knowledge on how specific HTTP agents receive, send, process, interpret, and parse a variety of HTTP messages and headers."
      },
      {
        "level": "Medium",
        "details": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "74",
      "113",
      "138",
      "436"
    ]
  },
  "35": {
    "name": "Leverage Executable Code in Non-Executable Files",
    "description": "An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "636"
      },
      {
        "nature": "PeerOf",
        "capecId": "23"
      },
      {
        "nature": "PeerOf",
        "capecId": "75"
      }
    ],
    "prerequisites": [
      "The attacker must have the ability to modify non-executable files consumed by the target software."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To identify and execute against an over-privileged system interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "94",
      "96",
      "95",
      "97",
      "272",
      "59",
      "282",
      "270"
    ],
    "mitreAttack": [
      "T1027.006",
      "T1027.009",
      "T1564.009"
    ]
  },
  "36": {
    "name": "Using Unpublished Interfaces or Functionality",
    "description": "An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "113"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify services] Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.",
        "techniques": [
          "Search via internet for known, published services.",
          "Use automated tools to scan known ports to identify internet-enabled services.",
          "Dump the code from the chip and then perform reverse engineering to analyze the code."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Authenticate to service] Authenticate to the service, if required, in order to explore it.",
        "techniques": [
          "Use published credentials to access system.",
          "Find unpublished credentials to access service.",
          "Use other attack pattern or weakness to bypass authentication."
        ]
      },
      {
        "step": "3",
        "phase": "Explore",
        "description": "[Identify all interfaces] Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.",
        "techniques": [
          "For any published services, determine exposed interfaces via the documentation provided.",
          "For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones."
        ]
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Attempt to discover unpublished functions] Using manual or automated means, discover unpublished or undocumented functions exposed by the service.",
        "techniques": [
          "Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.",
          "Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features."
        ]
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Exploit unpublished functions] Using information determined via experimentation, exploit the unpublished features of the service.",
        "techniques": [
          "Execute features that are not intended to be used by general system users.",
          "Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions."
        ]
      }
    ],
    "prerequisites": [
      "The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "306",
      "693",
      "695",
      "1242"
    ]
  },
  "37": {
    "name": "Retrieve Embedded Sensitive Data",
    "description": "An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "167"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify Target] Attacker identifies client components to extract information from. These may be binary executables, class files, shared libraries (e.g., DLLs), configuration files, or other system files.",
        "techniques": [
          "Binary file extraction. The attacker extracts binary files from zips, jars, wars, PDFs or other composite formats.",
          "Package listing. The attacker uses a package manifest provided with the software installer, or the filesystem itself, to identify component files suitable for attack."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Retrieve Embedded Data] The attacker then uses a variety of techniques, such as sniffing, reverse-engineering, and cryptanalysis to retrieve the information of interest.",
        "techniques": [
          "API Profiling. The attacker monitors the software's use of registry keys or other operating system-provided storage locations that can contain sensitive information.",
          "Execution in simulator. The attacker physically removes mass storage from the system and explores it using a simulator, external system, or other debugging harness.",
          "Common decoding methods. The attacker applies methods to decode such encodings and compressions as Base64, unzip, unrar, RLE decoding, gzip decompression and so on.",
          "Common data typing. The attacker looks for common file signatures for well-known file types (JPEG, TIFF, ASN.1, LDIF, etc.). If the signatures match, they attempt decoding in that format."
        ]
      }
    ],
    "prerequisites": [
      "In order to feasibly execute this type of attack, some valuable data must be present in client software.",
      "Additionally, this information must be unprotected, or protected in a flawed fashion, or through a mechanism that fails to resist reverse engineering, statistical, or other attack."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker must possess knowledge of client code structure as well as ability to reverse-engineer or decompile it or probe it in other ways. This knowledge is specific to the technology and language used for the client distribution"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "226",
      "311",
      "525",
      "312",
      "314",
      "315",
      "318",
      "1239",
      "1258",
      "1266",
      "1272",
      "1278",
      "1301",
      "1330"
    ],
    "mitreAttack": [
      "T1005",
      "T1552.004"
    ]
  },
  "38": {
    "name": "Leveraging/Manipulating Configuration File Search Paths",
    "description": "This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "159"
      }
    ],
    "prerequisites": [
      "The attacker must be able to write to redirect search paths on the victim host."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To identify and execute against an over-privileged system interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "426",
      "427"
    ],
    "mitreAttack": [
      "T1574.007",
      "T1574.009"
    ]
  },
  "383": {
    "name": "Harvesting Information via API Event Monitoring",
    "description": "An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a \"virtual sale\" of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "407"
      },
      {
        "nature": "CanPrecede",
        "capecId": "94"
      }
    ],
    "prerequisites": [
      "The target software is utilizing application framework APIs"
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "311",
      "319",
      "419",
      "602"
    ],
    "mitreAttack": [
      "T1056.004"
    ]
  },
  "384": {
    "name": "Application API Message Manipulation via Man-in-the-Middle",
    "description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true \"Adversary-in-the-Middle\" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "94"
      }
    ],
    "prerequisites": [
      "Targeted software is utilizing application framework APIs"
    ],
    "relatedWeaknesses": [
      "471",
      "345",
      "346",
      "602",
      "311"
    ]
  },
  "385": {
    "name": "Transaction or Event Tampering via Application API Manipulation",
    "description": "An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "384"
      }
    ],
    "prerequisites": [
      "Targeted software is utilizing application framework APIs"
    ],
    "relatedWeaknesses": [
      "471",
      "345",
      "346",
      "602",
      "311"
    ]
  },
  "386": {
    "name": "Application API Navigation Remapping",
    "description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "94"
      }
    ],
    "prerequisites": [
      "Targeted software is utilizing application framework APIs"
    ],
    "relatedWeaknesses": [
      "471",
      "345",
      "346",
      "602",
      "311"
    ]
  },
  "387": {
    "name": "Navigation Remapping To Propagate Malicious Content",
    "description": "An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "386"
      }
    ],
    "prerequisites": [
      "Targeted software is utilizing application framework APIs"
    ],
    "relatedWeaknesses": [
      "471",
      "345",
      "346",
      "602",
      "311"
    ]
  },
  "388": {
    "name": "Application API Button Hijacking",
    "description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "386"
      }
    ],
    "prerequisites": [
      "Targeted software is utilizing application framework APIs"
    ],
    "relatedWeaknesses": [
      "471",
      "345",
      "346",
      "602",
      "311"
    ]
  },
  "389": {
    "name": "Content Spoofing Via Application API Manipulation",
    "description": "An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "384"
      }
    ],
    "prerequisites": [
      "Targeted software is utilizing application framework APIs"
    ],
    "relatedWeaknesses": [
      "353"
    ]
  },
  "39": {
    "name": "Manipulating Opaque Client-based Data Tokens",
    "description": "In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "22"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Enumerate information passed to client side] The attacker identifies the parameters used as part of tokens to take business or security decisions",
        "techniques": [
          "Use WebScarab to reveal hidden fields while browsing.",
          "Use a sniffer to capture packets",
          "View source of web page to find hidden fields",
          "Examine URL to see if any opaque tokens are in it",
          "Disassemble or decompile client-side application",
          "Use debugging tools such as File Monitor, Registry Monitor, Debuggers, etc."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine protection mechanism for opaque token] The attacker determines the protection mechanism used to protect the confidentiality and integrity of these data tokens. They may be obfuscated or a full blown encryption may be used.",
        "techniques": [
          "Look for signs of well-known character encodings",
          "Look for cryptographic signatures",
          "Look for delimiters or other indicators of structure"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Modify parameter/token values] Trying each parameter in turn, the attacker modifies the values",
        "techniques": [
          "Modify tokens logically",
          "Modify tokens arithmetically",
          "Modify tokens bitwise",
          "Modify structural components of tokens",
          "Modify order of parameters/tokens"
        ]
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Cycle through values for each parameter.] Depending on the nature of the application, the attacker now cycles through values of each parameter and observes the effects of this modification in the data returned by the server",
        "techniques": [
          "Use network-level packet injection tools such as netcat",
          "Use application-level data modification tools such as Tamper Data, WebScarab, TamperIE, etc.",
          "Use modified client (modified by reverse engineering)",
          "Use debugging tools to modify data in client"
        ]
      }
    ],
    "prerequisites": [
      "An attacker already has some access to the system or can steal the client based data tokens from another user who has access to the system.",
      "For an Attacker to viably execute this attack, some data (later interpreted by the application) must be held client-side in a way that can be manipulated without detection. This means that the data or tokens are not CRCd as part of their value or through a separate meta-data store elsewhere."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "If the client site token is obfuscated."
      },
      {
        "level": "High",
        "details": "If the client site token is encrypted."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "353",
      "285",
      "302",
      "472",
      "565",
      "315",
      "539",
      "384",
      "233"
    ]
  },
  "390": {
    "name": "Bypassing Physical Security",
    "description": "Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points."
  },
  "391": {
    "name": "Bypassing Physical Locks",
    "description": "An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "390"
      }
    ]
  },
  "392": {
    "name": "Lock Bumping",
    "description": "An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "391"
      }
    ]
  },
  "393": {
    "name": "Lock Picking",
    "description": "An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "391"
      }
    ]
  },
  "394": {
    "name": "Using a Snap Gun Lock to Force a Lock",
    "description": "An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "391"
      }
    ]
  },
  "395": {
    "name": "Bypassing Electronic Locks and Access Controls",
    "description": "An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "390"
      }
    ]
  },
  "396": {
    "name": "DEPRECATED: Bypassing Card or Badge-Based Systems",
    "description": "This attack pattern has been deprecated as it a generalization of CAPEC-397: Cloning Magnetic Strip Cards, CAPEC-398: Magnetic Strip Card Brute Force Attacks, CAPEC-399: Cloning RFID Cards or Chips and CAPEC-400: RFID Chip Deactivation or Destruction. Please refer to these CAPECs going forward."
  },
  "397": {
    "name": "Cloning Magnetic Strip Cards",
    "description": "An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "395"
      }
    ]
  },
  "398": {
    "name": "Magnetic Strip Card Brute Force Attacks",
    "description": "An adversary analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "395"
      }
    ],
    "prerequisites": [
      "The ability to calculate a card checksum and write out a valid checksum value. Some cards are protected by a checksum calculation, therefore it is necessary to determine what algorithm is being used to calculate the checksum and to employ that algorithm to calculate and write a new valid checksum for the card being created."
    ]
  },
  "399": {
    "name": "Cloning RFID Cards or Chips",
    "description": "An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "395"
      }
    ]
  },
  "4": {
    "name": "Using Alternative IP Address Encodings",
    "description": "This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for IP addresses as user input] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application where IP addresses are used.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts alternate IP address encodings, observing application behavior. The adversary will also attempt to access the application through an alternate IP address encoding to see if access control changes",
        "techniques": [
          "Instead of using a URL, use the IP address that the URL resolves to",
          "Specify a port directly to a URL input",
          "Omit or add \"http://\" or \"https://\" to a URL to see if the application behaves differently"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Bypass access control] Using an alternate IP address encoding, the adversary will either access the application or give the alternate encoding as input, bypassing access control restrictions.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target software must fail to anticipate all of the possible valid encodings of an IP/web address.",
      "The adversary must have the ability to communicate with the server."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary has only to try IP address format combinations."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "291",
      "173"
    ]
  },
  "40": {
    "name": "Manipulating Writeable Terminal Devices",
    "description": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify attacker-writable terminals] Determine if users TTYs are writable by the attacker.",
        "techniques": [
          "Determine the permissions for the TTYs found on the system. Any that allow user write to the TTY may be vulnerable.",
          "Attempt to write to other user TTYs. This approach could leave a trail or alert a user."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Execute malicious commands] Using one or more vulnerable TTY, execute commands to achieve various impacts.",
        "techniques": [
          "Commands that allow reading or writing end user files can be executed."
        ]
      }
    ],
    "prerequisites": [
      "User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Ability to discover permissions on terminal devices. Of course, brute force can also be used."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "77"
    ]
  },
  "400": {
    "name": "RFID Chip Deactivation or Destruction",
    "description": "An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "395"
      }
    ]
  },
  "401": {
    "name": "Physically Hacking Hardware",
    "description": "An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "440"
      }
    ],
    "relatedWeaknesses": [
      "1263"
    ]
  },
  "402": {
    "name": "Bypassing ATA Password Security",
    "description": "An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "401"
      }
    ],
    "prerequisites": [
      "Access to the system containing the ATA Drive so that the drive can be physically removed from the system."
    ],
    "relatedWeaknesses": [
      "285"
    ]
  },
  "404": {
    "name": "DEPRECATED: Social Information Gathering Attacks",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information."
  },
  "405": {
    "name": "DEPRECATED: Social Information Gathering via Research",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information."
  },
  "406": {
    "name": "Dumpster Diving",
    "description": "An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more, including hardware devices. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      },
      {
        "nature": "CanPrecede",
        "capecId": "163"
      },
      {
        "nature": "CanPrecede",
        "capecId": "675"
      }
    ],
    "prerequisites": [
      "An adversary must have physical access to the dumpster or downstream processing facility."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "407": {
    "name": "Pretexting",
    "description": "An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "416"
      },
      {
        "nature": "ChildOf",
        "capecId": "410"
      },
      {
        "nature": "CanPrecede",
        "capecId": "163"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the pretext that would influence the actions of the specific target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "mitreAttack": [
      "T1589"
    ]
  },
  "408": {
    "name": "DEPRECATED: Information Gathering from Traditional Sources",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information."
  },
  "409": {
    "name": "DEPRECATED: Information Gathering from Non-Traditional Sources",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information."
  },
  "41": {
    "name": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
    "description": "This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "242"
      },
      {
        "nature": "ChildOf",
        "capecId": "134"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Identify and characterize metacharacter-processing vulnerabilities in email headers] An attacker creates emails with headers containing various metacharacter-based malicious payloads in order to determine whether the target application processes the malicious content and in what manner it does so.",
        "techniques": [
          "Use an automated tool (fuzzer) to create malicious emails headers containing metacharacter-based payloads.",
          "Manually tampering email headers to inject malicious metacharacter-based payload content in them."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "An attacker leverages vulnerabilities identified during the Experiment Phase to inject malicious email headers and cause the targeted email application to exhibit behavior outside of its expected constraints.",
        "techniques": [
          "Send emails with specifically-constructed, metacharacter-based malicious payloads in the email headers to targeted systems running email processing applications identified as vulnerable during the Experiment Phase."
        ]
      }
    ],
    "prerequisites": [
      "This attack targets most widely deployed feature rich email applications, including web based email programs."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To distribute email"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "150",
      "88",
      "697"
    ]
  },
  "410": {
    "name": "Information Elicitation",
    "description": "An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.",
    "typicalSeverity": "Low"
  },
  "411": {
    "name": "DEPRECATED: Pretexting",
    "description": "This attack pattern has been deprecated as it is a duplicate of the existing attack pattern \"CAPEC-407 : Social Information Gathering via Pretexting\". Please refer to this other CAPEC going forward."
  },
  "412": {
    "name": "Pretexting via Customer Service",
    "description": "An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "407"
      }
    ]
  },
  "413": {
    "name": "Pretexting via Tech Support",
    "description": "An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "407"
      }
    ]
  },
  "414": {
    "name": "Pretexting via Delivery Person",
    "description": "An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and \"deliveries\" in order to be able to pull it off.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "407"
      }
    ]
  },
  "415": {
    "name": "Pretexting via Phone",
    "description": "An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "407"
      }
    ]
  },
  "416": {
    "name": "Manipulate Human Behavior",
    "description": "An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "417": {
    "name": "Influence Perception",
    "description": "The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "416"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "418": {
    "name": "Influence Perception of Reciprocation",
    "description": "An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "417"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "419": {
    "name": "DEPRECATED: Target Influence via Perception of Concession",
    "description": "This attack pattern has been deprecated as it was deemed not to be a legitimate pattern."
  },
  "42": {
    "name": "MIME Conversion",
    "description": "An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target mail server] The adversary identifies a target mail server that they wish to attack.",
        "techniques": [
          "Use Nmap on a system to identify a mail server service."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine viability of attack] Determine whether the mail server is unpatched and is potentially vulnerable to one of the known MIME conversion buffer overflows (e.g. Sendmail 8.8.3 and 8.8.4).",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Find injection vector] Identify places in the system where vulnerable MIME conversion routines may be used.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts e-mail messages with special headers that will cause a buffer overflow for the vulnerable MIME conversion routine. The intent of this attack is to leverage the overflow for execution of arbitrary code and gain access to the mail server machine, so the adversary will craft an email that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Send e-mail messages to the target system with specially crafted headers that trigger the buffer overflow and execute the shell code.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target system uses a mail server.",
      "Mail server vendor has not released a patch for the MIME conversion routine, the patch itself has a security hole or does not fix the original problem, or the patch has not been applied to the user's system."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "It may be trivial to cause a DoS via this attack pattern"
      },
      {
        "level": "High",
        "details": "Causing arbitrary code to execute on the target system."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "119",
      "74",
      "20"
    ]
  },
  "420": {
    "name": "Influence Perception of Scarcity",
    "description": "The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "417"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "421": {
    "name": "Influence Perception of Authority",
    "description": "An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "417"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "422": {
    "name": "Influence Perception of Commitment and Consistency",
    "description": "An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "417"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "423": {
    "name": "Influence Perception of Liking",
    "description": "The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "417"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the types of things that the target likes."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "424": {
    "name": "Influence Perception of Consensus or Social Proof",
    "description": "The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "417"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "425": {
    "name": "Target Influence via Framing",
    "description": "An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word \"No\" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "416"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "426": {
    "name": "Influence via Incentives",
    "description": "The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "416"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner.The adversary must have knowledge of the incentives that would influence the actions of the specific target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "427": {
    "name": "Influence via Psychological Principles",
    "description": "The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "416"
      }
    ],
    "prerequisites": [
      "The adversary must have the means and knowledge of how to communicate with the target in some manner."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires strong inter-personal and communication skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "428": {
    "name": "Influence via Modes of Thinking",
    "description": "The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "427"
      }
    ]
  },
  "429": {
    "name": "Target Influence via Eye Cues",
    "description": "The adversary gains information via non-verbal means from the target through eye movements.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "427"
      }
    ]
  },
  "43": {
    "name": "Exploiting Multiple Input Interpretation Layers",
    "description": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: \u003cparser1\u003e --\u003e \u003cinput validator\u003e --\u003e \u003cparser2\u003e. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine application/system inputs where bypassing input validation is desired] The attacker first needs to determine all of the application's/system's inputs where input validation is being performed and where they want to bypass it.",
        "techniques": [
          "While using an application/system, the attacker discovers an input where validation is stopping them from performing some malicious or unauthorized actions."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine which character encodings are accepted by the application/system] The attacker then needs to provide various character encodings to the application/system and determine which ones are accepted. The attacker will need to observe the application's/system's response to the encoded data to determine whether the data was interpreted properly.",
        "techniques": [
          "Determine which escape characters are accepted by the application/system. A common escape character is the backslash character, '\\'",
          "Determine whether URL encoding is accepted by the application/system.",
          "Determine whether UTF-8 encoding is accepted by the application/system.",
          "Determine whether UTF-16 encoding is accepted by the application/system.",
          "Determine if any other encodings are accepted by the application/system."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Combine multiple encodings accepted by the application.] The attacker now combines encodings accepted by the application. The attacker may combine different encodings or apply the same encoding multiple times.",
        "techniques": [
          "Combine same encoding multiple times and observe its effects. For example, if special characters are encoded with a leading backslash, then the following encoding may be accepted by the application/system: \"\\\\\\.\". With two parsing layers, this may get converted to \"\\.\" after the first parsing layer, and then, to \".\" after the second. If the input validation layer is between the two parsing layers, then \"\\\\\\.\\\\\\.\" might pass a test for \"..\" but still get converted to \"..\" afterwards. This may enable directory traversal attacks.",
          "Combine multiple encodings and observe the effects. For example, the attacker might encode \".\" as \"\\.\", and then, encode \"\\.\" as \"\u0026#92;\u0026#46;\", and then, encode that using URL encoding to \"%26%2392%3B%26%2346%3B\""
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Leverage ability to bypass input validation] Attacker leverages their ability to bypass input validation to gain unauthorized access to system. There are many attacks possible, and a few examples are mentioned here.",
        "techniques": [
          "Gain access to sensitive files.",
          "Perform command injection.",
          "Perform SQL injection.",
          "Perform XSS attacks."
        ]
      }
    ],
    "prerequisites": [
      "User input is used to construct a command to be executed on the target system or as part of the file name.",
      "Multiple parser passes are performed on the data supplied by the user."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Knowledge of various escaping schemes, such as URL escape encoding and XML escape characters."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "179",
      "181",
      "184",
      "183",
      "77",
      "78",
      "74",
      "20",
      "697",
      "707"
    ]
  },
  "430": {
    "name": "DEPRECATED:  Target Influence via Micro-Expressions",
    "description": "This attack pattern has been deprecated."
  },
  "431": {
    "name": "DEPRECATED:  Target Influence via Neuro-Linguistic Programming (NLP)",
    "description": "This attack pattern has been deprecated."
  },
  "432": {
    "name": "DEPRECATED:  Target Influence via Voice in NLP",
    "description": "This attack pattern has been deprecated."
  },
  "433": {
    "name": "Target Influence via The Human Buffer Overflow",
    "description": "An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "427"
      }
    ]
  },
  "434": {
    "name": "Target Influence via Interview and Interrogation",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "427"
      }
    ]
  },
  "435": {
    "name": "Target Influence via Instant Rapport",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "427"
      }
    ]
  },
  "438": {
    "name": "Modification During Manufacture",
    "description": "An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.",
    "mitreAttack": [
      "T1195"
    ]
  },
  "439": {
    "name": "Manipulation During Distribution",
    "description": "An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.",
    "relatedWeaknesses": [
      "1269"
    ],
    "mitreAttack": [
      "T1195"
    ]
  },
  "44": {
    "name": "Overflow Binary Resource File",
    "description": "An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      },
      {
        "nature": "ChildOf",
        "capecId": "23"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target software] The adversary identifies software that uses external binary files in some way. This could be a file upload, downloading a file from a shared location, or other means.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary creates a malicious binary file by altering the header to make the file seem shorter than it is. Additional bytes are added to the end of the file to be placed in the overflowed location. The adversary then deploys the file to the software to determine if a buffer overflow was successful.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] Once the adversary has determined that this attack is viable, they will specially craft the binary file in a way that achieves the desired behavior. If the source code is available, the adversary can carefully craft the malicious file so that the return address is overwritten to an intended value. If the source code is not available, the adversary will iteratively alter the file in order to overwrite the return address correctly.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Once the adversary has constructed a file that will effectively overflow the targeted software in the intended way. The file is deployed to the software, either by serving it directly to the software or placing it in a shared location for a victim to load into the software.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Target software processes binary resource files.",
      "Target software contains a buffer overflow vulnerability reachable through input from a user-controllable binary resource file."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To modify file, deceive client into downloading, locate and exploit remote stack or heap vulnerability"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "119",
      "697"
    ]
  },
  "440": {
    "name": "Hardware Integrity Attack",
    "description": "An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "prerequisites": [
      "Influence over the deployed system at a victim location."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.003",
      "T1200"
    ]
  },
  "441": {
    "name": "Malicious Logic Insertion",
    "description": "An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "prerequisites": [
      "Access to the component currently deployed at a victim location."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "284"
    ]
  },
  "442": {
    "name": "Infected Software",
    "description": "An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "441"
      }
    ],
    "prerequisites": [
      "Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "506"
    ],
    "mitreAttack": [
      "T1195.001",
      "T1195.002"
    ]
  },
  "443": {
    "name": "Malicious Logic Inserted Into Product by Authorized Developer",
    "description": "An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "Access to the product during the initial or continuous development."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.002",
      "T1195.003"
    ]
  },
  "444": {
    "name": "Development Alteration",
    "description": "An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "438"
      }
    ],
    "prerequisites": [
      "Access to the system during the development phase to alter and/or modify software and hardware components. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      }
    ]
  },
  "445": {
    "name": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.001"
    ]
  },
  "446": {
    "name": "Malicious Logic Insertion into Product via Inclusion of Third-Party Component",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "Access to the product during the initial or continuous development. This access is often obtained via insider access to include the third-party component after deployment."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "mitreAttack": [
      "T1195"
    ]
  },
  "447": {
    "name": "Design Alteration",
    "description": "An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "438"
      }
    ],
    "prerequisites": [
      "Access to system design documentation prior to the development phase. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have.",
      "Ability to forge web communications to deliver modified design documentation."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      }
    ]
  },
  "448": {
    "name": "Embed Virus into DLL",
    "description": "An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "442"
      }
    ],
    "prerequisites": [
      "Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "506"
    ],
    "mitreAttack": [
      "T1027.009"
    ]
  },
  "449": {
    "name": "DEPRECATED: Malware Propagation via USB Stick",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward."
  },
  "45": {
    "name": "Buffer Overflow via Symbolic Links",
    "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program that might load in certain files to memory.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow file content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary can create symbolic link on the target host.",
      "The target host does not perform correct boundary checking while consuming data from a resources."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "285",
      "302",
      "118",
      "119",
      "74",
      "20",
      "680",
      "697"
    ]
  },
  "450": {
    "name": "DEPRECATED: Malware Propagation via USB U3 Autorun",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Embed Virus into DLL. Please refer to this other pattern going forward."
  },
  "451": {
    "name": "DEPRECATED: Malware Propagation via Infected Peripheral Device",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward."
  },
  "452": {
    "name": "Infected Hardware",
    "description": "An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "441"
      }
    ],
    "prerequisites": [
      "Access to the hardware currently deployed at a victim location."
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ]
  },
  "453": {
    "name": "DEPRECATED: Malicious Logic Insertion via Counterfeit Hardware",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward."
  },
  "454": {
    "name": "DEPRECATED: Modification of Existing Components with Counterfeit Hardware",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward."
  },
  "455": {
    "name": "DEPRECATED: Malicious Logic Insertion via Inclusion of Counterfeit Hardware Components",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-457 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward."
  },
  "456": {
    "name": "Infected Memory",
    "description": "An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "441"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1257",
      "1260",
      "1274",
      "1312",
      "1316"
    ]
  },
  "457": {
    "name": "USB Memory Attacks",
    "description": "An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "456"
      },
      {
        "nature": "CanPrecede",
        "capecId": "529"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Target System] In certain cases, the adversary will explore an organization's network to determine a specific target machine to exploit based on the information it contains or privileges the main user may possess.",
        "techniques": [
          "If needed, the adversary explores an organization's network to determine if any specific systems of interest exist."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Develop or Obtain malware and install on a USB device] The adversary develops or obtains the malicious software necessary to exploit the target system, which they then install on an external USB device such as a USB flash drive.",
        "techniques": [
          "The adversary can develop or obtain malware for to perform a variety of tasks such as sniffing network traffic or monitoring keystrokes."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Connect or deceive a user into connecting the infected USB device] Once the malware has been placed on an external USB device, the adversary connects the device to the target system or deceives a user into connecting the device to the target system such as in a USB Drop Attack.",
        "techniques": [
          "The adversary connects the USB device to a specified target system or performs a USB Drop Attack, hoping a user will find and connect the USB device on their own. Once the device is connected, the malware executes giving the adversary access to network traffic, credentials, etc."
        ]
      }
    ],
    "prerequisites": [
      "Some level of physical access to the device being attacked.",
      "Information pertaining to the target organization on how to best execute a USB Drop Attack."
    ],
    "relatedWeaknesses": [
      "1299"
    ],
    "mitreAttack": [
      "T1091",
      "T1092"
    ]
  },
  "458": {
    "name": "Flash Memory Attacks",
    "description": "An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "456"
      }
    ],
    "relatedWeaknesses": [
      "1282"
    ]
  },
  "459": {
    "name": "Creating a Rogue Certification Authority Certificate",
    "description": "An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their \"to be signed\" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Craft Certificates] The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Send CSR to Certificate Authority] The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Insert Signed Blob into Unsigned Certificate] The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed"
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Understanding of how to force a hash collision in X.509 certificates"
      },
      {
        "level": "High",
        "details": "An attacker must be able to craft two X.509 certificates that produce the same hash value"
      },
      {
        "level": "Medium",
        "details": "Knowledge needed to set up a certification authority"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "327",
      "295",
      "290"
    ]
  },
  "46": {
    "name": "Overflow Variables and Tags",
    "description": "This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      },
      {
        "nature": "PeerOf",
        "capecId": "8"
      },
      {
        "nature": "PeerOf",
        "capecId": "10"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries look for applications or programs that accept formatted files, such as configuration files, as input.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "Knowing the type of file that an application takes as input, the adversary takes a normal input file and modifies a single variable or tag to contain a large amount of data. If there is a crash, this means that a buffer overflow attack is possible. The adversary will keep changing single variables or tags one by one until they see a change in behavior."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] The adversary will upload the crafted file to the application, causing a buffer overflow.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target program consumes user-controllable data in the form of tags or variables.",
      "The target program does not perform sufficient boundary checking."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "118",
      "119",
      "74",
      "20",
      "680",
      "733",
      "697"
    ]
  },
  "460": {
    "name": "HTTP Parameter Pollution (HPP)",
    "description": "An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "15"
      },
      {
        "nature": "CanPrecede",
        "capecId": "676"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find User Input] The adversary finds anywhere in the web application that uses user-supplied input in a form or action. This can also be found by looking at parameters in the URL in the navigation bar of the browser",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Add Duplicate Parameter Values] Once the adversary has identified what user input is used as HTTP parameters, they will add duplicates to each parameter one by one to observe the results. If the response from the HTTP request shows the duplicate parameter value concatenated with the original parameter value in some way, or simply just the duplicate parameter value, then HPP is possible.",
        "techniques": [
          "In the URL, add a duplicate parameter by using the \"\u0026\" delimiter. For example \"par1=val1\" becomes \"par1=val1\u0026par1=val2\". Depending on the backend API, this could be treated as \"par1=val1, val2\", which could lead to par1 being set to val2, ignoring val1.",
          "If the request is created based on user input directly on the page, the adversary will test by adding an encoded delimiter to the input. For example, the adverary might supply \"1000%26action=withdraw\" and the backend might interpret a POST request with the paramters \"action=deposit\u0026amount=1000\u0026action=withdraw\""
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Leverage HPP] Once the adversary has identified how the backend handles duplicate parameters, they will leverage this by polluting the paramters in a way that benefits them. In some cases, hardcoded parameters will be disregarded by the backend. In others, the adversary can bypass a WAF that might only check a parameter before it has been concatenated by the backend, resulting in malicious queries getting through.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "HTTP protocol is used with some GET/POST parameters passed"
    ],
    "relatedWeaknesses": [
      "88",
      "147",
      "235"
    ]
  },
  "461": {
    "name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
    "description": "An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "115"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find a vulnerable web service] The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed",
        "techniques": [
          "Read application documentation to learn about authentication schemes being used",
          "Observe web service traffic to look for vulnerable authentication schemes"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt adding padding to parameters] An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same",
        "techniques": [
          "Exploit the hash function extension / padding weakness with only padding to test the weakness"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Add malicious parameters to request] Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.",
        "techniques": [
          "Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic"
        ]
      }
    ],
    "prerequisites": [
      "Web services check the signature of the API calls",
      "Authentication tokens / secrets are shared between the server and the legitimate client",
      "The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.",
      "An iterative hash function like MD5 and SHA1 is used.",
      "An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.",
      "The communication channel between the client and the server is not secured via channel security such as TLS"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding."
      }
    ],
    "relatedWeaknesses": [
      "328",
      "290"
    ]
  },
  "462": {
    "name": "Cross-Domain Search Timing",
    "description": "An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "54"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine service to send cross domain requests to] The adversary first determines which service they will be sending the requests to",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Send and time various cross domain requests] Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.",
        "techniques": [
          "Using a GET request, leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events to time a response",
          "Using a POST request, leverage the \"iframe\" element and use the \"onload()\" event to time a response"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Infer information from the response time] After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.",
        "techniques": [
          "Compare timing of different requests to infer potentially sensitive information about a target service"
        ]
      }
    ],
    "prerequisites": [
      "Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Some knowledge of Java Script"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "385",
      "352",
      "208"
    ]
  },
  "463": {
    "name": "Padding Oracle Crypto Attack",
    "description": "An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "97"
      }
    ],
    "prerequisites": [
      "The decryption routine does not properly authenticate the message / does not verify its integrity prior to performing the decryption operation",
      "The target system leaks data (in some way) on whether a padding error has occurred when attempting to decrypt the ciphertext.",
      "The padding oracle remains available for enough time / for as many requests as needed for the adversary to decrypt the ciphertext."
    ],
    "relatedWeaknesses": [
      "209",
      "514",
      "649",
      "347",
      "354",
      "696"
    ]
  },
  "464": {
    "name": "Evercookie",
    "description": "An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "554"
      }
    ],
    "prerequisites": [
      "The victim's browser is not configured to reject all cookiesThe victim visits a website that serves the attackers' evercookie"
    ],
    "relatedWeaknesses": [
      "359"
    ],
    "mitreAttack": [
      "T1606.001"
    ]
  },
  "465": {
    "name": "Transparent Proxy Abuse",
    "description": "A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "554"
      }
    ],
    "prerequisites": [
      "Transparent proxy is usedVulnerable configuration of network topology involving the transparent proxy (e.g., no NAT happening between the client and the proxy)Execution of malicious Flash or Applet in the victim's browser"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Creating malicious Flash or Applet to open a cross-domain socket connection to a remote system"
      }
    ],
    "relatedWeaknesses": [
      "441"
    ],
    "mitreAttack": [
      "T1090.001"
    ]
  },
  "466": {
    "name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy",
    "description": "An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "94"
      }
    ],
    "prerequisites": [
      "The victim and the attacker are both in an environment where an active adversary in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Ability to intercept and modify requests / responses"
      },
      {
        "level": "Medium",
        "details": "Ability to create iFrame and JavaScript code that would initiate unauthorized requests to sensitive sites from the victim's browser"
      },
      {
        "level": "Medium",
        "details": "Solid understanding of the HTTP protocol"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300"
    ]
  },
  "467": {
    "name": "Cross Site Identification",
    "description": "An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the \"remember me\" feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "62"
      }
    ],
    "prerequisites": [
      "The victim has an active session with the social networking site."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "An attacker should be able to create a payload and deliver it to the victim's browser."
      },
      {
        "level": "Medium",
        "details": "An attacker needs to know how to interact with various social networking sites (e.g., via available APIs) to request information and how to send the harvested data back to the attacker."
      }
    ],
    "relatedWeaknesses": [
      "352",
      "359"
    ]
  },
  "468": {
    "name": "Generic Cross-Browser Cross-Domain Theft",
    "description": "An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "242"
      }
    ],
    "prerequisites": [
      "No new lines can be present in the injected CSS stringProper HTML or URL escaping of the \" and ' characters is not presentThe attacker has control of two injection points: pre-string and post-string"
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to craft a CSS injection"
      }
    ],
    "relatedWeaknesses": [
      "707",
      "149",
      "177",
      "838"
    ]
  },
  "469": {
    "name": "HTTP DoS",
    "description": "An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "227"
      }
    ],
    "prerequisites": [
      "HTTP protocol is usedWeb server used is vulnerable to denial of service via HTTP flooding"
    ],
    "relatedWeaknesses": [
      "770",
      "772"
    ],
    "mitreAttack": [
      "T1499.002"
    ]
  },
  "47": {
    "name": "Buffer Overflow via Parameter Expansion",
    "description": "In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. Adversaries often look for applications that accept user input and that perform manual memory management.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.",
        "techniques": [
          "In this attack, the normal method of providing large user input does not work. The program performs bounds checking on the user input, but not the expanded user input. The adversary needs to provide input that they believe will be expanded by the program to overflow a buffer. To identify where this is possible, an adversary either needs to have knowledge of the inner workings of the program or use a disassembler and other reverse engineering tools to guide the search."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the input to be given to the program. If the intent is to simply cause the software to crash, the input needs only to expand to an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft input that expands in a way that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.",
        "techniques": [
          "Create specific files and directories on the system and then give input using path traversal shortcuts to those directories that could expand past an input buffer."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary gives the crafted input to the program, overflowing the buffer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The program expands one of the parameters passed to a function with input controlled by the user, but a later function making use of the expanded parameter erroneously considers the original, not the expanded size of the parameter.",
      "The expanded parameter is used in the context where buffer overflow may become possible due to the incorrect understanding of the parameter size (i.e. thinking that it is smaller than it really is)."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Finding this particular buffer overflow may not be trivial. Also, stack and especially heap based buffer overflows require a lot of knowledge if the intended goal is arbitrary code execution. Not only that the adversary needs to write the shell code to accomplish their goals, but the adversary also needs to find a way to get the program execution to jump to the planted shell code. There also needs to be sufficient room for the payload. So not every buffer overflow will be exploitable, even by a skilled adversary."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "119",
      "118",
      "130",
      "131",
      "74",
      "20",
      "680",
      "697"
    ]
  },
  "470": {
    "name": "Expanding Control over the Operating System from the Database",
    "description": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "66"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The adversary identifies a database management system running on a machine they would like to gain control over, or on a network they want to move laterally through.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The adversary goes about the typical steps of an SQL injection and determines if an injection is possible.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "Once the Adversary determines that an SQL injection is possible, they must ensure that the requirements for the attack are met. These are a high privileged session user and batched query support. This is done in similar ways to discovering if an SQL injection is possible.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "If the requirements are met, based on the database management system that is running, the adversary will find or create user defined functions (UDFs) that can be loaded as DLLs. An example of a DLL can be found at https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Experiment",
        "description": "In order to load the DLL, the adversary must first find the path to the plugin directory. The command to achieve this is different based on the type of DBMS, but for MySQL, this can be achieved by running the command \"select @@plugin_dir\"",
        "techniques": null
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "The DLL is then moved into the previously found plugin directory so that the contained functions can be loaded. This can be done in a number of ways; loading from a network share, writing the entire hex encoded string to a file in the plugin directory, or loading the DLL into a table and then into a file. An example using MySQL to load the hex string is as follows. select 0x4d5a9000... into dump file \"{plugin directory}\\\\udf.dll\";",
        "techniques": null
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "Once the DLL is in the plugin directory, a command is then run to load the UDFs. An example of this in MySQL is \"create function sys_eval returns string soname 'udf.dll';\" The function sys_eval is specific to the example DLL listed above.",
        "techniques": null
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "Once the adversary has loaded the desired function(s), they will use these to execute arbitrary commands on the compromised system. This is done through a simple select command to the loaded UDF. For example: \"select sys_eval('dir');\". Because the prerequisite to this attack is that the database session user is a super user, this means that the adversary will be able to execute commands with elevated privileges.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means"
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Low level knowledge of the various facilities available in different DBMS systems for interacting with the file system and operating system"
      }
    ],
    "relatedWeaknesses": [
      "250",
      "89"
    ]
  },
  "471": {
    "name": "Search Order Hijacking",
    "description": "An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "159"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target general susceptibility] An attacker uses an automated tool or manually finds whether the target application uses dynamically linked libraries and the configuration file or look up table (such as Procedure Linkage Table) which contains the entries for dynamically linked libraries.",
        "techniques": [
          "The attacker uses a tool such as the OSX \"otool\" utility or manually probes whether the target application uses dynamically linked libraries.",
          "The attacker finds the configuration files containing the entries to the dynamically linked libraries and modifies the entries to point to the malicious libraries the attacker crafted."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Craft malicious libraries] The attacker uses knowledge gained in the Explore phase to craft malicious libraries that they will redirect the target to leverage. These malicious libraries could have the same APIs as the legitimate library and additional malicious code.",
        "techniques": [
          "The attacker monitors the file operations performed by the target application using a tool like dtrace or FileMon. And the attacker can delay the operations by using \"sleep(2)\" and \"usleep()\" to prepare the appropriate conditions for the attack, or make the application perform expansive tasks (large files parsing, etc.) depending on the purpose of the application."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Redirect the access to libraries to the malicious libraries] The attacker redirects the target to the malicious libraries they crafted in the Experiment phase. The attacker will be able to force the targeted application to execute arbitrary code when the application attempts to access the legitimate libraries.",
        "techniques": [
          "The attacker modifies the entries in the configuration files pointing to the malicious libraries they crafted.",
          "The attacker leverages symlink/timing issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-132.",
          "The attacker leverages file search path order issues to redirect the target to access the malicious libraries they crafted. See also: CAPEC-38."
        ]
      }
    ],
    "prerequisites": [
      "Attacker has a mechanism to place its malicious libraries in the needed location on the file system."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to create a malicious library."
      }
    ],
    "relatedWeaknesses": [
      "427"
    ],
    "mitreAttack": [
      "T1574.001",
      "T1574.004",
      "T1574.008"
    ]
  },
  "472": {
    "name": "Browser Fingerprinting",
    "description": "An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "541"
      }
    ],
    "prerequisites": [
      "Victim's browser visits a website that contains attacker's Java ScriptJava Script is not disabled in the victim's browser"
    ],
    "relatedWeaknesses": [
      "200"
    ]
  },
  "473": {
    "name": "Signature Spoof",
    "description": "An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "151"
      }
    ],
    "prerequisites": [
      "The victim or victim system is dependent upon a cryptographic signature-based verification system for validation of one or more security events or actions.",
      "The validation can be bypassed via an attacker-provided signature that makes it appear that the legitimate authoritative or reputable source provided the signature."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Technical understanding of how signature verification algorithms work with data and applications"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "20",
      "327",
      "290"
    ],
    "mitreAttack": [
      "T1036.001",
      "T1553.002"
    ]
  },
  "474": {
    "name": "Signature Spoofing by Key Theft",
    "description": "An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      }
    ],
    "prerequisites": [
      "An authoritative or reputable signer is storing their private signature key with insufficient protection."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Knowledge of common location methods and access methods to sensitive data"
      },
      {
        "level": "High",
        "details": "Ability to compromise systems containing sensitive data"
      }
    ],
    "relatedWeaknesses": [
      "522"
    ],
    "mitreAttack": [
      "T1552.004"
    ]
  },
  "475": {
    "name": "Signature Spoofing by Improper Validation",
    "description": "An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      },
      {
        "nature": "CanPrecede",
        "capecId": "542"
      }
    ],
    "prerequisites": [
      "Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Cryptanalysis of signature verification algorithm"
      },
      {
        "level": "High",
        "details": "Reverse engineering and cryptanalysis of signature verification algorithm implementation"
      }
    ],
    "relatedWeaknesses": [
      "347",
      "327",
      "295"
    ]
  },
  "476": {
    "name": "Signature Spoofing by Misrepresentation",
    "description": "An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      }
    ],
    "prerequisites": [
      "Recipient is using signature verification software that does not clearly indicate potential homographs in the signer identity.Recipient is using signature verification software that contains a parsing vulnerability, or allows control characters in the signer identity field, such that a signature is mistakenly displayed as valid and from a known or authoritative signer."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Attacker needs to understand the layout and composition of data blobs used by the target application."
      },
      {
        "level": "High",
        "details": "To discover a specific vulnerability, attacker needs to reverse engineer signature parsing, signature verification and signer representation code."
      },
      {
        "level": "High",
        "details": "Attacker may be required to create malformed data blobs and know how to insert them in a location that the recipient will visit."
      }
    ],
    "relatedWeaknesses": [
      "290"
    ]
  },
  "477": {
    "name": "Signature Spoofing by Mixing Signed and Unsigned Content",
    "description": "An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      }
    ],
    "prerequisites": [
      "Signer and recipient are using complex data storage structures that allow for a mix between signed and unsigned data",
      "Recipient is using signature verification software that does not maintain separation between signed and unsigned data once the signature has been verified."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The attacker may need to continuously monitor a stream of signed data, waiting for an exploitable message to appear."
      },
      {
        "level": "High",
        "details": "Attacker must be able to create malformed data blobs and know how to insert them in a location that the recipient will visit."
      }
    ],
    "relatedWeaknesses": [
      "693",
      "311",
      "319"
    ]
  },
  "478": {
    "name": "Modification of Windows Service Configuration",
    "description": "An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "203"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target system] The adversary must first determine the system they wish to modify the registry of. This needs to be a windows machine as this attack only works on the windows registry.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Gain access to the system] The adversary needs to gain access to the system in some way so that they can modify the windows registry.",
        "techniques": [
          "Gain physical access to a system either through shoulder surfing a password or accessing a system that is left unlocked.",
          "Gain remote access to a system through a variety of means."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Modify windows registry] The adversary will modify the windows registry by changing the configuration settings for a service. Specifically, the adversary will change the path settings to define a path to a malicious binary to be executed.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary must have the capability to write to the Windows Registry on the targeted system."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1574.011",
      "T1543.003"
    ]
  },
  "479": {
    "name": "Malicious Root Certificate",
    "description": "An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      }
    ],
    "prerequisites": [
      "The adversary must have the ability to create a new root certificate."
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1553.004"
    ]
  },
  "48": {
    "name": "Passing Local Filenames to Functions That Expect a URL",
    "description": "This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "212"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify web application URL inputs] Review application inputs to find those that are designed to be URLs.",
        "techniques": [
          "Manually navigate web site pages to identify URLs.",
          "Use automated tools to identify URLs."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Identify URL inputs allowing local access.] Execute test local commands via each URL input to determine which are successful.",
        "techniques": [
          "Manually execute a local command (such as 'pwd') via the URL inputs.",
          "Using an automated tool, test each URL input for weakness."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute malicious commands] Using the identified URL inputs that allow local command execution, execute malicious commands.",
        "techniques": [
          "Execute local commands via the URL input."
        ]
      }
    ],
    "prerequisites": [
      "The victim's software must not differentiate between the location and type of reference passed the client software, e.g. browser"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Attacker identifies known local files to exploit"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "241",
      "706"
    ]
  },
  "480": {
    "name": "Escaping Virtualization",
    "description": "An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "115"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probing] The adversary probes the target application, service, or device to find a possible weakness that would allow escaping the virtualized environment.",
        "techniques": [
          "Probing applications, services, or devices for virtualization weaknesses."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Verify the exploitable security weaknesses] Using the found weakness, the adversary attempts to escape the virtualized environment.",
        "techniques": [
          "Using an application weakness to escape a virtualized environment"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute more complex attacks] Once outside of the virtualized environment, the adversary attempts to perform other more complex attacks such as accessing system resources or executing unauthorized code within the host environment.",
        "techniques": [
          "Executing complex attacks when given higher permissions by escaping a virtualized environment"
        ]
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Accountability",
          "Authentication",
          "Authorization",
          "Non-Repudiation"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "693"
    ],
    "mitreAttack": [
      "T1611"
    ]
  },
  "481": {
    "name": "Contradictory Destinations in Traffic Routing Schemes",
    "description": "Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "161"
      }
    ],
    "prerequisites": [
      "An adversary must be aware that their message will be routed using a CDN, and that both of the contradictory domains are served from that CDN.",
      "If the purpose of the Domain Fronting is to hide redirected C2 traffic, the C2 server must have been created in the CDN."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary must have some knowledge of how messages are routed."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data",
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "923"
    ],
    "mitreAttack": [
      "T1090.004"
    ]
  },
  "482": {
    "name": "TCP Flood",
    "description": "An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the ability to generate a large amount of TCP traffic to send to the target port of a functioning server."
    ],
    "relatedWeaknesses": [
      "770"
    ],
    "mitreAttack": [
      "T1498.001",
      "T1499.001",
      "T1499.002"
    ]
  },
  "484": {
    "name": "DEPRECATED: XML Client-Side Attack",
    "description": "This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads and CAPEC-231: XML Oversized Payloads. Please refer to these CAPECs going forward."
  },
  "485": {
    "name": "Signature Spoofing by Key Recreation",
    "description": "An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "473"
      }
    ],
    "prerequisites": [
      "An authoritative signer is using a weak method of random number generation or weak signing software that causes key leakage or permits key inference.",
      "An authoritative signer is using a signature algorithm with a direct weakness or with poorly chosen parameters that enable the key to be recovered using signatures from that signer."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Cryptanalysis of signature generation algorithm"
      },
      {
        "level": "High",
        "details": "Reverse engineering and cryptanalysis of signature generation algorithm implementation and random number generation"
      },
      {
        "level": "High",
        "details": "Ability to create malformed data blobs and know how to present them directly or indirectly to a victim."
      }
    ],
    "relatedWeaknesses": [
      "330"
    ],
    "mitreAttack": [
      "T1552.004"
    ]
  },
  "486": {
    "name": "UDP Flood",
    "description": "An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the ability to generate a large amount of UDP traffic to send to the desired port of a target service using UDP."
    ],
    "relatedWeaknesses": [
      "770"
    ]
  },
  "487": {
    "name": "ICMP Flood",
    "description": "An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the ability to generate a large amount of ICMP traffic to send to the target server."
    ],
    "relatedWeaknesses": [
      "770"
    ]
  },
  "488": {
    "name": "HTTP Flood",
    "description": "An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the ability to generate a large amount of HTTP traffic to send to a target server."
    ],
    "relatedWeaknesses": [
      "770"
    ],
    "mitreAttack": [
      "T1499.002"
    ]
  },
  "489": {
    "name": "SSL Flood",
    "description": "An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the ability to generate a large amount of SSL traffic to send a target server."
    ],
    "relatedWeaknesses": [
      "770"
    ],
    "mitreAttack": [
      "T1499.002"
    ]
  },
  "49": {
    "name": "Password Brute Forcing",
    "description": "An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "112"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
        "techniques": [
          "Determine minimum and maximum allowed password lengths.",
          "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
          "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Brute force password] Given the finite space of possible passwords dictated by the password policy determined in the previous step, try all possible passwords for a known user ID until application/system grants access.",
        "techniques": [
          "Manually or automatically enter all possible passwords through the application/system's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
          "Perform an offline dictionary attack or a rainbow table attack against a known password hash."
        ]
      }
    ],
    "prerequisites": [
      "An adversary needs to know a username to target.",
      "The system uses password based authentication as the one factor authentication mechanism.",
      "An application does not have a password throttling mechanism in place. A good password throttling mechanism will make it almost impossible computationally to brute force a password as it may either lock out the user after a certain number of incorrect attempts or introduce time out periods. Both of these would make a brute force attack impractical."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "A brute force attack is very straightforward. A variety of password cracking tools are widely available."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "521",
      "262",
      "263",
      "257",
      "654",
      "307",
      "308",
      "309"
    ],
    "mitreAttack": [
      "T1110.001"
    ]
  },
  "490": {
    "name": "Amplification",
    "description": "An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the existence of a 3rd party service that generates a response that is significantly larger than the request that triggers it."
    ],
    "relatedWeaknesses": [
      "770"
    ],
    "mitreAttack": [
      "T1498.002"
    ]
  },
  "491": {
    "name": "Quadratic Data Expansion",
    "description": "An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "230"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] An adversary determines the input data stream that is being processed by a data parser that supports using substituion on the victim's side.",
        "techniques": [
          "Use an automated tool to record all instances of URLs to process requests.",
          "Use a browser to manually explore the website and analyze how the application processes requests."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Craft malicious payload] The adversary crafts malicious message containing nested quadratic expansion that completely uses up available server resource.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Send the message] Send the malicious crafted message to the target URL.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "This type of attack requires a server that accepts serialization data which supports substitution and parses the data."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "770"
    ]
  },
  "492": {
    "name": "Regular Expression Exponential Blowup",
    "description": "An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the ability to identify hosts running a poorly implemented Regex, and the ability to send crafted input to exploit the regular expression."
    ],
    "relatedWeaknesses": [
      "400",
      "1333"
    ]
  },
  "493": {
    "name": "SOAP Array Blowup",
    "description": "An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the attacker to know the endpoint of the web service, and be able to reach the endpoint with a malicious SOAP message."
    ],
    "relatedWeaknesses": [
      "770"
    ]
  },
  "494": {
    "name": "TCP Fragmentation",
    "description": "An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the target system to be running a vulnerable implementation of IP, and the adversary needs to ability to send TCP packets of arbitrary size with crafted data."
    ],
    "relatedWeaknesses": [
      "770",
      "404"
    ]
  },
  "495": {
    "name": "UDP Fragmentation",
    "description": "An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the attacker to be able to generate fragmented IP traffic containing crafted data."
    ],
    "relatedWeaknesses": [
      "770",
      "404"
    ]
  },
  "496": {
    "name": "ICMP Fragmentation",
    "description": "An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "130"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the target system to be running a vulnerable implementation of IP, and the attacker needs to ability to send arbitrary sized ICMP packets to the target."
    ],
    "relatedWeaknesses": [
      "770",
      "404"
    ]
  },
  "497": {
    "name": "File Discovery",
    "description": "An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must know the location of these common key files."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1083"
    ]
  },
  "498": {
    "name": "Probe iOS Screenshots",
    "description": "An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. This attack targets temporary screenshots created by the underlying OS while the application remains open in the background.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "545"
      }
    ],
    "prerequisites": [
      "This type of an attack requires physical access to a device to either excavate the image files (potentially by leveraging a Jailbreak) or view the screenshots through the multitasking switcher (by double tapping the home button on the device)."
    ],
    "relatedWeaknesses": [
      "359"
    ]
  },
  "499": {
    "name": "Android Intent Intercept",
    "description": "An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "117"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents. They must also determine what the contents of the intents being sent are such that a malicious application can get sent these intents.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents from a target application",
        "techniques": [
          "Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Intercept Implicit Intents] Once the malicious app is downloaded, the android device will forward any implicit intents from the target application to the malicious application, allowing the adversary to gaina access to the contents of the intent. The adversary can proceed with any attack using the contents of the intent.",
        "techniques": [
          "Block the intent from reaching the desired location, causing a denial of service",
          "Gather sensitive information from the intercepted intent",
          "Modify the contents of the intent and forward along to another application"
        ]
      }
    ],
    "prerequisites": [
      "An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application is used to intercept implicit intents."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "925"
    ]
  },
  "5": {
    "name": "Blue Boxing",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "220"
      }
    ],
    "prerequisites": [
      "System must use weak authentication mechanisms for administrative functions."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Given a vulnerable phone system, the attackers' technical vector relies on attacks that are well documented in cracker 'zines and have been around for decades."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "285"
    ]
  },
  "50": {
    "name": "Password Recovery Exploitation",
    "description": "An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "212"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "Understand the password recovery mechanism and how it works.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "Find a weakness in the password recovery mechanism and exploit it. For instance, a weakness may be that a standard single security question is used with an easy to determine answer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system allows users to recover their passwords and gain access back into the system.",
      "Password recovery mechanism has been designed or implemented insecurely.",
      "Password recovery mechanism relies only on something the user knows and not something the user has.",
      "No third party intervention is required to use the password recovery mechanism."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Brute force attack"
      },
      {
        "level": "Medium",
        "details": "Social engineering and more sophisticated technical attacks."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "640"
    ]
  },
  "500": {
    "name": "WebView Injection",
    "description": "An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "253"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target web application] An adversary first needs to determine what web application they wish to target.",
        "techniques": [
          "Target web applications that require users to enter sensitive information.",
          "Target web applications that an adversary wishes to operate on behalf of a logged in user."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create malicious application] An adversary creates an application, often mobile, that incorporates a WebView component to display the targeted web application. This malicious application needs to downloaded by a user, so adversaries will make this application useful in some way.",
        "techniques": [
          "Create a 3rd party application that adds useful functionality to the targeted web application. Victims will download the application as a means of using the targeted web application.",
          "Create a fun game that at some point directs a user to the targeted web application. For example, prompt the user to buy in game currency by directing them to PayPal."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Get the victim to download and run the application] An adversary needs to get the victim to willingly download and run the application.",
        "techniques": [
          "Pay for App Store advertisements",
          "Promote the application on social media, either through accounts made by the adversary or by paying for other accounts to advertise."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Inject malicious code] Once the victim runs the malicious application and views the targeted web page in the WebView component, the malicious application will inject malicious JavaScript code into the web application. This is done by using WebView's loadURL() API, which can inject arbitrary JavaScript code into pages loaded by the WebView component with the same privileges. This is often done by adding a script tag to the document body with a src destination to a remote location that serves malicious JavaScript code.",
        "techniques": [
          "Execute operations on the targeted web page on behalf of an authenticated user.",
          "Steal cookie information from the victim.",
          "Add in extra fields to the DOM in an attempt to get a user to divulge sensitive information."
        ]
      }
    ],
    "prerequisites": [
      "An adversary must be able install a purpose built malicious application onto the device and convince the user to execute it. The malicious application is designed to target a specific web application and is used to load the target web pages via the WebView component. For example, an adversary may develop an application that interacts with Facebook via WebView and adds a new feature that a user desires. The user would install this 3rd party app instead of the Facebook app."
    ],
    "relatedWeaknesses": [
      "749",
      "940"
    ]
  },
  "501": {
    "name": "Android Activity Hijack",
    "description": "An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "499"
      },
      {
        "nature": "ChildOf",
        "capecId": "173"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find an android application that uses implicit intents] Since this attack only works on android applications that use implicit intents, rather than explicit intents, an adversary must first identify an app that uses implicit intents to launch an Android-based trusted activity, and what that activity is.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create a malicious app] The adversary must create a malicious android app meant to intercept implicit intents to launch an Adroid-based trusted activity. This malicious app will mimic the trusted activiy's user interface to get the user to enter sensitive data.",
        "techniques": [
          "Specify the type of intent wished to be intercepted in the malicious app's manifest file using an intent filter"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Get user to download malicious app] The adversary must get a user using the targeted app to download the malicious app by any means necessary",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Gather sensitive data through malicious app] Once the target application sends an implicit intent to launch a trusted activity, the malicious app will be launched instead that looks identical to the interface of that activity. When the user enters sensitive information it will be captured by the malicious app.",
        "techniques": [
          "Gather login information from a user using a malicious app"
        ]
      }
    ],
    "prerequisites": [
      "The adversary must have previously installed the malicious application onto the Android device that will run in place of the trusted activity."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The adversary must typically overcome network and host defenses in order to place malware on the system."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "923"
    ]
  },
  "502": {
    "name": "Intent Spoof",
    "description": "An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "148"
      }
    ],
    "prerequisites": [
      "An adversary must be able install a purpose built malicious application onto the Android device and convince the user to execute it. The malicious application will be used to issue spoofed intents."
    ],
    "relatedWeaknesses": [
      "284"
    ]
  },
  "503": {
    "name": "WebView Exposure",
    "description": "An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "122"
      }
    ],
    "prerequisites": [
      "This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed."
    ],
    "relatedWeaknesses": [
      "284"
    ]
  },
  "504": {
    "name": "Task Impersonation",
    "description": "An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "173"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing sensitive information.",
        "techniques": [
          "Determine what tasks prompt a user for their credentials.",
          "Determine what tasks may prompt a user to authorize a process to execute with elevated privileges."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials or to ride the user's privileges.",
        "techniques": [
          "Prompt a user for their credentials, while making the user believe the credential request is legitimate.",
          "Prompt a user to authorize a task to run with elevated privileges, while making the user believe the request is legitimate."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must already have access to the target system via some means.",
      "A legitimate task must exist that an adversary can impersonate to glean credentials.",
      "The user's privileges allow them to execute certain tasks with elevated privileges."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary has gained access to the target system, impersonating a task is trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1021"
    ],
    "mitreAttack": [
      "T1036.004"
    ]
  },
  "505": {
    "name": "Scheme Squatting",
    "description": "An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      }
    ]
  },
  "506": {
    "name": "Tapjacking",
    "description": "An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "173"
      }
    ],
    "prerequisites": [
      "This pattern of attack requires the ability to execute a malicious application on the user's device. This malicious application is used to present the interface to the user and make the attack possible."
    ],
    "relatedWeaknesses": [
      "1021"
    ]
  },
  "507": {
    "name": "Physical Theft",
    "description": "An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.",
    "prerequisites": [
      "This type of attack requires the existence of a physical target that an adversary believes hosts something of value."
    ]
  },
  "508": {
    "name": "Shoulder Surfing",
    "description": "In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content \"over the victim's shoulder\", as implied by the name of this attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "651"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      }
    ],
    "prerequisites": [
      "The adversary typically requires physical proximity to the target's environment, in order to observe their screen or conversation. This may not be the case if the adversary is able to record the target and obtain sensitive information upon review of the recording."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "In most cases, an adversary can simply observe and retain the desired information."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200",
      "359"
    ]
  },
  "509": {
    "name": "Kerberoasting",
    "description": "Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "652"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "Scan for user accounts with set SPN values",
        "techniques": [
          "These can be found via Powershell or LDAP queries, as well as enumerating startup name accounts and other means."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "Request service tickets",
        "techniques": [
          "Using user account's SPN value, request other service tickets from Active Directory"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "Extract ticket and save to disk",
        "techniques": [
          "Certain tools like Mimikatz can extract local tickets and save them to memory/disk."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "Crack the encrypted ticket to harvest plain text credentials",
        "techniques": [
          "Leverage a brute force application/script on the hashed value offline until cracked. The shorter the password, the easier it is to crack."
        ]
      }
    ],
    "prerequisites": [
      "The adversary requires access as an authenticated user on the system. This attack pattern relates to elevating privileges.",
      "The adversary requires use of a third-party credential harvesting tool (e.g., Mimikatz).",
      "The adversary requires a brute force tool."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": ""
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "308",
      "309",
      "294",
      "263",
      "262",
      "521"
    ],
    "mitreAttack": [
      "T1558.003"
    ]
  },
  "51": {
    "name": "Poison Web Service Registry",
    "description": "SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "203"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find a target SOA or Web Service] The adversary must first indentify a target SOA or Web Service.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine desired outcome] Because poisoning a web service registry can have different outcomes, the adversary must decide how they wish to effect the webservice.",
        "techniques": [
          "An adversary can perform a denial of service attack on a web service.",
          "An adversary can redirect requests or responses to a malicious service."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Determine if a malicious service needs to be created] If the adversary wishes to redirect requests or responses, they will need to create a malicious service to redirect to.",
        "techniques": [
          "Create a service to that requests are sent to in addition to the legitimate service and simply record the requests.",
          "Create a service that will give malicious responses to a service provider.",
          "Act as a malicious service provider and respond to requests in an arbitrary way."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Poison Web Service Registry] Based on the desired outcome, poison the web service registry. This is done by altering the data at rest in the registry or uploading malicious content by spoofing a service provider.",
        "techniques": [
          "Intercept and change WS-Adressing headers to route to a malicious service or service provider.",
          "Provide incorrect information in schema or metadata to cause a denial of service.",
          "Delete information about service procider interfaces to cause a denial of service."
        ]
      }
    ],
    "prerequisites": [
      "The attacker must be able to write to resources or redirect access to the service registry."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To identify and execute against an over-privileged system interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "285",
      "74",
      "693"
    ]
  },
  "510": {
    "name": "SaaS User Request Forgery",
    "description": "An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, \"piggy-backing\" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "21"
      }
    ],
    "prerequisites": [
      "An adversary must be able install a purpose built malicious application onto the trusted user's system and convince the user to execute it while authenticated to the SaaS application."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "This attack pattern often requires the technical ability to modify a malicious software package (e.g. Zeus) to spider a targeted site and a way to trick a user into a malicious software download."
      }
    ],
    "relatedWeaknesses": [
      "346"
    ]
  },
  "511": {
    "name": "Infiltration of Software Development Environment",
    "description": "An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).",
      "The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.",
      "The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Intelligence about the manufacturer's operating environment and infrastructure."
      },
      {
        "level": "High",
        "details": "Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment."
      },
      {
        "level": "High",
        "details": "Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)"
      }
    ],
    "mitreAttack": [
      "T1195.001"
    ]
  },
  "516": {
    "name": "Hardware Component Substitution During Baselining",
    "description": "An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "The adversary will need either physical access or be able to supply malicious hardware components to the product development facility."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Intelligence data on victim's purchasing habits."
      },
      {
        "level": "High",
        "details": "Resources to maliciously construct/alter hardware components used for testing by the supplier."
      },
      {
        "level": "High",
        "details": "Resources to physically infiltrate supplier."
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "517": {
    "name": "Documentation Alteration to Circumvent Dial-down",
    "description": "An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "447"
      }
    ],
    "prerequisites": [
      "Advanced knowledge of internal software and hardware components within manufacturer's development environment.",
      "Access to the manufacturer's documentation."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to read, interpret, and subsequently alter manufacturer's documentation to prevent dial-down capabilities."
      },
      {
        "level": "High",
        "details": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
      }
    ]
  },
  "518": {
    "name": "Documentation Alteration to Produce Under-performing Systems",
    "description": "An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "447"
      }
    ],
    "prerequisites": [
      "Advanced knowledge of software and hardware capabilities of a manufacturer's product.",
      "Access to the manufacturer's documentation."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to read, interpret, and subsequently alter manufacturer's documentation to misrepresent system capabilities."
      },
      {
        "level": "High",
        "details": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
      }
    ]
  },
  "519": {
    "name": "Documentation Alteration to Cause Errors in System Design",
    "description": "An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "447"
      }
    ],
    "prerequisites": [
      "Advanced knowledge of software capabilities of a manufacturer's product.",
      "Access to the manufacturer's documentation."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in system design."
      },
      {
        "level": "High",
        "details": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
      }
    ]
  },
  "52": {
    "name": "Embedding NULL Bytes",
    "description": "An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.",
        "techniques": [
          "Try different encodings for null such as \\0 or %00"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) such that they remove data after the null byte(s) in a way that is beneficial to them.",
        "techniques": [
          "If the input is a directory as part of a longer file path, add a null byte(s) at the end of the input to try to traverse to the given directory."
        ]
      }
    ],
    "prerequisites": [
      "The program does not properly handle postfix NULL terminators"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Directory traversal"
      },
      {
        "level": "High",
        "details": "Execution of arbitrary code"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "158",
      "172",
      "173",
      "74",
      "20",
      "697",
      "707"
    ]
  },
  "520": {
    "name": "Counterfeit Hardware Component Inserted During Product Assembly",
    "description": "An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "The adversary will need either physical access or be able to supply malicious hardware components to the product development facility."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Resources to maliciously construct components used by the manufacturer."
      },
      {
        "level": "High",
        "details": "Resources to physically infiltrate manufacturer or manufacturer's supplier."
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "521": {
    "name": "Hardware Design Specifications Are Altered",
    "description": "An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "447"
      }
    ],
    "prerequisites": [
      "Advanced knowledge of hardware capabilities of a manufacturer's product.",
      "Access to the manufacturer's documentation."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to read, interpret, and subsequently alter manufacturer's documentation to cause errors in design specifications."
      },
      {
        "level": "High",
        "details": "Ability to stealthly gain access via remote compromise or physical access to the manufacturer's documentation."
      }
    ]
  },
  "522": {
    "name": "Malicious Hardware Component Replacement",
    "description": "An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "439"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Target Hardware] The adversary must first identify a system that they wish to target, and a specific hardware component that they can swap out with a malicious replacement.",
        "techniques": [
          "Look for datasheets containing the system schematics that can help identify possible target hardware.",
          "Procure a system and inspect it manually, looking for possible hardware component targets. Search for manufacturer IDs on hardware chips or FCC IDs on wireless chips to determine their functionality."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.",
        "techniques": [
          "Procure a system and observe the steps it takes in the shipment process.",
          "Identify possible warehouses that systems are stored after manufacturing."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Test a Malicious Component Replacement] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.",
        "techniques": [
          "Design a malicious hardware component that will perform the same functionality as the target component, but also contains additional functionality.",
          "Obtain already designed malicious components that just need to be placed into the system."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Substitute Components in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary substitutes the malicious component for the targeted component. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Physical access to the system after it has left the manufacturer but before it is deployed at the victim location."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Advanced knowledge of the design of the system."
      },
      {
        "level": "High",
        "details": "Hardware creation and manufacture of replacement components."
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "523": {
    "name": "Malicious Software Implanted",
    "description": "An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "439"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Entry Point] The adversary must first identify a system that they wish to target and search for an entry point they can use to install the malicious software. This could be a system which they have prior knowledge of, giving them insight into the software and environment.",
        "techniques": [
          "Use a JTAGulator to identify exposed JTAG and UART interfaces in smaller embedded systems.",
          "Identify exposed USB connectors that could be used to load software."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Discover Vulnerability in Supply Chain] The adversary maps out the supply chain for the targeted system. They look for ooportunities to gain physical access to the system after it has left the manufacturer, but before it is deployed to the victim.",
        "techniques": [
          "Procure a system and observe the steps it takes in the shipment process.",
          "Identify possible warehouses that systems are stored after manufacturing."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Test Malicious Software] Before performing the attack in the wild, an adversary will test the attack on a system they have procured to ensure that the desired outcome will be achieved.",
        "techniques": [
          "Design malicious software that will give an adversary a backdoor into the system once it is deployed to the victim.",
          "Obtain already designed malicious software that just need to be placed into the system."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Implant Software in the Supply Chain] Using the vulnerability in the supply chain of the system discovered in the explore phase, the adversary implants the malicious software into the system. This results in the adversary gaining unintended access to systems once they reach the victim and can lead to a variety of follow up attacks.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Physical access to the system after it has left the manufacturer but before it is deployed at the victim location."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Advanced knowledge of the design of the system and it's operating system components and subcomponents."
      },
      {
        "level": "High",
        "details": "Malicious software creation."
      }
    ],
    "mitreAttack": [
      "T1195.002"
    ]
  },
  "524": {
    "name": "Rogue Integration Procedures",
    "description": "An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "439"
      }
    ],
    "prerequisites": [
      "Physical access to an integration facility that prepares the system before it is deployed at the victim location."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Advanced knowledge of the design of the system."
      },
      {
        "level": "High",
        "details": "Hardware creation and manufacture of replacement components."
      }
    ]
  },
  "528": {
    "name": "XML Flood",
    "description": "An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using a browser or an automated tool, an attacker records all instance of web services to process XML requests.",
        "techniques": [
          "Use an automated tool to record all instances of URLs to process XML requests.",
          "Use a browser to manually explore the website and analyze how the application processes XML requests."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "An adversary crafts input data that may have an adverse effect on the operation of the web service when the XML data sent to the service.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Launch a resource depletion attack] The attacker delivers a large number of XML messages to the target URLs found in the explore phase at a sufficiently rapid rate. It causes denial of service to the target application.",
        "techniques": [
          "Send a large number of crafted XML messages to the target URL."
        ]
      }
    ],
    "prerequisites": [
      "The target must receive and process XML transactions.",
      "An adverssary must possess the ability to generate a large amount of XML based messages to send to the target service."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Denial of service"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "770"
    ],
    "mitreAttack": [
      "T1499.002",
      "T1498.001"
    ]
  },
  "529": {
    "name": "Malware-Directed Internal Reconnaissance",
    "description": "Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have internal, logical access to the target network and system."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary must be able to obtain or develop, as well as place malicious software inside the target network/system."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ]
  },
  "53": {
    "name": "Postfix, Null Terminate, and Backslash",
    "description": "If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects postfix null byte(s) followed by a backslash to observe how the application handles them as input. The adversary is looking for areas where user input is placed in the middle of a string, and the null byte causes the application to stop processing the string at the end of the user input.",
        "techniques": [
          "Try different encodings for null such as \\0 or %00 followed by an encoding for the backslash character."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Remove data after null byte(s)] After determined entry points that are vulnerable, the adversary places a null byte(s) followed by a backslash such that they bypass an input filter and remove data after the null byte(s) in a way that is beneficial to them.",
        "techniques": [
          "If the input is a directory as part of a longer file path, add a null byte(s) followed by a backslash at the end of the input to try to traverse to the given directory."
        ]
      }
    ],
    "prerequisites": [
      "Null terminators are not properly handled by the filter."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "An adversary needs to understand alternate encodings, what the filter looks for and the data format acceptable to the target API"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "158",
      "172",
      "173",
      "74",
      "20",
      "697",
      "707"
    ]
  },
  "530": {
    "name": "Provide Counterfeit Component",
    "description": "An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "531"
      }
    ],
    "prerequisites": [
      "Advanced knowledge about the target system and sub-components."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop and manufacture malicious system components that resemble legitimate name-brand components."
      }
    ]
  },
  "531": {
    "name": "Hardware Component Substitution",
    "description": "An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "534"
      }
    ],
    "prerequisites": [
      "Physical access to the system or the integration facility where hardware components are kept."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop and manufacture malicious system components that perform the same functions and processes as their non-malicious counterparts."
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "532": {
    "name": "Altered Installed BIOS",
    "description": "An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "Advanced knowledge about the installed target system design.",
      "Advanced knowledge about the download and update installation processes.",
      "Access to the download and update system(s) used to deliver BIOS images."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop a malicious BIOS image with the original functionality as a normal BIOS image, but with added functionality that allows for later compromise and/or disruption."
      }
    ],
    "mitreAttack": [
      "T1495",
      "T1542.001"
    ]
  },
  "533": {
    "name": "Malicious Manual Software Update",
    "description": "An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "186"
      }
    ],
    "prerequisites": [
      "Advanced knowledge about the download and update installation processes.",
      "Advanced knowledge about the deployed system and its various software subcomponents and processes."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop malicious code that can be used on the victim's system while maintaining normal functionality."
      }
    ],
    "relatedWeaknesses": [
      "494"
    ]
  },
  "534": {
    "name": "Malicious Hardware Update",
    "description": "An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "440"
      }
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts."
      }
    ]
  },
  "535": {
    "name": "Malicious Gray Market Hardware",
    "description": "An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "531"
      }
    ],
    "prerequisites": [
      "Physical access to a gray market reseller's hardware components supply, or the ability to appear as a gray market reseller to the victim's buyer."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop and manufacture malicious hardware components that perform the same functions and processes as their non-malicious counterparts."
      }
    ]
  },
  "536": {
    "name": "Data Injected During Configuration",
    "description": "An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "176"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine configuration process] The adversary, through a previously compromised system, either remotely or physically, determines what the configuration process is. They look at configuration files, data files, and running processes on the system to identify areas where they could inject malicious data.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine when configuration occurs] The adversary needs to then determine when configuration or recalibration of a system occurs so they know when to inject malicious data.",
        "techniques": [
          "Look for a weekly update cycle or repeated update schedule.",
          "Insert a malicious process into the target system that notifies the adversary when configuration is occurring."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Determine malicious data to inject] By looking at the configuration process, the adversary needs to determine what malicious data they want to insert and where to insert it.",
        "techniques": [
          "Add false log data",
          "Change configuration files",
          "Change data files"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Inject malicious data] Right before, or during system configuration, the adversary injects the malicious data. This leads to the system behaving in a way that is beneficial to the adversary and is often followed by other attacks.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The attacker must have previously compromised the victim's systems or have physical access to the victim's systems.",
      "Advanced knowledge of software and hardware capabilities of a manufacturer's product."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to generate and inject false data into operational data into a system with the intent of causing the victim to alter the configuration of the system."
      }
    ],
    "relatedWeaknesses": [
      "284"
    ]
  },
  "537": {
    "name": "Infiltration of Hardware Development Environment",
    "description": "An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems).",
      "The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration.",
      "The adversary must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Intelligence about the manufacturer's operating environment and infrastructure."
      },
      {
        "level": "High",
        "details": "Ability to develop, deploy, and maintain a stealth malicious backdoor program remotely in what is essentially a hostile environment."
      },
      {
        "level": "High",
        "details": "Development skills to construct malicious attachments that can be used to exploit vulnerabilities in typical desktop applications or system configurations. The malicious attachments should be crafted well enough to bypass typical defensive systems (IDS, anti-virus, etc)"
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "538": {
    "name": "Open-Source Library Manipulation",
    "description": "Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine the relevant open-source code project to target] The adversary will make the selection based on various criteria:\n               ",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Develop a plan for malicious contribution] The adversary develops a plan to contribute malicious code, taking the following into consideration:\n               ",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute the plan for malicious contribution] Write the code to be contributed based on the plan and then submit the contribution. Multiple commits, possibly using multiple identities, will help obscure the attack. Monitor the contribution site to try to determine if the code has been uploaded to the target system.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Access to the open source code base being used by the manufacturer in a system being developed or currently deployed at a victim location."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Advanced knowledge about the inclusion and specific usage of an open source code project within system being targeted for infiltration."
      }
    ],
    "relatedWeaknesses": [
      "494",
      "829"
    ],
    "mitreAttack": [
      "T1195.001"
    ]
  },
  "539": {
    "name": "ASIC With Malicious Functionality",
    "description": "An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "The attacker must have working knowledge of some if not all of the components involved in the target system as well as the infrastructure and development environment of the manufacturer.",
      "Advanced knowledge about the ASIC installed within the target system."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Able to develop and manufacture malicious subroutines for an ASIC environment without degradation of existing functions and processes."
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "54": {
    "name": "Query System for Information",
    "description": "An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "116"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine parameters] Determine all user-controllable parameters of the application either by probing or by finding documentation",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause error condition] Inject each parameter with content that causes an error condition to manifest",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Modify parameters] Modify the content of each parameter according to observed error conditions",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Follow up attack] Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)",
        "techniques": null
      }
    ],
    "prerequisites": [
      "This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "209"
    ]
  },
  "540": {
    "name": "Overread Buffers",
    "description": "An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "123"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overread on. Adversaries often look for applications that accept user input and that perform manual memory management.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find attack vector] The adversary identifies an attack vector by looking for areas in the application where they can specify to read more data than is required.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Overread the buffer] The adversary provides input to the application that gets it to read past the bounds of a buffer, possibly revealing sensitive information that was not intended to be given to the adversary.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "125"
    ]
  },
  "541": {
    "name": "Application Fingerprinting",
    "description": "An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "224"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "relatedWeaknesses": [
      "204",
      "205",
      "208"
    ],
    "mitreAttack": [
      "T1592.002"
    ]
  },
  "542": {
    "name": "Targeted Malware",
    "description": "An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "549"
      },
      {
        "nature": "CanPrecede",
        "capecId": "662"
      }
    ],
    "mitreAttack": [
      "T1587.001",
      "T1027"
    ]
  },
  "543": {
    "name": "Counterfeit Websites",
    "description": "Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "194"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "mitreAttack": [
      "T1036.005"
    ]
  },
  "544": {
    "name": "Counterfeit Organizations",
    "description": "An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "194"
      }
    ],
    "prerequisites": [
      "None"
    ]
  },
  "545": {
    "name": "Pull Data from System Resources",
    "description": "An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "116"
      }
    ],
    "relatedWeaknesses": [
      "1239",
      "1243",
      "1258",
      "1266",
      "1272",
      "1278",
      "1323",
      "1258",
      "1330"
    ],
    "mitreAttack": [
      "T1005",
      "T1555.001"
    ]
  },
  "546": {
    "name": "Incomplete Data Deletion in a Multi-Tenant Environment",
    "description": "An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "545"
      }
    ],
    "prerequisites": [
      "The cloud provider must not assuredly delete part or all of the sensitive data for which they are responsible.The adversary must have the ability to interact with the system."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary requires the ability to traverse directory structure."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "284",
      "1266",
      "1272"
    ]
  },
  "547": {
    "name": "Physical Destruction of Device or Component",
    "description": "An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "607"
      }
    ]
  },
  "548": {
    "name": "Contaminate Resource",
    "description": "An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "607"
      }
    ],
    "prerequisites": [
      "The adversary needs to have real or fake classified/sensitive information to place on a system"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Knowledge of classification levels of systems"
      },
      {
        "level": "High",
        "details": "The ability to obtain a classified document or information"
      },
      {
        "level": "Low",
        "details": "The ability to fake a classified document"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ]
  },
  "549": {
    "name": "Local Execution of Code",
    "description": "An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "prerequisites": [
      "Knowledge of the target system's vulnerabilities that can be capitalized on with malicious code.The adversary must be able to place the malicious code on the target system."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "829"
    ]
  },
  "55": {
    "name": "Rainbow Table Password Cracking",
    "description": "An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "49"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine application's/system's password policy] Determine the password policies of the target application/system.",
        "techniques": [
          "Determine minimum and maximum allowed password lengths.",
          "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc.).",
          "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Obtain password hashes] An attacker gets access to the database table storing hashes of passwords or potentially just discovers a hash of an individual password.",
        "techniques": [
          "Obtain copy of database table or flat file containing password hashes (by breaking access controls, using SQL Injection, etc.)",
          "Obtain password hashes from platform-specific storage locations (e.g. Windows registry)",
          "Sniff network packets containing password hashes."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Run rainbow table-based password cracking tool] An attacker finds or writes a password cracking tool that uses a previously computed rainbow table for the right hashing algorithm. It helps if the attacker knows what hashing algorithm was used by the password system.",
        "techniques": [
          "Run rainbow table-based password cracking tool such as Ophcrack or RainbowCrack. Reduction function must depend on application's/system's password policy."
        ]
      }
    ],
    "prerequisites": [
      "Hash of the original password is available to the attacker. For a better chance of success, an attacker should have more than one hash of the original password, and ideally the whole table.",
      "Salt was not used to create the hash of the original password. Otherwise the rainbow tables have to be re-computed, which is very expensive and will make the attack effectively infeasible (especially if salt was added in iterations).",
      "The system uses one factor password based authentication."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "A variety of password cracking tools are available that can leverage a rainbow table. The more difficult part is to obtain the password hash(es) in the first place."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "261",
      "521",
      "262",
      "263",
      "654",
      "916",
      "308",
      "309"
    ],
    "mitreAttack": [
      "T1110.002"
    ]
  },
  "550": {
    "name": "Install New Service",
    "description": "When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1543"
    ]
  },
  "551": {
    "name": "Modify Existing Service",
    "description": "When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "284",
      "522"
    ],
    "mitreAttack": [
      "T1543"
    ]
  },
  "552": {
    "name": "Install Rootkit ",
    "description": "An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1014",
      "T1542.003",
      "T1547.006"
    ]
  },
  "554": {
    "name": "Functionality Bypass",
    "description": "An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedWeaknesses": [
      "424",
      "1299"
    ]
  },
  "555": {
    "name": "Remote Services with Stolen Credentials",
    "description": "This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      }
    ],
    "relatedWeaknesses": [
      "522",
      "308",
      "309",
      "294",
      "263",
      "262",
      "521"
    ],
    "mitreAttack": [
      "T1021",
      "T1114.002",
      "T1133"
    ]
  },
  "556": {
    "name": "Replace File Extension Handlers",
    "description": "When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1546.001"
    ]
  },
  "557": {
    "name": "DEPRECATED: Schedule Software To Run",
    "description": "This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack."
  },
  "558": {
    "name": "Replace Trusted Executable",
    "description": "An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1505.005",
      "T1546.008"
    ]
  },
  "559": {
    "name": "Orbital Jamming",
    "description": "In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "601"
      }
    ],
    "prerequisites": [
      "This attack requires the knowledge of the satellite's coordinates for targeting."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "56": {
    "name": "DEPRECATED: Removing/short-circuiting 'guard logic'",
    "description": "This attack pattern has been deprecated as it is a duplicate of CAPEC-207 : Removing Important Client Functionality. Please refer to this other pattern going forward."
  },
  "560": {
    "name": "Use of Known Domain Credentials",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "151"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.",
        "techniques": [
          "An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.",
          "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
          "An adversary conducts a sniffing attack to steal credentials as they are transmitted.",
          "An adversary gains access to a database and exfiltrates password hashes.",
          "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.",
        "techniques": [
          "Determine minimum and maximum allowed password lengths.",
          "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
          "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account)."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Attempt authentication] Try each credential until the target grants access.",
        "techniques": [
          "Manually or automatically enter each credential through the target's interface."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within a system or application",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.",
        "techniques": null
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.",
      "The system/application does not have a sound password policy that is being enforced.",
      "The system/application does not implement an effective password throttling mechanism.",
      "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary obtains a known credential, leveraging it is trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "307",
      "308",
      "309",
      "262",
      "263",
      "654",
      "1273"
    ],
    "mitreAttack": [
      "T1078"
    ]
  },
  "561": {
    "name": "Windows Admin Shares with Stolen Credentials",
    "description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "653"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "165"
      },
      {
        "nature": "CanPrecede",
        "capecId": "549"
      },
      {
        "nature": "CanPrecede",
        "capecId": "545"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Acquire known Windows administrator credentials] The adversary must obtain known Windows administrator credentials in order to access the administrative network shares.",
        "techniques": [
          "An adversary purchases breached Windows administrator credentials from the dark web.",
          "An adversary leverages a key logger or phishing attack to steal administrator credentials as they are provided.",
          "An adversary conducts a sniffing attack to steal Windows administrator credentials as they are transmitted.",
          "An adversary gains access to a Windows domain system/files and exfiltrates Windows administrator password hashes.",
          "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows administrator credentials."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt domain authentication] Try each Windows administrator credential against the hidden network shares until the target grants access.",
        "techniques": [
          "Manually or automatically enter each administrator credential through the target's interface."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Malware Execution] An adversary can remotely execute malware within the administrative network shares to infect other systems within the domain.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can remotely obtain sensitive data contained within the administrative network shares.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application is connected to the Windows domain.",
      "The target administrative share allows remote use of local admin credentials to log into domain systems.",
      "The adversary possesses a list of known Windows administrator credentials that exist on the target domain."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary obtains a known Windows credential, leveraging it is trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "308",
      "309",
      "294",
      "263",
      "262",
      "521"
    ],
    "mitreAttack": [
      "T1021.002"
    ]
  },
  "562": {
    "name": "Modify Shared File",
    "description": "An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "17"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1080"
    ]
  },
  "563": {
    "name": "Add Malicious File to Shared Webroot",
    "description": "An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "17"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ]
  },
  "564": {
    "name": "Run Software at Logon",
    "description": "Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1037",
      "T1543.001",
      "T1543.004",
      "T1547"
    ]
  },
  "565": {
    "name": "Password Spraying",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "49"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target's password policy] Determine the password policies of the target system/application.",
        "techniques": [
          "Determine minimum and maximum allowed password lengths.",
          "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
          "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks)."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Select passwords] Pick the passwords to be used in the attack (e.g. commonly used passwords, passwords tailored to individual users, etc.)",
        "techniques": [
          "Select passwords based on common use or a particular user's additional details.",
          "Select passwords based on the target's password complexity policies."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Brute force password] Given the finite space of possible passwords dictated by information determined in the previous steps, try each password for all known user accounts until the target grants access.",
        "techniques": [
          "Manually or automatically enter the first password for each known user account through the target's interface. In most systems, start with the shortest and simplest possible passwords, because most users tend to select such passwords if allowed to do so.",
          "Iterate through the remaining passwords for each known user account."
        ]
      }
    ],
    "prerequisites": [
      "The system/application uses one factor password based authentication.",
      "The system/application does not have a sound password policy that is being enforced.",
      "The system/application does not implement an effective password throttling mechanism.",
      "The adversary possesses a list of known user accounts on the target system/application."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "A Password Spraying attack is very straightforward. A variety of password cracking tools are widely available."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "521",
      "262",
      "263",
      "654",
      "307",
      "308",
      "309"
    ],
    "mitreAttack": [
      "T1110.003"
    ]
  },
  "566": {
    "name": "DEPRECATED: Dump Password Hashes",
    "description": "This CAPEC has been deprecated because of is not directly related to a weakness, social engineering, supply chains, or a physical-based attack."
  },
  "567": {
    "name": "DEPRECATED: Obtain Data via Utilities",
    "description": "This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack."
  },
  "568": {
    "name": "Capture Credentials via Keylogger",
    "description": "An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "569"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine which user's credentials to capture] Since this is a more targeted attack, an adversary will first identify a particular user they wish the capture the credentials of.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Deploy keylogger] Once a user is identified, an adversary will deploy a keylogger to the user's system in one of many ways.",
        "techniques": [
          "Send a phishing email with a malicious attachment that installs a keylogger on a user's system",
          "Conceal a keylogger behind fake software and get the user to download the software",
          "Get a user to click on a malicious URL that directs them to a webpage that will install a keylogger without their knowledge",
          "Gain access to the user's system through a vulnerability and manually install a keylogger"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Record keystrokes] Once the keylogger is deployed on the user's system, the adversary will record keystrokes over a period of time.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Analyze data and determine credentials] Using the captured keystrokes, the adversary will be able to determine the credentials of the user.",
        "techniques": [
          "Search for repeated sequences that are following by the enter key",
          "Search for repeated sequences that are not found in a dictionary",
          "Search for several backspaces in a row. This could indicate a mistyped password. The correct password can then be inferred using the whole key sequence"
        ]
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Use found credentials] After the adversary has found the credentials for the target user, they will then use them to gain access to a system in order to perform some follow-up attack",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The ability to install the keylogger, either in person or remote."
    ],
    "mitreAttack": [
      "T1056.001"
    ]
  },
  "569": {
    "name": "Collect Data as Provided by Users",
    "description": "An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "116"
      }
    ],
    "mitreAttack": [
      "T1056"
    ]
  },
  "57": {
    "name": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
    "description": "This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "157"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find a REST-style application that uses SSL] The adversary must first find a REST-style application that uses SSL to target. Because this attack is easier to carry out from inside of a server network, it is likely that an adversary could have inside knowledge of how services operate.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Insert a listener to sniff client-server communication] The adversary inserts a listener that must exist beyond the point where SSL is terminated. This can be placed on the client side if it is believed that sensitive information is being sent to the client as a response, although most often the listener will be placed on the server side to listen for client authentication information.",
        "techniques": [
          "Run wireshark or tcpdump on a device that is on the inside of a firewall, load balancer, or router of a network and capture traffic after SSL has been terminated"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Gather information passed in the clear] If developers have not hashed or encrypted data sent in the sniffed request, the adversary will be able to read this data in the clear. Most commonly, they will now have a username or password that they can use to submit requests to the web service just as an authorized user",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Opportunity to intercept must exist beyond the point where SSL is terminated.",
      "The adversary must be able to insert a listener actively (proxying the communication) or passively (sniffing the communication) in the client-server communication path."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To insert a network sniffer or other listener into the communication stream"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300",
      "287",
      "693"
    ],
    "mitreAttack": [
      "T1040"
    ]
  },
  "570": {
    "name": "DEPRECATED: Signature-Based Avoidance",
    "description": "This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack."
  },
  "571": {
    "name": "Block Logging to Central Repository",
    "description": "\n            \n         ",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "161"
      }
    ],
    "mitreAttack": [
      "T1562.002",
      "T1562.002",
      "T1562.006",
      "T1562.008"
    ]
  },
  "572": {
    "name": "Artificially Inflate File Sizes",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "165"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "mitreAttack": [
      "T1027.001"
    ]
  },
  "573": {
    "name": "Process Footprinting",
    "description": "An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1057"
    ]
  },
  "574": {
    "name": "Services Footprinting",
    "description": "An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include \"sc\" and \"tasklist/svc\" using Tasklist, and \"net start\" using Net.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1007"
    ]
  },
  "575": {
    "name": "Account Footprinting",
    "description": "An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: \"net user\" and \"dsquery\".",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1087"
    ]
  },
  "576": {
    "name": "Group Permission Footprinting",
    "description": "An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is \"net localgroup\".",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1069",
      "T1615"
    ]
  },
  "577": {
    "name": "Owner Footprinting",
    "description": "An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is \"dir /A ntuser.dat\". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have gained access to the target system via physical or logical means in order to carry out this attack.",
      "Administrator permissions are required to view the home folder of other users."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1033"
    ]
  },
  "578": {
    "name": "Disable Security Software",
    "description": "An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "176"
      }
    ],
    "prerequisites": [
      "The adversary must have the capability to interact with the configuration of the targeted system."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "284"
    ],
    "mitreAttack": [
      "T1556.006",
      "T1562.001",
      "T1562.002",
      "T1562.004",
      "T1562.007",
      "T1562.008",
      "T1562.009"
    ]
  },
  "579": {
    "name": "Replace Winlogon Helper DLL",
    "description": "Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "relatedWeaknesses": [
      "15"
    ],
    "mitreAttack": [
      "T1547.004"
    ]
  },
  "58": {
    "name": "Restful Privilege Elevation",
    "description": "An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "1"
      },
      {
        "nature": "ChildOf",
        "capecId": "180"
      }
    ],
    "prerequisites": [
      "The attacker needs to be able to identify HTTP Get URLs. The Get methods must be set to call applications that perform operations other than get such as update and delete."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "It is relatively straightforward to identify an HTTP Get method that changes state on the server side and executes against an over-privileged system interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "267",
      "269"
    ]
  },
  "580": {
    "name": "System Footprinting",
    "description": "An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary must have logical access to the target network and system."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary needs to know basic linux commands."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "204",
      "205",
      "208"
    ],
    "mitreAttack": [
      "T1082"
    ]
  },
  "581": {
    "name": "Security Software Footprinting",
    "description": "Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "580"
      }
    ],
    "mitreAttack": [
      "T1518.001"
    ]
  },
  "582": {
    "name": "Route Disabling",
    "description": "An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an \"Internet kill switch\" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "607"
      }
    ],
    "prerequisites": [
      "The adversary requires knowledge of and access to network route."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "583": {
    "name": "Disabling Network Hardware",
    "description": "In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "582"
      }
    ],
    "prerequisites": [
      "The adversary requires physical access to the targeted communications equipment (networking devices, cables, etc.), which may be spread over a wide area."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "584": {
    "name": "BGP Route Disabling",
    "description": "An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "582"
      }
    ],
    "prerequisites": [
      "The adversary must have control of a router that can modify, drop, or introduce spoofed BGP updates.The adversary can convince"
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "585": {
    "name": "DNS Domain Seizure",
    "description": "In this attack pattern, an adversary influences a target's web-hosting company to disable a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "582"
      }
    ],
    "prerequisites": [
      "This attack pattern requires that the adversary has cooperation from the registrar of the target domain."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "586": {
    "name": "Object Injection",
    "description": "An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "prerequisites": [
      "The target application must unserialize data before validation."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "502"
    ]
  },
  "587": {
    "name": "Cross Frame Scripting (XFS)",
    "description": "This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "103"
      }
    ],
    "prerequisites": [
      "The user's browser must have vulnerabilities in its implementation of the same-origin policy. It allows certain data in a loaded page to originate from different servers/domains."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1021"
    ]
  },
  "588": {
    "name": "DOM-Based XSS",
    "description": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "63"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for DOM-based XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.",
        "techniques": [
          "Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
          "Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.",
        "techniques": [
          "Change a URL parameter to include a malicious script tag.",
          "Add a URL fragment to alter the value of the expected Document object URL.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "An application that leverages a client-side web browser with scripting enabled.",
      "An application that manipulates the DOM via client-side scripting.",
      "An application that failS to adequately sanitize or encode untrusted input."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization",
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "79",
      "20",
      "83"
    ]
  },
  "589": {
    "name": "DNS Blocking",
    "description": "An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "603"
      }
    ],
    "prerequisites": [
      "This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300"
    ]
  },
  "59": {
    "name": "Session Credential Falsification through Prediction",
    "description": "This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "196"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find Session IDs] The attacker interacts with the target host and finds that session IDs are used to authenticate users.",
        "techniques": [
          "An attacker makes many anonymous connections and records the session IDs assigned.",
          "An attacker makes authorized connections and records the session tokens or credentials issued."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Characterize IDs] The attacker studies the characteristics of the session ID (size, format, etc.). As a results the attacker finds that legitimate session IDs are predictable.",
        "techniques": [
          "Cryptanalysis. The attacker uses cryptanalysis to determine if the session IDs contain any cryptographic protections.",
          "Pattern tests. The attacker looks for patterns (odd/even, repetition, multiples, or other arithmetic relationships) between IDs",
          "Comparison against time. The attacker plots or compares the issued IDs to the time they were issued to check for correlation."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Match issued IDs] The attacker brute forces different values of session ID and manages to predict a valid session ID.",
        "techniques": [
          "The attacker models the session ID algorithm enough to produce a compatible session IDs, or just one match."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use matched Session ID] The attacker uses the falsified session ID to access the target system.",
        "techniques": [
          "The attacker loads the session ID into their web browser and browses to restricted data or functionality.",
          "The attacker loads the session ID into their network communications and impersonates a legitimate user to gain access to data or functionality."
        ]
      }
    ],
    "prerequisites": [
      "The target host uses session IDs to keep track of the users.",
      "Session IDs are used to control access to resources.",
      "The session IDs used by the target host are predictable. For example, the session IDs are generated using predictable information (e.g., time)."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "There are tools to brute force session ID. Those tools require a low level of knowledge."
      },
      {
        "level": "Medium",
        "details": "Predicting Session ID may require more computation work which uses advanced analysis such as statistical analysis."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "290",
      "330",
      "331",
      "346",
      "488",
      "539",
      "200",
      "6",
      "285",
      "384",
      "693"
    ]
  },
  "590": {
    "name": "IP Address Blocking",
    "description": "An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "603"
      }
    ],
    "prerequisites": [
      "This attack requires the ability to conduct deep packet inspection with an In-Path device that can drop the targeted traffic and/or connection."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300"
    ]
  },
  "591": {
    "name": "Reflected XSS",
    "description": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "63"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for reflected XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
          "Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter to include a malicious script tag.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "An application that leverages a client-side web browser with scripting enabled.",
      "An application that fail to adequately sanitize or encode untrusted input."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Requires the ability to write malicious scripts and embed them into HTTP requests."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization",
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "79"
    ]
  },
  "592": {
    "name": "Stored XSS",
    "description": "An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently \"stored\" within the data storage of a vulnerable web application as valid input.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "63"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for stored user-controllable inputs] Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application. The adversary is looking for areas where user input is stored, such as user profiles, shopping carts, file managers, forums, blogs, and logs.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for stored XSS vulnerability] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Use a list of XSS probe strings to submit script in input fields that could be stored by the web application. If possible, the probe strings contain a unique identifier so they can be queried for after submitting to see if they are stored.",
          "Use a list of HTML special characters to submit in input fields that could be stored by the web application and check if they were properly encoded, replaced, or filtered out."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Store malicious XSS content] Once the adversary has determined which stored locations are vulnerable to XSS, they will interact with the web application to store the malicious content. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.",
        "techniques": [
          "Store a malicious script on a page that will execute when viewed by the victim.",
          "Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to view stored content] In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.",
        "techniques": [
          "Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.",
          "Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum."
        ]
      }
    ],
    "prerequisites": [
      "An application that leverages a client-side web browser with scripting enabled.",
      "An application that fails to adequately sanitize or encode untrusted input.",
      "An application that stores information provided by the user in data storage of some kind."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Requires the ability to write scripts of varying complexity and to inject them through user controlled fields within the application."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization",
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "79"
    ]
  },
  "593": {
    "name": "Session Hijacking",
    "description": "This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "21"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Discover Existing Session Token] Through varrying means, an adversary will discover and store an existing session token for some other authenticated user session.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Insert Found Session Token] The attacker attempts to insert a found session token into communication with the targeted application to confirm viability for exploitation.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Session Token Exploitation] The attacker leverages the captured session token to interact with the targeted application in a malicious fashion, impersonating the victim.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An application that leverages sessions to perform authentication."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Exploiting a poorly protected identity token is a well understood attack with many helpful resources available."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "287"
    ],
    "mitreAttack": [
      "T1185",
      "T1550.001",
      "T1563"
    ]
  },
  "594": {
    "name": "Traffic Injection",
    "description": "An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.",
    "prerequisites": [
      "The target application must leverage an open communications channel.",
      "The channel on which the target communicates must be vulnerable to interception (e.g., adversary in the middle attack - CAPEC-94)."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "940"
    ]
  },
  "595": {
    "name": "Connection Reset",
    "description": "In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "594"
      }
    ],
    "prerequisites": [
      "This attack requires the ability to monitor the target's network connection."
    ],
    "relatedWeaknesses": [
      "940"
    ]
  },
  "596": {
    "name": "TCP RST Injection",
    "description": "An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "595"
      }
    ],
    "prerequisites": [
      "An On/In Path Device"
    ],
    "relatedWeaknesses": [
      "940"
    ]
  },
  "597": {
    "name": "Absolute Path Traversal",
    "description": "An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as \"..\" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "126"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Fingerprinting of the operating system] In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.",
        "techniques": [
          "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
          "TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
          "Induce errors to find informative error messages"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Survey application] Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.",
        "techniques": [
          "Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.",
          "Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Attempt variations on input parameters] Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.",
        "techniques": [
          "Access common files in root directories such as \"/bin\", \"/boot\", \"/lib\", or \"/home\"",
          "Access a specific drive letter or windows volume letter by specifying \"C:dirname\" for example",
          "Access a known Windows UNC share by specifying \"\\\\UNC\\share\\name\" for example"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Access, modify, or execute arbitrary files.] An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.",
        "techniques": [
          "Manipulate file and its path by injecting absolute path sequences (e.g. \"/home/file.txt\").",
          "Download files, modify files, or try to execute shell commands (with binary files)."
        ]
      }
    ],
    "prerequisites": [
      "The target must leverage and access an underlying file system."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Simple command line attacks."
      },
      {
        "level": "Medium",
        "details": "Programming attacks."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Confidentiality",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "36"
    ]
  },
  "598": {
    "name": "DNS Spoofing",
    "description": "An adversary sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A record) response to a target's route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the target's DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the target's infrastructure uses.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "194"
      }
    ],
    "prerequisites": [
      "On/In Path Device"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To distribute email"
      }
    ]
  },
  "599": {
    "name": "Terrestrial Jamming",
    "description": "In this attack pattern, the adversary transmits disruptive signals in the direction of the target's consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "195"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "6": {
    "name": "Argument Injection",
    "description": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "137"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Discovery of potential injection vectors] Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).",
        "techniques": [
          "Manually cover the application and record the possible places where arguments could be passed into external systems.",
          "Use a spider, for web applications, to create a list of URLs and associated inputs."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[1. Attempt variations on argument content] Possibly using an automated tool, the attacker will perform injection variations of the arguments.",
        "techniques": [
          "Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).",
          "Use a proxy tool to record results, error messages and/or log if accessible."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Abuse of the application] The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.",
        "techniques": [
          "Manually inject specific payload into targeted argument."
        ]
      }
    ],
    "prerequisites": [
      "Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.",
      "Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "74",
      "146",
      "184",
      "78",
      "185",
      "697"
    ]
  },
  "60": {
    "name": "Reusing Session IDs (aka Session Replay)",
    "description": "This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "593"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The attacker interacts with the target host and finds that session IDs are used to authenticate users.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "The attacker steals a session ID from a valid user.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "The attacker tries to use the stolen session ID to gain access to the system with the privileges of the session ID's original owner.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target host uses session IDs to keep track of the users.",
      "Session IDs are used to control access to resources.",
      "The session IDs used by the target host are not well protected from session theft."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "If an attacker can steal a valid session ID, they can then try to be authenticated with that stolen session ID."
      },
      {
        "level": "Medium",
        "details": "More sophisticated attack can be used to hijack a valid session from a user and spoof a legitimate user by reusing their valid session ID."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "294",
      "290",
      "346",
      "384",
      "488",
      "539",
      "200",
      "285",
      "664",
      "732"
    ],
    "mitreAttack": [
      "T1134.001",
      "T1550.004"
    ]
  },
  "600": {
    "name": "Credential Stuffing",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Acquire known credentials] The adversary must obtain known credentials in order to access the target system, application, or service.",
        "techniques": [
          "An adversary purchases breached username/password combinations or leaked hashed passwords from the dark web.",
          "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
          "An adversary conducts a sniffing attack to steal credentials as they are transmitted.",
          "An adversary gains access to a database and exfiltrates password hashes.",
          "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine target's password policy] Determine the password policies of the target system/application to determine if the known credentials fit within the specified criteria.",
        "techniques": [
          "Determine minimum and maximum allowed password lengths.",
          "Determine format of allowed passwords (whether they are required or allowed to contain numbers, special characters, etc., or whether they are allowed to contain words from the dictionary).",
          "Determine account lockout policy (a strict account lockout policy will prevent brute force attacks if multiple passwords are known for a single user account)."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Attempt authentication] Try each username/password combination until the target grants access.",
        "techniques": [
          "Manually or automatically enter each username/password combination through the target's interface."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system or to laterally move within a system or application",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Spoofing] Malicious data can be injected into the target system or into a victim user's system by an adversary. The adversary can also pose as a legitimate user to perform social engineering attacks.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can obtain sensitive data contained within the system or application.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application uses one factor password based authentication, SSO, and/or cloud-based authentication.",
      "The system/application does not have a sound password policy that is being enforced.",
      "The system/application does not implement an effective password throttling mechanism.",
      "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "A Credential Stuffing attack is very straightforward."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "307",
      "308",
      "309",
      "262",
      "263",
      "654"
    ],
    "mitreAttack": [
      "T1110.004"
    ]
  },
  "601": {
    "name": "Jamming",
    "description": "An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "607"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "602": {
    "name": "DEPRECATED: Degradation",
    "description": "This attack pattern has been deprecated."
  },
  "603": {
    "name": "Blockage",
    "description": "An adversary blocks the delivery of an important system resource causing the system to fail or stop working.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "607"
      }
    ],
    "prerequisites": [
      "This attack pattern requires knowledge of where important system resources are logically located as well as how they operate."
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "604": {
    "name": "Wi-Fi Jamming",
    "description": "In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "601"
      }
    ],
    "prerequisites": [
      "Lack of anti-jam features in 802.11",
      "Lack of authentication on deauthentication/disassociation packets on 802.11-based networks"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "This attack can be performed by low capability attackers with freely available tools. Commercial tools are also available that can target select networks or all WiFi networks within a range of several miles."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ]
  },
  "605": {
    "name": "Cellular Jamming",
    "description": "In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "601"
      }
    ],
    "prerequisites": [
      "Lack of anti-jam features in cellular technology (2G, 3G, 4G, LTE)"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "This attack can be performed by low capability attackers with commercially available tools."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ]
  },
  "606": {
    "name": "Weakening of Cellular Encryption",
    "description": "An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "620"
      }
    ],
    "prerequisites": [
      "Cellular devices that allow negotiating security modes to facilitate backwards compatibility and roaming on legacy networks."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Adversaries can purchase and implement rogue BTS stations at a cost effective rate, and can push a mobile device to downgrade to a non-secure cellular protocol like 2G over GSM or CDMA."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "757"
    ]
  },
  "607": {
    "name": "Obstruction",
    "description": "An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.",
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ]
  },
  "608": {
    "name": "Cryptanalysis of Cellular Encryption",
    "description": "The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "97"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Adversaries can rent commercial supercomputer time globally to conduct cryptanalysis on encrypted data captured from mobile devices. Foreign governments have their own cryptanalysis technology and capabilities. Commercial cellular standards for encryption (GSM and CDMA) are also subject to adversary cryptanalysis."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "327"
    ]
  },
  "609": {
    "name": "Cellular Traffic Intercept",
    "description": "Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "157"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Adversaries can purchase hardware and software solutions, or create their own solutions, to capture/intercept cellular radio traffic. The cost of a basic Base Transceiver Station (BTS) to broadcast to local mobile cellular radios in mobile devices has dropped to very affordable costs. The ability of commercial cellular providers to monitor for \"rogue\" BTS stations is poor in many areas and it is assumed that \"rogue\" BTS stations exist in urban areas."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "311"
    ],
    "mitreAttack": [
      "T1111"
    ]
  },
  "61": {
    "name": "Session Fixation",
    "description": "The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "593"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Setup the Attack] Setup a session: The attacker has to setup a trap session that provides a valid session identifier, or select an arbitrary identifier, depending on the mechanism employed by the application. A trap session is a dummy session established with the application by the attacker and is used solely for the purpose of obtaining valid session identifiers. The attacker may also be required to periodically refresh the trap session in order to obtain valid session identifiers.",
        "techniques": [
          "The attacker chooses a predefined identifier that they know.",
          "The attacker creates a trap session for the victim."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attract a Victim] Fixate the session: The attacker now needs to transfer the session identifier from the trap session to the victim by introducing the session identifier into the victim's browser. This is known as fixating the session. The session identifier can be introduced into the victim's browser by leveraging cross site scripting vulnerability, using META tags or setting HTTP response headers in a variety of ways.",
        "techniques": [
          "Attackers can put links on web sites (such as forums, blogs, or comment forms).",
          "Attackers can establish rogue proxy servers for network protocols that give out the session ID and then redirect the connection to the legitimate service.",
          "Attackers can email attack URLs to potential victims through spam and phishing techniques."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Abuse the Victim's Session] Takeover the fixated session: Once the victim has achieved a higher level of privilege, possibly by logging into the application, the attacker can now take over the session using the fixated session identifier.",
        "techniques": [
          "The attacker loads the predefined session ID into their browser and browses to protected data or functionality.",
          "The attacker loads the predefined session ID into their software and utilizes functionality with the rights of the victim."
        ]
      }
    ],
    "prerequisites": [
      "Session identifiers that remain unchanged when the privilege levels change.",
      "Permissive session management mechanism that accepts random user-generated session identifiers",
      "Predictable session identifiers"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Only basic skills are required to determine and fixate session identifiers in a user's browser. Subsequent attacks may require greater skill levels depending on the attackers' motives."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "384",
      "664",
      "732"
    ]
  },
  "610": {
    "name": "Cellular Data Injection",
    "description": "Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "240"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Often achieved by nation states in conjunction with commercial cellular providers to conduct cellular traffic intercept and possible traffic injection."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ]
  },
  "611": {
    "name": "BitSquatting",
    "description": "An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      },
      {
        "nature": "CanPrecede",
        "capecId": "543"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.",
        "techniques": [
          "Research popular or high traffic websites."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the BitSquatted URL.",
        "techniques": [
          "Register the BitSquatted domain."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Wait for a user to visit the domain] Finally, the adversary simply waits for a user to be unintentionally directed to the BitSquatted domain.",
        "techniques": [
          "Simply wait for an error in memory to occur, redirecting the user to the malicious domain."
        ]
      }
    ],
    "prerequisites": [
      "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries must be able to register DNS hostnames/URL’s."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Other"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "612": {
    "name": "WiFi MAC Address Tracking",
    "description": "In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Open source and commercial software tools are available and several commercial advertising companies routinely set up tools to collect and monitor MAC addresses."
      }
    ],
    "relatedWeaknesses": [
      "201",
      "300"
    ]
  },
  "613": {
    "name": "WiFi SSID Tracking",
    "description": "In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Open source and commercial software tools are available and open databases of known WiFi SSID addresses are available online."
      }
    ],
    "relatedWeaknesses": [
      "201",
      "300"
    ]
  },
  "614": {
    "name": "Rooting SIM Cards",
    "description": "SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "186"
      }
    ],
    "prerequisites": [
      "A SIM card that relies on the DES cipher."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "This is a sophisticated attack, but detailed techniques are published in open literature."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "327"
    ]
  },
  "615": {
    "name": "Evil Twin Wi-Fi Attack",
    "description": "Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to use \"adversary-in-the-middle\" (CAPEC-94) for all communications.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300"
    ]
  },
  "616": {
    "name": "Establish Rogue Location",
    "description": "An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "154"
      },
      {
        "nature": "CanPrecede",
        "capecId": "691"
      }
    ],
    "prerequisites": [
      "A resource is expected to available to the user."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries can often purchase low-cost technology to implement rogue access points."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1036.005"
    ]
  },
  "617": {
    "name": "Cellular Rogue Base Station",
    "description": "In this attack scenario, the attacker imitates a cellular base station with their own \"rogue\" base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      }
    ],
    "prerequisites": [
      "None"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "This technique has been demonstrated by amateur hackers and commercial tools and open source projects are available to automate the attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ]
  },
  "618": {
    "name": "Cellular Broadcast Message Request",
    "description": "In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "prerequisites": [
      "The attacker must have knowledge of the target’s mobile phone number."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Open source and commercial tools are available for this attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Other"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "201"
    ]
  },
  "619": {
    "name": "Signal Strength Tracking",
    "description": "In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "292"
      }
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Commercial tools are available."
      }
    ],
    "relatedWeaknesses": [
      "201"
    ]
  },
  "62": {
    "name": "Cross Site Request Forgery",
    "description": "An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply \"riding\" the existing session cookie.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "21"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Explore target website] The attacker first explores the target website to determine pieces of functionality that are of interest to them (e.g. money transfers). The attacker will need a legitimate user account on the target website. It would help to have two accounts.",
        "techniques": [
          "Use web application debugging tool such as WebScarab, Tamper Data or TamperIE to analyze the information exchanged between the client and the server",
          "Use network sniffing tool such as Wireshark to analyze the information exchanged between the client and the server",
          "View HTML source of web pages that contain links or buttons that perform actions of interest."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create a link that when clicked on, will execute the interesting functionality.] The attacker needs to create a link that will execute some interesting functionality such as transfer money, change a password, etc.",
        "techniques": [
          "Create a GET request containing all required parameters (e.g. https://www.somebank.com/members/transfer.asp?to=012345678901\u0026amt=10000)",
          "Create a form that will submit a POST request (e.g. \u003cform method=\"POST\" action=\"https://www.somebank.com/members/transfer.asp\"\u003e\u003cinput type=\"hidden\" Name=\"to\" value=\"012345678901\"/\u003e\u003cinput type=\"hidden\" Name=\"amt\" value=\"10000\"/\u003e\u003cinput type=\"submit\" src=\"clickhere.jpg\"/\u003e\u003c/form\u003e"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Convince user to click on link] Finally, the attacker needs to convince a user that is logged into the target website to click on a link to execute the CSRF attack.",
        "techniques": [
          "Execute a phishing attack and send the user an e-mail convincing them to click on a link.",
          "Execute a stored XSS attack on a website to permanently embed the malicious link into the website.",
          "Execute a stored XSS attack on a website where an XMLHTTPRequest object will automatically execute the attack as soon as a user visits the page. This removes the step of convincing a user to click on a link.",
          "Include the malicious link on the attackers' own website where the user may have to click on the link, or where an XMLHTTPRequest object may automatically execute the attack when a user visits the site."
        ]
      }
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to figure out the exact invocation of the targeted malicious action and then craft a link that performs the said action. Having the user click on such a link is often accomplished by sending an email or posting such a link to a bulletin board or the likes."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "352",
      "306",
      "664",
      "732",
      "1275"
    ]
  },
  "620": {
    "name": "Drop Encryption Level",
    "description": "An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "212"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "757"
    ],
    "mitreAttack": [
      "T1600"
    ]
  },
  "621": {
    "name": "Analysis of Packet Timing and Sizes",
    "description": "An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "189"
      }
    ],
    "prerequisites": [
      "Use of untrusted communication paths enables an attacker to intercept and log communications, including metadata such as packet timing and sizes."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "These attacks generally require sophisticated machine learning techniques and require traffic capture as a prerequisite."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "201"
    ]
  },
  "622": {
    "name": "Electromagnetic Side-Channel Attack",
    "description": "In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "189"
      }
    ],
    "prerequisites": [
      "Proximal access to the device."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Sophisticated attack, but detailed techniques published in the open literature."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "201"
    ]
  },
  "623": {
    "name": "Compromising Emanations Attack",
    "description": "Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "189"
      }
    ],
    "prerequisites": [
      "Proximal access to the device."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Sophisticated attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "201"
    ]
  },
  "624": {
    "name": "Hardware Fault Injection",
    "description": "The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "prerequisites": [
      "Physical access to the system",
      "The adversary must be cognizant of where fault injection vulnerabilities exist in the system in order to leverage them for exploitation."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Adversaries require non-trivial technical skills to create and implement fault injection attacks. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data",
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1247",
      "1248",
      "1256",
      "1319",
      "1332",
      "1334",
      "1338",
      "1351"
    ]
  },
  "625": {
    "name": "Mobile Device Fault Injection",
    "description": "Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "624"
      }
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Adversaries require non-trivial technical skills to create and implement fault injection attacks on mobile devices. Although this style of attack has become easier (commercial equipment and training classes are available to perform these attacks), they usual require significant setup and experimentation time during which physical access to the device is required. This prerequisite makes the attack challenging to perform (assuming that physical security countermeasures and monitoring are in place)."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1247",
      "1248",
      "1256",
      "1319",
      "1332",
      "1334",
      "1338",
      "1351"
    ]
  },
  "626": {
    "name": "Smudge Attack",
    "description": "Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "395"
      }
    ],
    "prerequisites": [
      "The attacker must have physical access to the device."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker must know how to make use of these smudges."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ]
  },
  "627": {
    "name": "Counterfeit GPS Signals",
    "description": "An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "148"
      }
    ],
    "prerequisites": [
      "The target must be relying on valid GPS signal to perform critical operations."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The ability to spoof GPS signals is not trival."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ]
  },
  "628": {
    "name": "Carry-Off GPS Attack",
    "description": "A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "627"
      }
    ],
    "prerequisites": [
      "The target must be relying on valid GPS signal to perform critical operations."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "This attack requires advanced knoweldge in GPS technology."
      }
    ]
  },
  "629": {
    "name": "DEPRECATED: Unauthorized Use of Device Resources",
    "description": "This attack pattern has been deprecated."
  },
  "63": {
    "name": "Cross-Site Scripting (XSS)",
    "description": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "242"
      },
      {
        "nature": "CanPrecede",
        "capecId": "107"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS vulnerability] The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs.",
          "Use a list of XSS probe strings to inject script into UI entry fields. If possible, the probe strings contain a unique identifier.",
          "Use a list of XSS probe strings to inject script into resources accessed by the application. If possible, the probe strings contain a unique identifier."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Steal session IDs, credentials, page content, etc.] As the attacker succeeds in exploiting the vulnerability, they can choose to steal user's credentials in order to reuse or to analyze them later on.",
        "techniques": [
          "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and sends document information to the attacker.",
          "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute appropriately."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Forceful browsing] When the attacker targets the current application or another one (through CSRF vulnerabilities), the user will then be the one who perform the attacks without being aware of it. These attacks are mostly targeting application logic flaws, but it can also be used to create a widespread attack against a particular website on the user's current network (Internet or not).",
        "techniques": [
          "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and performs actions on the same web site",
          "Develop malicious JavaScript that injected through vectors identified during the Experiment Phase and takes commands from an attacker's server and then causes the browser to execute request to other web sites (especially the web applications that have CSRF vulnerabilities)."
        ]
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Content spoofing] By manipulating the content, the attacker targets the information that the user would like to get from the website.",
        "techniques": [
          "Develop malicious JavaScript that is injected through vectors identified during the Experiment Phase and loaded by the victim's browser and exposes attacker-modified invalid information to the user on the current web page."
        ]
      }
    ],
    "prerequisites": [
      "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To achieve a redirection and use of less trusted source, an attacker can simply place a script in bulletin board, blog, wiki, or other user-generated content site that are echoed back to other client machines."
      },
      {
        "level": "High",
        "details": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "79",
      "20"
    ]
  },
  "630": {
    "name": "TypoSquatting",
    "description": "An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      },
      {
        "nature": "CanPrecede",
        "capecId": "543"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.",
        "techniques": [
          "Research popular or high traffic websites."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the TypoSquatted URL.",
        "techniques": [
          "Register the TypoSquatted domain."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the TypoSquatted domain.",
        "techniques": [
          "Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the TypoSquatted domain.",
          "Assume that a user will incorrectly type the legitimate URL, leading the user to the TypoSquatted domain."
        ]
      }
    ],
    "prerequisites": [
      "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries must be able to register DNS hostnames/URL’s."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Other"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "631": {
    "name": "SoundSquatting",
    "description": "An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      },
      {
        "nature": "CanPrecede",
        "capecId": "543"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted, receives a consistent amount of traffic, and is a homophone.",
        "techniques": [
          "Research popular or high traffic websites which are also homophones."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the SoundSquatted URL.",
        "techniques": [
          "Register the SoundSquatted domain."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the SoundSquatted domain.",
        "techniques": [
          "Execute a phishing attack and send a user an e-mail convincing the user to click on a link leading the user to the SoundSquatted domain.",
          "Assume that a user will unintentionally use the homophone in the URL, leading the user to the SoundSquatted domain."
        ]
      }
    ],
    "prerequisites": [
      "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries must be able to register DNS hostnames/URL’s."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Other"
        ],
        "impacts": [
          "Other"
        ]
      }
    ]
  },
  "632": {
    "name": "Homograph Attack via Homoglyphs",
    "description": "An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      },
      {
        "nature": "CanPrecede",
        "capecId": "543"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target website] The adversary first determines which website to impersonate, generally one that is trusted and receives a consistent amount of traffic.",
        "techniques": [
          "Research popular or high traffic websites."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Impersonate trusted domain] In order to impersonate the trusted domain, the adversary needs to register the URL containing the homoglpyh character(s).",
        "techniques": [
          "Register the Homograph domain."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Deceive user into visiting domain] Finally, the adversary needs to deceive a user into visiting the Homograph domain.",
        "techniques": [
          "Execute a phishing attack and send a user an e-mail convincing the to click on a link leading the user to the malicious domain."
        ]
      }
    ],
    "prerequisites": [
      "An adversary requires knowledge of popular or high traffic domains, that could be used to deceive potential targets."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries must be able to register DNS hostnames/URL’s."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Other"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1007"
    ]
  },
  "633": {
    "name": "Token Impersonation",
    "description": "An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "194"
      }
    ],
    "prerequisites": [
      "This pattern of attack is only applicable when a downstream user leverages tokens to verify identity, and then takes action based on that identity."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Hide Activities"
        ]
      }
    ],
    "relatedWeaknesses": [
      "287",
      "1270"
    ],
    "mitreAttack": [
      "T1134"
    ]
  },
  "634": {
    "name": "Probe Audio and Video Peripherals",
    "description": "The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "651"
      },
      {
        "nature": "ChildOf",
        "capecId": "545"
      }
    ],
    "prerequisites": [
      "Knowledge of the target device's or application’s vulnerabilities that can be capitalized on with malicious code. The adversary must be able to place the malicious code on the target device."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "To deploy a hidden process or malware on the system to automatically collect audio and video data."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "267"
    ],
    "mitreAttack": [
      "T1123",
      "T1125"
    ]
  },
  "635": {
    "name": "Alternative Execution Due to Deceptive Filenames",
    "description": "The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "165"
      }
    ],
    "prerequisites": [
      "The use of the file must be controlled by the file extension."
    ],
    "relatedWeaknesses": [
      "162"
    ],
    "mitreAttack": [
      "T1036.007"
    ]
  },
  "636": {
    "name": "Hiding Malicious Data or Code within Files",
    "description": "Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "165"
      }
    ],
    "prerequisites": [
      "The operating system must support a file system that allows for alternate data storage for a file."
    ],
    "relatedWeaknesses": [
      "506"
    ],
    "mitreAttack": [
      "T1001.002",
      "T1027.003",
      "T1027.004",
      "T1218.001",
      "T1221"
    ]
  },
  "637": {
    "name": "Collect Data from Clipboard",
    "description": "The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find an application that allows copying sensititve data to clipboad] An adversary first needs to find an application that allows copying and pasting of sensitive information. This could be an application that prints out temporary passwords to the screen, private email addresses, or any other sensitive information or data",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Target users of the application] An adversary will target users of the application in order to obtain the information in their clipboard on a periodic basic",
        "techniques": [
          "Install malware on a user's system designed to log clipboard contents periodically",
          "Get the user to click on a malicious link that will bring them to an application to log the contents of the clipboard"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Follow-up attack] Use any sensitive information found to carry out a follow-up attack",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary must have a means (i.e., a pre-installed tool or background process) by which to collect data from the clipboard and store it. That is, when the target copies data to the clipboard (e.g., to paste into another application), the adversary needs some means of capturing that data in a third location."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "To deploy a hidden process or malware on the system to automatically collect clipboard data."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "267"
    ],
    "mitreAttack": [
      "T1115"
    ]
  },
  "638": {
    "name": "Altered Component Firmware",
    "description": "An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "452"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Select Target] The adversary searches for a suitable target to attack, such as government and/or private industry organizations.",
        "techniques": [
          "Conduct reconnaissance to determine potential targets to exploit."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Identify Components] After selecting a target, the adversary determines whether a vulnerable component, such as a specific make and model of a HDD, is contained within the target system.",
        "techniques": [
          "[Remote Access Vector] The adversary gains remote access to the target, typically via additional malware, and explores the system to determine hardware components that are being leveraged.",
          "[Physical Access Vector] The adversary intercepts components in transit and determines if the component is vulnerable to attack."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Optional: Create Payload] If not using an already existing payload, the adversary creates their own to be executed at defined intervals and upon system boot processes. This payload may then be tested on the target system or a test system to confirm its functionality.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Insert Firmware Altering Malware] Once a vulnerable component has been identified, the adversary leverages known malware tools to infect the component's firmware and drop the payload within the component's MBR. This allows the adversary to maintain persistence on the target and execute the payload without being detected.",
        "techniques": [
          "The adversary inserts the firmware altering malware on the target component, via the use of known malware tools.",
          "[Physical Access Vector] The adversary then sends the component to its original intended destination, where it will be installed onto a victim system."
        ]
      }
    ],
    "prerequisites": [
      "Advanced knowledge about the target component's firmware",
      "Advanced knowledge about Master Boot Records (MBR)",
      "Advanced knowledge about tools used to insert firmware altering malware.",
      "Advanced knowledge about component shipments to the target organization."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to access and reverse engineer hardware component firmware."
      },
      {
        "level": "High",
        "details": "Ability to intercept components in transit."
      },
      {
        "level": "Medium",
        "details": "Ability to create malicious payload to be executed from MBR."
      },
      {
        "level": "Low",
        "details": "Ability to leverage known malware tools to infect target system and insert firmware altering malware/payload"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Authentication",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges",
          "Execute Unauthorized Commands",
          "Bypass Protection Mechanism",
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data",
          "Modify Data"
        ]
      }
    ],
    "mitreAttack": [
      "T1542.002"
    ]
  },
  "639": {
    "name": "Probe System Files",
    "description": "An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "545"
      }
    ],
    "prerequisites": [
      "An adversary has access to the file system of a system."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "552"
    ],
    "mitreAttack": [
      "T1039",
      "T1552.001",
      "T1552.003",
      "T1552.004",
      "T1552.006"
    ]
  },
  "64": {
    "name": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
    "description": "This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The attacker accesses the server using a specific URL.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The attacker tries to encode some special characters in the URL. The attacker find out that some characters are not filtered properly.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "The attacker crafts a malicious URL string request and sends it to the server.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "The server decodes and interprets the URL string. Unfortunately since the input filtering is not done properly, the special characters have harmful consequences.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The application accepts and decodes URL string request.",
      "The application performs insufficient filtering/canonicalization on the URLs."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker can try special characters in the URL and bypass the URL validation."
      },
      {
        "level": "Medium",
        "details": "The attacker may write a script to defeat the input filtering mechanism."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "177",
      "173",
      "172",
      "73",
      "22",
      "74",
      "20",
      "697",
      "707"
    ]
  },
  "640": {
    "name": "Inclusion of Code in Existing Process",
    "description": "The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "251"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine target process] The adversary determines a process with sufficient privileges that they wish to include code into.",
        "techniques": [
          "On Windows, use the process explorer's security tab to see if a process is running with administror privileges.",
          "On Linux, use the ps command to view running processes and pipe the output to a search for a particular user, or the root user."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt to include simple code with known output] The adversary attempts to include very simple code into the existing process to determine if the code inclusion worked. The code will differ based on the approach used to include code into an existing process.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Include arbitrary code into existing process] Once an adversary has determined that including code into the existing process is possible, they will include code for a targeted purpose, such as accessing that process's memory.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted application fails to verify the integrity of the running process that allows an adversary to execute arbitrary code."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Knowledge of how to load malicious code into the memory space of a running process, as well as the ability to have the running process execute this code. For example, with DLL injection, the adversary must know how to load a DLL into the memory space of another running process, and cause this process to execute the code inside of the DLL."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Confidentiality"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "114",
      "829"
    ],
    "mitreAttack": [
      "T1505.005",
      "T1574.006",
      "T1574.013",
      "T1620"
    ]
  },
  "641": {
    "name": "DLL Side-Loading",
    "description": "An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "159"
      }
    ],
    "prerequisites": [
      "The target must fail to verify the integrity of the DLL before using them."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Trick the operating system in loading a malicious DLL instead of a legitimate DLL."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "706"
    ],
    "mitreAttack": [
      "T1574.002"
    ]
  },
  "642": {
    "name": "Replace Binaries",
    "description": "Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "17"
      }
    ],
    "prerequisites": [
      "The attacker must be able to place the malicious binary on the target machine."
    ],
    "relatedWeaknesses": [
      "732"
    ],
    "mitreAttack": [
      "T1505.005",
      "T1554",
      "T1574.005"
    ]
  },
  "643": {
    "name": "Identify Shared Files/Directories on System",
    "description": "An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "309"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "545"
      },
      {
        "nature": "CanPrecede",
        "capecId": "165"
      }
    ],
    "prerequisites": [
      "The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system)."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line. The adversary, or their malware, can simply employ a set of commands that search for shared drives on the system (e.g., net view \\\\remote system or net share)."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "267",
      "200"
    ],
    "mitreAttack": [
      "T1135"
    ]
  },
  "644": {
    "name": "Use of Captured Hashes (Pass The Hash)",
    "description": "An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "653"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "165"
      },
      {
        "nature": "CanPrecede",
        "capecId": "549"
      },
      {
        "nature": "CanPrecede",
        "capecId": "545"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Acquire known Windows credential hash value pairs] The adversary must obtain known Windows credential hash value pairs of accounts that exist on the domain.",
        "techniques": [
          "An adversary purchases breached Windows credential hash value pairs from the dark web.",
          "An adversary conducts a sniffing attack to steal Windows credential hash value pairs as they are transmitted.",
          "An adversary gains access to a Windows domain system/files and exfiltrates Windows credential hash value pairs.",
          "An adversary examines outward-facing configuration and properties files to discover hardcoded Windows credential hash value pairs."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt domain authentication] Try each Windows credential hash value pair until the target grants access.",
        "techniques": [
          "Manually or automatically enter each Windows credential hash value pair through the target's interface."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application is connected to the Windows domain.",
      "The system/application leverages the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
      "The adversary possesses known Windows credential hash value pairs that exist on the target domain."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary obtains a known Windows credential hash value pair, leveraging it is trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "836",
      "308",
      "294",
      "308"
    ],
    "mitreAttack": [
      "T1550.002"
    ]
  },
  "645": {
    "name": "Use of Captured Tickets (Pass The Ticket)",
    "description": "An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "652"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      }
    ],
    "prerequisites": [
      "The adversary needs physical access to the victim system.",
      "The use of a third-party credential harvesting tool."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Determine if Kerberos authentication is used on the server."
      },
      {
        "level": "High",
        "details": "The adversary uses a third-party tool to obtain the necessary tickets to execute the attack."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "294",
      "308"
    ],
    "mitreAttack": [
      "T1550.003"
    ]
  },
  "646": {
    "name": "Peripheral Footprinting",
    "description": "Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "prerequisites": [
      "The adversary needs either physical or remote access to the victim system."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary needs to be able to infect the victim system in a manner that gives them remote access."
      },
      {
        "level": "Medium",
        "details": "If analyzing the Windows registry, the adversary must understand the registry structure to know where to look for devices."
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1120"
    ]
  },
  "647": {
    "name": "Collect Data from Registries",
    "description": "An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Gain logical access to system] An adversary must first gain logical access to the system it wants to gather registry information from,",
        "techniques": [
          "Obtain user account credentials and access the system",
          "Plant malware on the system that will give remote logical access to the adversary"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine if the permissions are correct] Once logical access is gained, an adversary will determine if they have the proper permissions, or are authorized, to view registry information. If they do not, they will need to escalate privileges on the system through other means",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Peruse registry for information] Once an adversary has access to a registry, they will gather all system-specific data and sensitive information that they deem useful.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Follow-up attack] Use any information or weaknesses found to carry out a follow-up attack",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system).",
      "The adversary must have capability to navigate the operating system to peruse the registry."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only the capability and facility to navigate the system through the OS graphical user interface or the command line."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "285"
    ],
    "mitreAttack": [
      "T1005",
      "T1012",
      "T1552.002"
    ]
  },
  "648": {
    "name": "Collect Data from Screen Capture",
    "description": "An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "150"
      }
    ],
    "prerequisites": [
      "The adversary must have obtained logical access to the system by some means (e.g., via obtained credentials or planting malware on the system)."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once the adversary has logical access (which can potentially require high knowledge and skill level), the adversary needs only to leverage the relevant command for screen capture."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "267"
    ],
    "mitreAttack": [
      "T1113",
      "T1513"
    ]
  },
  "649": {
    "name": "Adding a Space to a File Extension",
    "description": "An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "635"
      }
    ],
    "prerequisites": [
      "The use of the file must be controlled by the file extension."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "46"
    ],
    "mitreAttack": [
      "T1036.006"
    ]
  },
  "65": {
    "name": "Sniff Application Code",
    "description": "An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "157"
      },
      {
        "nature": "CanPrecede",
        "capecId": "37"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Set up a sniffer] The adversary sets up a sniffer in the path between the server and the client and watches the traffic.",
        "techniques": [
          "The adversary sets up a sniffer in the path between the server and the client."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Capturing Application Code Bound During Patching]adversary knows that the computer/OS/application can request new applications to install, or it periodically checks for an available update. The adversary loads the sniffer set up during Explore phase, and extracts the application code from subsequent communication. The adversary then proceeds to reverse engineer the captured code.",
        "techniques": [
          "adversary loads the sniffer to capture the application code bound during a dynamic update.",
          "The adversary proceeds to reverse engineer the captured code."
        ]
      }
    ],
    "prerequisites": [
      "The attacker must have the ability to place themself in the communication path between the client and server.",
      "The targeted application must receive some application code from the server; for example, dynamic updates, patches, applets or scripts.",
      "The attacker must be able to employ a sniffer on the network without being detected."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to setup a sniffer for a sufficient period of time so as to capture meaningful quantities of code. The presence of the sniffer should not be detected on the network. Also if the attacker plans to employ an adversary-in-the-middle attack (CAPEC-94), the client or server must not realize this. Finally, the attacker needs to regenerate source code from binary code if the need be."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "319",
      "311",
      "318",
      "693"
    ],
    "mitreAttack": [
      "T1040"
    ]
  },
  "650": {
    "name": "Upload a Web Shell to a Web Server",
    "description": "By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a \"gateway\" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "17"
      }
    ],
    "prerequisites": [
      "The web server is susceptible to one of the various web application exploits that allows for uploading a shell file."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "287",
      "553"
    ],
    "mitreAttack": [
      "T1505.003"
    ]
  },
  "651": {
    "name": "Eavesdropping",
    "description": "An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "117"
      }
    ],
    "prerequisites": [
      "The adversary typically requires physical proximity to the target's environment, whether for physical eavesdropping or for placing recording equipment. This is not always the case for software-based eavesdropping, if the adversary has the capability to install malware on the target system that can activate a microphone and record audio digitally."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      }
    ],
    "relatedWeaknesses": [
      "200"
    ],
    "mitreAttack": [
      "T1111"
    ]
  },
  "652": {
    "name": "Use of Known Kerberos Credentials",
    "description": "An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Acquire known Kerberos credentials] The adversary must obtain known Kerberos credentials in order to access the target system, application, or service within the domain.",
        "techniques": [
          "An adversary purchases breached Kerberos service account username/password combinations or leaked hashed passwords from the dark web.",
          "An adversary guesses the credentials to a weak Kerberos service account.",
          "An adversary conducts a sniffing attack to steal Kerberos tickets as they are transmitted.",
          "An adversary conducts a Kerberoasting attack."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt Kerberos authentication] Try each Kerberos credential against various resources within the domain until the target grants access.",
        "techniques": [
          "Manually or automatically enter each Kerberos service account credential through the target's interface.",
          "Attempt a Pass the Ticket attack."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the domain",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the domain. The adversary can also pose as a legitimate domain user to perform social engineering attacks.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can obtain sensitive data contained within domain systems or applications.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application leverages Kerberos authentication.",
      "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication for Kerberos service accounts.",
      "The system/application does not have a sound password policy that is being enforced for Kerberos service accounts.",
      "The system/application does not implement an effective password throttling mechanism for authenticating to Kerberos service accounts.",
      "The targeted network allows for network sniffing attacks to succeed."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary obtains a known Kerberos credential, leveraging it is trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "307",
      "308",
      "309",
      "262",
      "263",
      "654",
      "294",
      "836"
    ],
    "mitreAttack": [
      "T1558"
    ]
  },
  "653": {
    "name": "Use of Known Operating System Credentials",
    "description": "An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Acquire known operating system credentials] The adversary must obtain known operating system credentials in order to access the target system, application, or service within the domain.",
        "techniques": [
          "An adversary purchases breached operating system username/password combinations or leaked hashed passwords from the dark web.",
          "An adversary leverages a key logger or phishing attack to steal user credentials as they are provided.",
          "An adversary conducts a sniffing attack to steal operating system credentials as they are transmitted.",
          "An adversary gains access to a system/files and exfiltrates password hashes.",
          "An adversary examines outward-facing configuration and properties files to discover hardcoded credentials."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt authentication] Try each operating system credential against various systems, applications, and services within the domain until the target grants access.",
        "techniques": [
          "Manually or automatically enter each credential through the target's interface."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Impersonate] An adversary can use successful experiments or authentications to impersonate an authorized user or system, or to laterally move within the network",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Spoofing] Malicious data can be injected into the target system or into other systems on the network. The adversary can also pose as a legitimate user to perform social engineering attacks.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Data Exfiltration] The adversary can obtain sensitive data contained within system files or application configuration.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application uses one factor password-based authentication, SSO, and/or cloud-based authentication.",
      "The system/application does not have a sound password policy that is being enforced.",
      "The system/application does not implement an effective password throttling mechanism.",
      "The adversary possesses a list of known user accounts and corresponding passwords that may exist on the target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary obtains a known credential, leveraging it is trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "522",
      "307",
      "308",
      "309",
      "262",
      "263",
      "654"
    ]
  },
  "654": {
    "name": "Credential Prompt Impersonation",
    "description": "An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "504"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine suitable tasks to exploit] Determine what tasks exist on the target system that may result in a user providing their credentials.",
        "techniques": [
          "Determine what tasks prompt a user for their credentials."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Impersonate Task] Impersonate a legitimate task, either expected or unexpected, in an attempt to gain user credentials.",
        "techniques": [
          "Prompt a user for their credentials, while making the user believe the credential request is legitimate."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must already have access to the target system via some means.",
      "A legitimate task must exist that an adversary can impersonate to glean credentials."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Once an adversary has gained access to the target system, impersonating a credential prompt is not difficult."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1021"
    ],
    "mitreAttack": [
      "T1056",
      "T1548.004"
    ]
  },
  "655": {
    "name": "Avoid Security Tool Identification by Adding Data",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "572"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Hide Activities",
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "mitreAttack": [
      "T1027.001"
    ]
  },
  "656": {
    "name": "Voice Phishing",
    "description": "An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a \"cold call\" or by the victim if calling an illegitimate telephone number.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "98"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the adversary impersonate the legitimate organization more convincingly. The adversary can use homograph or similar attacks to convince users that they are using the legitimate website. If the adversary leverages cold-calling for this attack, this step is skipped.",
        "techniques": [
          "Optionally obtain a domain name that visually looks similar to the legitimate organization's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
          "Optionally obtain a legitimate SSL certificate for the new domain name."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Explore legitimate website and create duplicate] An adversary optionally creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the organization's website that they are trying to impersonate. That website will contain a telephone number for the victim to call to assist them with their issue and initiate the attack. If the adversary leverages cold-calling for this attack, this step is skipped.",
        "techniques": [
          "Use spidering software to get copy of web pages on legitimate site.",
          "Manually save copies of required web pages from legitimate site.",
          "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Convince user to provide sensitive information to the adversary.] An adversary \"cold calls\" the victim or receives a call from the victim via the malicious site and provides a call-to-action, in order to persuade the user into providing sensitive details to the adversary (e.g. login credentials, bank account information, etc.). The key is to get the victim to believe that the individual they are talking to is from a legitimate entity with which the victim does business and that the call is occurring for legitimate reasons. A call-to-action will usually need to sound legitimate and urgent enough to prompt action from the user.",
        "techniques": [
          "Call the user a from a spoofed legitimate-looking telephone number."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use stolen information] Once the adversary obtains the sensitive information, this information can be leveraged to log into the victim's bank account and transfer money to an account of their choice, or to make fraudulent purchases with stolen credit card information.",
        "techniques": [
          "Login to the legitimate site using another the victim's supplied credentials"
        ]
      }
    ],
    "prerequisites": [
      "An adversary needs phone numbers to initiate contact with the victim, in addition to a legitimate-looking telephone number to call the victim from.",
      "An adversary needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
      "An adversary needs to have a sufficiently compelling call to action to prompt the user to take action.",
      "If passively conducting this attack via a spoofed website, replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ]
  },
  "657": {
    "name": "Malicious Automated Software Update via Spoofing",
    "description": "An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "186"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control",
          "Availability",
          "Confidentiality"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494"
    ],
    "mitreAttack": [
      "T1072"
    ]
  },
  "66": {
    "name": "SQL Injection",
    "description": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey application] The attacker first takes an inventory of the functionality exposed by the application.",
        "techniques": [
          "Spider web sites for all available links",
          "Sniff network communications with application using a utility such as WireShark."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to SQL injection, attempt to inject characters that have special meaning in SQL (such as a single quote character, a double quote character, two hyphens, a parenthesis, etc.). The goal is to create a SQL query with an invalid syntax.",
        "techniques": [
          "Use web browser to inject input through text fields or through HTTP GET parameters.",
          "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
          "Use network-level packet injection tools such as netcat to inject input",
          "Use modified client (modified by reverse engineering) to inject input."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Experiment with SQL Injection vulnerabilities] After determining that a given input is vulnerable to SQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, or to modify or delete information in the database.",
        "techniques": [
          "Use public resources such as \"SQL Injection Cheat Sheet\" at http://ferruh.mavituna.com/makale/sql-injection-cheatsheet/, and try different approaches for adding logic to SQL queries.",
          "Add logic to query, and use detailed error messages from the server to debug the query. For example, if adding a single quote to a query causes an error message, try : \"' OR 1=1; --\", or something else that would syntactically complete a hypothesized query. Iteratively refine the query.",
          "Use \"Blind SQL Injection\" techniques to extract information about the database schema.",
          "If a denial of service attack is the goal, try stacking queries. This does not work on all platforms (most notably, it does not work on Oracle or MySQL). Examples of inputs to try include: \"'; DROP TABLE SYSOBJECTS; --\" and \"'); DROP TABLE SYSOBJECTS; --\". These particular queries will likely not work because the SYSOBJECTS table is generally protected."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Exploit SQL Injection vulnerability] After refining and adding various logic to SQL queries, craft and execute the underlying SQL query that will be used to attack the target system. The goal is to reveal, modify, and/or delete database data, using the knowledge obtained in the previous step. This could entail crafting and executing multiple SQL queries if a denial of service attack is the intent.",
        "techniques": [
          "Craft and Execute underlying SQL query"
        ]
      }
    ],
    "prerequisites": [
      "SQL queries used by the application to store, retrieve or modify data.",
      "User-controllable input that is not properly validated by the application as part of SQL queries."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "It is fairly simple for someone with basic SQL knowledge to perform SQL injection, in general. In certain instances, however, specific knowledge of the database employed may be required."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "89",
      "1286"
    ]
  },
  "660": {
    "name": "Root/Jailbreak Detection Evasion via Hooking",
    "description": "An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to \"hook\" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "251"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).",
        "techniques": [
          "Search application stores for mobile applications worth exploiting"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Develop code to be hooked into chosen target application] The adversary develops code or leverages existing code that will be hooked into the target application in order to evade Root/Jailbreak detection methods.",
        "techniques": [
          "Develop code or leverage existing code to bypass Root/Jailbreak detection methods.",
          "Test the code to see if it works.",
          "Iteratively develop the code until Root/Jailbreak detection methods are evaded."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute code hooking to evade Root/Jailbreak detection methods] Once hooking code has been developed or obtained, execute the code against the target application to evade Root/Jailbreak detection methods.",
        "techniques": [
          "Hook code into the target application."
        ]
      }
    ],
    "prerequisites": [
      "The targeted application must be non-restricted to allow code hooking."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Knowledge about Root/Jailbreak detection and evasion techniques."
      },
      {
        "level": "Medium",
        "details": "Knowledge about code hooking."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "829"
    ],
    "mitreAttack": [
      "T1055"
    ]
  },
  "661": {
    "name": "Root/Jailbreak Detection Evasion via Debugging",
    "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "121"
      },
      {
        "nature": "CanPrecede",
        "capecId": "68"
      },
      {
        "nature": "CanPrecede",
        "capecId": "660"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify application with attack potential] The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).",
        "techniques": [
          "Search application stores for mobile applications worth exploiting"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Debug the target application] The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.",
        "techniques": [
          "Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.",
          "Dump the memory region containing the now decrypted code from the address space of the binary."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Remove application signature verification methods] Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Execute the application and evade Root/Jailbreak detection methods] The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.",
        "techniques": [
          "Optional: Hook code into the target application."
        ]
      }
    ],
    "prerequisites": [
      "A debugger must be able to be inserted into the targeted application."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Knowledge about Root/Jailbreak detection and evasion techniques."
      },
      {
        "level": "Medium",
        "details": "Knowledge about runtime debugging."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "489"
    ]
  },
  "662": {
    "name": "Adversary in the Browser (AiTB)",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "94"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Experiment",
        "description": "The adversary tricks the victim into installing the Trojan Horse malware onto their system.",
        "techniques": [
          "Conduct phishing attacks, drive-by malware installations, or masquerade malicious browser extensions as being legitimate."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "The adversary observes, filters, or alters passed data of their choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary must install or convince a user to install a Trojan.",
      "There are two components communicating with each other.",
      "An attacker is able to identify the nature and mechanism of communication between the two target components.",
      "Strong mutual authentication is not used between the two target components yielding opportunity for adversarial interposition.",
      "For browser pivoting, the SeDebugPrivilege and a high-integrity process must both exist to execute this attack."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Tricking the victim into installing the Trojan is often the most difficult aspect of this attack. Afterwards, the remainder of this attack is fairly trivial."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300",
      "494"
    ],
    "mitreAttack": [
      "T1185"
    ]
  },
  "663": {
    "name": "Exploitation of Transient Instruction Execution",
    "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "74"
      },
      {
        "nature": "ChildOf",
        "capecId": "184"
      },
      {
        "nature": "CanPrecede",
        "capecId": "141"
      },
      {
        "nature": "PeerOf",
        "capecId": "212"
      },
      {
        "nature": "PeerOf",
        "capecId": "124"
      },
      {
        "nature": "PeerOf",
        "capecId": "180"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack.",
        "techniques": [
          "Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Explore cache and identify impacts] Utilize tools to understand the impact of transient instruction execution upon address spaces and CPU operations.",
        "techniques": [
          "Run OS or application specific tools that examine the contents of cache."
        ]
      },
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Cause conditions for identified transient instruction set execution] Adversary ensures that specific code/instructions of the target process are executed by CPU, so desired transient instructions are executed.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Cause specific secret data to be cached from restricted address space] Executed instruction sets (gadgets) in target address space, initially executed via adversary-chosen transient instructions sets, establish covert channel and transfer secret data across this channel to cache.",
        "techniques": [
          "Prediction-based - adversary trains CPU to incorrectly predict/speculate conditions for instruction execution to be true, hence executing adversary-chosen transient instructions. These prediction-based methods include: Pattern History Table (PHT)/Input Validation Bypass, Branch Target Buffer (BTB)/Branch Target Injection, Return Stack Buffer (RSB)/Return Address Injection, and Store To Load (STL)/Speculative Store Bypass.",
          "Exception/Fault-based - adversary has CPU execute transient instructions that raise an exception allowing inaccessible memory space to be accessed via out-of-order execution. These exception/fault-based methods include: Supervisor-only Bypass, Virtual Translation Bypass, System Register Bypass, FPU Register Bypass, Read-only Bypass, Protection Key Bypass, and Bounds Check Bypass."
        ]
      },
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Perform covert channel attack to obtain/access secret data] Adversary process code removes instructions/data from shared cache set, waits for target process to reinsert them back into cache, to identify location of secret data via a timing method. Adversary continuously repeat this process to identify and access entirety of targeted secret data.",
        "techniques": [
          "Flush+Reload - adversary frequently flushes targeted memory cache line using a dedicated machine flush instruction, and uses another process to measure time taken for CPU to load victim secret data.",
          "Evict+Time - adversary causes victim to load target set into cache and measures time for victim process to load this data, setting a baseline. Adversary evicts a specified cache line and causes victim process to execute again, and measures any change in execution time, to determine if cache line was accessed.",
          "Prime+Probe - adversary primes cache by filling cache line(s) or set(s) with data, after some time victim process evicts this adversary data to replace it with secret data. The adversary then probes/accesses all the previously accessed cache lines detecting cache misses, which determine that their attacker data has been evicted and replaced with secret data from victim process."
        ]
      }
    ],
    "prerequisites": [
      "The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations."
      },
      {
        "level": "High",
        "details": "Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1037",
      "1303",
      "1264"
    ]
  },
  "664": {
    "name": "Server Side Request Forgery",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "115"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find target application] Find target web application that accepts a user input and retrieves data from the server",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Examine existing application requests] Examine HTTP/GET requests to view the URL query format. Adversaries test to see if this type of attack is possible through weaknesses in an application's protection to Server Side Request Forgery",
        "techniques": [
          "Attempt manipulating the URL to retrieve an error response/code from the server to determine if URL/request validation is done.",
          "Use a list of XSS probe strings to specify as parameters to known URLs. If possible, use probe strings with unique identifiers.",
          "Create a GET request with a common server file path such as /etc/passwd as a parameter and examine output."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Malicious request] Adversary crafts a malicious URL request that assumes the privilege level of the server to query internal or external network services and sends the request to the application",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Server must be running a web application that processes HTTP requests."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary will have to detect the vulnerability through an intermediary service or specify maliciously crafted URLs and analyze the server response."
      },
      {
        "level": "High",
        "details": "The adversary will be required to access internal resources, extract information, or leverage the services running on the server to perform unauthorized actions such as traversing the local network or routing a reflected TCP DDoS through them."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Confidentiality",
          "Availability"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "918",
      "20"
    ]
  },
  "665": {
    "name": "Exploitation of Thunderbolt Protection Flaws",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "276"
      },
      {
        "nature": "CanFollow",
        "capecId": "390"
      },
      {
        "nature": "PeerOf",
        "capecId": "458"
      },
      {
        "nature": "PeerOf",
        "capecId": "148"
      },
      {
        "nature": "PeerOf",
        "capecId": "151"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey physical victim environment and potential Thunderbolt system targets] The adversary monitors the target's physical environment to identify systems with Thunderbolt interfaces, identify potential weaknesses in physical security in addition to periods of nonattendance by the victim over their Thunderbolt interface equipped devices, and when the devices are in locked or sleep state.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Evaluate the target system and its Thunderbolt interface] The adversary determines the device's operating system, Thunderbolt interface version, and any implemented Thunderbolt protections to plan the attack.",
        "techniques": null
      },
      {
        "step": "1",
        "phase": "Experiment",
        "description": "[Obtain and/or clone firmware image] The adversary physically manipulates Thunderbolt enabled devices to acquire the firmware image from the target and/or adversary Thunderbolt host controller's SPI (Serial Peripheral Interface) flash.",
        "techniques": [
          "Disassemble victim and/or adversary device enclosure with basic tools to gain access to Thunderbolt controller SPI flash by connecting adversary SPI programmer.",
          "Adversary connects SPI programmer to adversary-controlled Thunderbolt enabled device to obtain/clone victim thunderbolt controller firmware image through tools/scripts.",
          "Clone firmware image with SPI programmer and tools/scripts on adversary-controlled device."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Parse and locate relevant firmware data structures and information based upon Thunderbolt controller model, firmware version, and other information] The acquired victim and/or adversary firmware image is parsed for specific data and other relevant identifiers required for exploitation, based upon the victim device information and firmware version.",
        "techniques": [
          "Utilize pre-crafted tools/scripts to parse and locate desired firmware data and modify it.",
          "Locate DROM (Device Read Only Memory) data structure section and calculate/determine appropriate offset to replicate victim device UUID.",
          "Locate ACL (Access Control List) data structure and calculate/determine appropriate offsets to identify victim device UUID.",
          "Locate data structure containing challenge-response key information between appropriate offsets."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Disable Thunderbolt security and prevent future Thunderbolt security modifications (if necessary)] The adversary overrides the target device's Thunderbolt Security Level to \"None\" (SL0) and/or enables block protections upon the SPI flash to prevent the ability for the victim to perform and/or recognize future Thunderbolt security modifications as well as update the Thunderbolt firmware.",
        "techniques": [
          "The adversary-controlled Thunderbolt device, connected to SPI programmer and victim device via Thunderbolt ports, is utilized to execute commands within tools/scripts to disable SPI flash protections, modify Thunderbolt Security Level, and enable malicious SPI flash protections."
        ]
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Modify/replace victim Thunderbolt firmware image] The modified victim and/or adversary thunderbolt firmware image is written to attacker SPI flash.",
        "techniques": null
      },
      {
        "step": "1",
        "phase": "Exploit",
        "description": "[Connect adversary-controlled thunderbolt enabled device to victim device and verify successful execution of malicious actions] The adversary needs to determine if their exploitation of selected vulnerabilities had the intended effects upon victim device.",
        "techniques": [
          "Observe victim device identify adversary device as the victim device and enables PCIe tunneling.",
          "Resume victim device from sleep, connect adversary-controlled device and observe security is disabled and Thunderbolt connectivity is restored with PCIe tunneling being enabled.",
          "Observe that in UEFI or Thunderbolt Management Tool/UI that the Security Level does not match adversary modified Security Level of \"None\" (SL0)",
          "Observe after installation of Firmware update that within Thunderbolt Management UI the \"NVM version\" is unchanged/same prior to the prompt of successful Firmware update/installation."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Exfiltration of desired data from victim device to adversary device] Utilize PCIe tunneling to transfer desired data and information from victim device across Thunderbolt connection.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The adversary needs at least a few minutes of physical access to a system with an open Thunderbolt port, version 3 or lower, and an external thunderbolt device controlled by the adversary with maliciously crafted software and firmware, via an SPI Programming device, to exploit weaknesses in security protections."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Detailed knowledge on various system motherboards, PCI Express Domain, SPI, and Thunderbolt Protocol in order to interface with internal system components via external devices."
      },
      {
        "level": "High",
        "details": "Detailed knowledge on OS/Kernel memory address space, Direct Memory Access (DMA) mapping, Input-Output Memory Management Units (IOMMUs), and vendor memory protections for data leakage."
      },
      {
        "level": "High",
        "details": "Detailed knowledge on scripting and SPI programming in order to configure and modify Thunderbolt controller firmware and software configurations."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "345",
      "353",
      "288",
      "1188",
      "862"
    ],
    "mitreAttack": [
      "T1211",
      "T1542.002",
      "T1556"
    ]
  },
  "666": {
    "name": "BlueSmacking",
    "description": "An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "125"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Scan for Bluetooth Enabled Devices] Using BlueZ along with an antenna, an adversary searches for devices with Bluetooth on.",
        "techniques": [
          "Note the MAC address of the device you want to attack."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Change L2CAP Packet Length] The adversary must change the L2CAP packet length to create packets that will overwhelm a Bluetooth enabled device.",
        "techniques": [
          "An adversary downloads and installs BlueZ, the standard Bluetooth utility package for Linux."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Flood] An adversary sends the packets to the target device, and floods it until performance is degraded.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The system/application has Bluetooth enabled."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary only needs a Linux machine along with a Bluetooth adapter, which is extremely common."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution",
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "404"
    ],
    "mitreAttack": [
      "T1498.001",
      "T1499.001"
    ]
  },
  "667": {
    "name": "Bluetooth Impersonation AttackS (BIAS)",
    "description": "An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find disguise and target] The adversary starts the Bluetooth service on the attacking device and searches for nearby listening devices.",
        "techniques": [
          "Knowledge of a trusted MAC address.",
          "Scanning for devices other than the target that may be trusted."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Disguise] Using the MAC address of the device the adversary wants to impersonate, they may use a tool such as spooftooth or macchanger to spoof their Bluetooth address and attempt to authenticate with the target.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Use device capabilities to accomplish goal] Finally, if authenticated successfully the adversary can perform tasks/information gathering dependent on the target's capabilities and connections.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Knowledge of a target device's list of trusted connections."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Adversaries must be capable of using command line Linux tools."
      },
      {
        "level": "Low",
        "details": "Adversaries must be in close proximity to Bluetooth devices."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": null
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": null
      }
    ],
    "relatedWeaknesses": [
      "290"
    ]
  },
  "668": {
    "name": "Key Negotiation of Bluetooth Attack (KNOB)",
    "description": "An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "115"
      },
      {
        "nature": "CanPrecede",
        "capecId": "148"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Discovery] Using an established Person in the Middle setup, search for Bluetooth devices beginning the authentication process.",
        "techniques": [
          "Use packet capture tools."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Change the entropy bits] Upon recieving the initial key negotiation packet from the master, the adversary modifies the entropy bits requested to 1 to allow for easy decryption before it is forwarded.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Capture and decrypt data] Once the entropy of encryption is known, the adversary can capture data and then decrypt on their device.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Person in the Middle network setup."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to modify packets."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "425",
      "285",
      "693"
    ],
    "mitreAttack": [
      "T1565.002"
    ]
  },
  "669": {
    "name": "Alteration of a Software Update",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "184"
      },
      {
        "nature": "CanPrecede",
        "capecId": "673"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify software with frequent updates] The adversary must first identify a target software that has updates at least with some frequency, enough that there is am update infrastructure.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Gain access to udpate infrastructure] The adversary must then gain access to the organization's software update infrastructure. This can either be done by gaining remote access from outside the organization, or by having a malicious actor inside the organization gain access. It is often easier if someone within the organization gains access.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Alter the software update] Through access to the software update infrastructure, an adversary will alter the software update by injecting malware into the content of an outgoing update.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An adversary would need to have penetrated an organization’s software update infrastructure including gaining access to components supporting the configuration management of software versions and updates related to the software maintenance of customer systems."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Skills required include the ability to infiltrate the organization’s software update infrastructure either from the Internet or from within the organization, including subcontractors, and be able to change software being delivered to customer/user systems in an undetected manner."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.002"
    ]
  },
  "67": {
    "name": "String Format Overflow in syslog()",
    "description": "This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      },
      {
        "nature": "ChildOf",
        "capecId": "135"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary identifies a target application or program to perform the buffer overflow on. In this attack, adversaries look for applications that use syslog() incorrectly.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.",
        "techniques": [
          "Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.",
        "techniques": [
          "The formatting characters %s and %d are useful for observing memory and trying to print memory addresses. If an adversary has access to the log being written to they can observer this output and use it to help craft their attack.",
          "The formatting character %n is useful for adding extra data onto the buffer."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary supplies the program with the crafted format string injection, causing a buffer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The Syslog function is used without specifying a format string argument, allowing user input to be placed direct into the function call as a format string."
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "134",
      "74",
      "20",
      "680",
      "697"
    ]
  },
  "670": {
    "name": "Software Development Tools Maliciously Altered",
    "description": "An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      },
      {
        "nature": "CanPrecede",
        "capecId": "669"
      }
    ],
    "prerequisites": [
      "An adversary would need to have access to a targeted developer’s development environment and in particular to tools used to design, create, test and manage software, where the adversary could ensure malicious code is included in software packages built through alteration or substitution of tools in the environment used in the development of software."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Ability to leverage common delivery mechanisms (e.g., email attachments, removable media) to infiltrate a development environment to gain access to software development tools for the purpose of malware insertion into an existing tool or replacement of an existing tool with a maliciously altered copy."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Modify Data",
          "Read Data"
        ]
      }
    ],
    "mitreAttack": [
      "T1127",
      "T1195.001"
    ]
  },
  "671": {
    "name": "Requirements for ASIC Functionality Maliciously Altered",
    "description": "An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "447"
      }
    ],
    "prerequisites": [
      "An adversary would need to have access to a foundry’s or chip maker’s requirements management system that stores customer requirements for ASICs, requirements upon which the design of the ASIC is based."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "An adversary would need experience in designing chips based on functional requirements in order to manipulate requirements in such a way that deviations would not be detected in subsequent stages of ASIC manufacture and where intended malicious functionality would be available to the adversary once integrated into a system and fielded."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "672": {
    "name": "Malicious Code Implanted During Chip Programming",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "An adversary would need to have access to a foundry’s or chip maker’s development/production environment where programs for specific chips are developed, managed and uploaded into targeted chips prior to distribution or sale."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "An adversary needs to be skilled in microprogramming, manipulation of configuration management systems, and in the operation of tools used for the uploading of programs into chips during manufacture. Uploading can be for individual chips or performed on a large scale basis."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "673": {
    "name": "Developer Signing Maliciously Altered Software",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity",
          "Confidentiality"
        ],
        "impacts": [
          "Read Data",
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges",
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.002"
    ]
  },
  "674": {
    "name": "Design for FPGA Maliciously Altered",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "447"
      }
    ],
    "prerequisites": [
      "An adversary would need to have access to FPGA programming/configuration-related systems in a chip maker’s development environment where FPGAs can be initially configured prior to delivery to a customer or have access to such systems in a customer facility where end-user FPGA configuration/reconfiguration can be performed."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "An adversary would need to be skilled in FPGA programming in order to create/manipulate configurations in such a way that when loaded into an FPGA, the end user would be able to observe through testing all user-defined required functions but would be unaware of any additional functions the adversary may have introduced."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "675": {
    "name": "Retrieve Data from Decommissioned Devices",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "116"
      },
      {
        "nature": "CanPrecede",
        "capecId": "37"
      }
    ],
    "prerequisites": [
      "An adversary needs to have access to electronic data processing equipment being recycled or disposed of (e.g., laptops, servers) at a collection location and the ability to take control of it for the purpose of exploiting its content."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "An adversary may need the ability to mount printed circuit boards and target individual chips for exploitation."
      },
      {
        "level": "Medium",
        "details": "An adversary needs the technical skills required to extract solid state drives, hard disk drives, and other storage media to host on a compatible system or harness to gain access to digital content."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1266"
    ],
    "mitreAttack": [
      "T1052"
    ]
  },
  "676": {
    "name": "NoSQL Injection",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey target application] Due to the number of NoSQL databases available and the numerous language/API combinations of each, the adversary must first survey the target application to learn what technologies are being leveraged and how they interact with user-driven data.",
        "techniques": [
          "Determine the technology stack leveraged by the target application, such as the application server, drivers, frameworks, APIs, and databases being utilized.",
          "Identify areas of the application that interact with user input and may be involved with NoSQL queries."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Identify user-controllable input susceptible to injection] After identifying the technology stack being used and where user-driven input is leveraged, determine the user-controllable input susceptible to injection such as authentication or search forms. For each user-controllable input that the adversary suspects is vulnerable to NoSQL injection, attempt to inject characters or keywords that have special meaning in the given NoSQL database or language (e.g., \"$ne\" for MongoDB or \"$exists\" for PHP/MongoDB), or JavaScript that can be executed within the application. The goal is to create a NoSQL query with an invalid syntax.",
        "techniques": [
          "Use web browser to inject input through text fields or through HTTP GET parameters.",
          "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
          "Use network-level packet injection tools such as netcat to inject input",
          "Use modified client (modified by reverse engineering) to inject input."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Experiment with NoSQL Injection vulnerabilities] After determining that a given input is vulnerable to NoSQL Injection, hypothesize what the underlying query looks like. Iteratively try to add logic to the query to extract information from the database, modify/delete information in the database, or execute commands on the server.",
        "techniques": [
          "Use public resources such as OWASP's \"Testing for NoSQL Injection\" [REF-668] or Null Sweep's \"NoSQL Injection Cheatsheet\" [REF-669] and try different approaches for adding logic to NoSQL queries.",
          "Iteratively add logic to the NoSQL query and use detailed error messages from the server to debug the query.",
          "Attempt an HTTP Parameter Pollution attack to replace language-specific keywords, such as \"where\" within PHP [CAPEC-460]."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Exploit NoSQL Injection vulnerability] After refining and adding various logic to NoSQL queries, craft and execute the underlying NoSQL query that will be used to attack the target system.",
        "techniques": [
          "Craft and Execute underlying NoSQL query"
        ]
      }
    ],
    "prerequisites": [
      "Awareness of the technology stack being leveraged by the target application.",
      "NoSQL queries used by the application to store, retrieve, or modify data.",
      "User-controllable input that is not properly validated by the application as part of NoSQL queries.",
      "Target potentially susceptible to operator replacement attacks."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "For keyword and JavaScript injection attacks, it is fairly simple for someone with basic NoSQL knowledge to perform NoSQL injection, once the target's technology stack has been determined."
      },
      {
        "level": "Medium",
        "details": "For operator replacement attacks, the adversary must also have knowledge of HTTP Parameter Pollution attacks and how to conduct them."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "943",
      "1286"
    ]
  },
  "677": {
    "name": "Server Motherboard Compromise",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "534"
      }
    ],
    "prerequisites": [
      "An adversary with access to hardware/software processes and tools within the development or hardware/software support environment can insert malicious software into hardware components during development or update/maintenance."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.003"
    ]
  },
  "678": {
    "name": "System Build Data Maliciously Altered",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "444"
      }
    ],
    "prerequisites": [
      "An adversary has access to the data files and processes used for executing system configuration and performing the build."
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Modify Data",
          "Read Data"
        ]
      }
    ],
    "mitreAttack": [
      "T1195.002"
    ]
  },
  "679": {
    "name": "Exploitation of Improperly Configured or Implemented Memory Protections",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "1"
      },
      {
        "nature": "ChildOf",
        "capecId": "180"
      }
    ],
    "prerequisites": [
      "Access to the hardware being leveraged."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to craft malicious code to inject into the memory region."
      },
      {
        "level": "High",
        "details": "Intricate knowledge of memory structures."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1222",
      "1252",
      "1257",
      "1260",
      "1274",
      "1282",
      "1312",
      "1316",
      "1326"
    ]
  },
  "68": {
    "name": "Subvert Code-signing Facilities",
    "description": "Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "233"
      }
    ],
    "prerequisites": [
      "A framework-based language that supports code signing (such as, and most commonly, Java or .NET)",
      "Deployed code that has been signed by its authoring vendor, or a partner.",
      "The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Subverting code signing is not a trivial activity. Most code signing and verification schemes are based on use of cryptography and the attacker needs to have an understanding of these cryptographic operations in good detail. Additionally the attacker also needs to be aware of the way memory is assigned and accessed by the container since, often, the only way to subvert code signing would be to patch the code in memory. Finally, a knowledge of the platform specific mechanisms of signing and verifying code is a must."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "325",
      "328",
      "1326"
    ],
    "mitreAttack": [
      "T1553.002"
    ]
  },
  "680": {
    "name": "Exploitation of Improperly Controlled Registers",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "1"
      },
      {
        "nature": "ChildOf",
        "capecId": "180"
      }
    ],
    "prerequisites": [
      "Awareness of the hardware being leveraged.",
      "Access to the hardware being leveraged."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Intricate knowledge of registers."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1224",
      "1231",
      "1233",
      "1262",
      "1283"
    ]
  },
  "681": {
    "name": "Exploitation of Improperly Controlled Hardware Security Identifiers",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "1"
      },
      {
        "nature": "ChildOf",
        "capecId": "180"
      }
    ],
    "prerequisites": [
      "Awareness of the hardware being leveraged.",
      "Access to the hardware being leveraged."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to execute actions within the SoC."
      },
      {
        "level": "High",
        "details": "Intricate knowledge of the identifiers being utilized."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1259",
      "1267",
      "1270",
      "1294",
      "1302"
    ]
  },
  "682": {
    "name": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities",
    "description": "An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "212"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine vulnerable firmware or ROM code] An adversary will attempt to find device models that are known to have unpatchable firmware or ROM code, or are deemed “end-of-support” where a patch will not be made. The adversary looks for vulnerabilities in firmware or ROM code for the identified devices, or looks for devices which have known vulnerabilities",
        "techniques": [
          "Many botnets use wireless scanning to discover nearby devices that might have default credentials or commonly used passwords. Once these devices are infected, they can search for other nearby devices and so on."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine plan of attack] An adversary identifies a specific device/model that they wish to attack. They will also investigate similar devices to determine if the vulnerable firmware or ROM code is also present.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Carry out attack] An adversary exploits the vulnerable firmware or ROM code on the identified device(s) to achieve their desired goal.",
        "techniques": [
          "Install malware on a device to recruit it for a botnet.",
          "Install malware on the device and use it for a ransomware attack.",
          "Gain root access and steal information stored on the device.",
          "Manipulate the device to behave in unexpected ways which would benefit the adversary."
        ]
      }
    ],
    "prerequisites": [
      "Awareness of the hardware being leveraged.",
      "Access to the hardware being leveraged, either physically or remotely."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Knowledge of various wireless protocols to enable remote access to vulnerable devices"
      },
      {
        "level": "High",
        "details": "Ability to identify physical entry points such as debug interfaces if the device is not being accessed remotely"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1277",
      "1310"
    ]
  },
  "69": {
    "name": "Target Programs with Elevated Privileges",
    "description": "This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "233"
      },
      {
        "nature": "CanPrecede",
        "capecId": "8"
      },
      {
        "nature": "CanPrecede",
        "capecId": "9"
      },
      {
        "nature": "CanPrecede",
        "capecId": "10"
      },
      {
        "nature": "CanPrecede",
        "capecId": "67"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find programs with elevated priveleges] The adversary probes for programs running with elevated privileges.",
        "techniques": [
          "Look for programs that write to the system directories or registry keys (such as HKLM, which stores a number of critical Windows environment variables). These programs are typically running with elevated privileges and have usually not been designed with security in mind. Such programs are excellent exploit targets because they yield lots of power when they break."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Find vulnerability in running program] The adversary looks for a vulnerability in the running program that would allow for arbitrary code execution with the privilege of the running program.",
        "techniques": [
          "Look for improper input validation",
          "Look for improper failure safety. For instance when a program fails it may authorize restricted access to anyone.",
          "Look for a buffer overflow which may be exploited if an adversary can inject unvalidated data."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Execute arbitrary code] The adversary exploits the vulnerability that they have found. For instance, they can try to inject and execute arbitrary code or write to OS resources.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The targeted program runs with elevated OS privileges.",
      "The targeted program accepts input data from the user or from another program.",
      "The targeted program is giving away information about itself. Before performing such attack, an eventual attacker may need to gather information about the services running on the host target. The more the host target is verbose about the services that are running (version number of application, etc.) the more information can be gather by an attacker.",
      "This attack often requires communicating with the host target services directly. For instance Telnet may be enough to communicate with the host target."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker can use a tool to scan and automatically launch an attack against known issues. A tool can also repeat a sequence of instructions and try to brute force the service on the host target, an example of that would be the flooding technique."
      },
      {
        "level": "Medium",
        "details": "More advanced attack may require knowledge of the protocol spoken by the host service."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "250",
      "15"
    ]
  },
  "690": {
    "name": "Metadata Spoofing",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "prerequisites": [
      "Identification of a resource whose metadata is to be spoofed"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to spoof a variety of metadata to convince victims the source is trusted"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ]
  },
  "691": {
    "name": "Spoof Open-Source Software Metadata",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "690"
      },
      {
        "nature": "CanPrecede",
        "capecId": "184"
      },
      {
        "nature": "CanPrecede",
        "capecId": "444"
      },
      {
        "nature": "PeerOf",
        "capecId": "630"
      }
    ],
    "prerequisites": [
      "Identification of a popular open-source component whose metadata is to be spoofed."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to spoof a variety of software metadata to convince victims the source is trusted."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Alter Execution Logic",
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494"
    ],
    "mitreAttack": [
      "T1195.001",
      "T1195.002"
    ]
  },
  "692": {
    "name": "Spoof Version Control System Commit Metadata",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "691"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target] The adversary must first identify a target repository for them to spoof. Typically, this will be a popular and widely used repository, as to increase the amount of victims a successful attack will exploit.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create malicious repository] The adversary must create a malicious repository that imitates the legitimate repository being spoofed. This may include creating a username that closely matches the legitimate repository owner; creating a repository name that closely matches the legitimate repository name; uploading the legitimate source code; and more.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Spoof commit metadata] Once the malicious repository has been created, the adversary must then spoof the commit metadata to make the repository appear to be frequently maintained and originating from trusted sources.",
        "techniques": [
          "Git Commit Timestamps: The adversary generates numerous fake commits while setting the \"GIT_AUTHOR_DATE\" and \"GIT_COMMITTER_DATE\" environment variables to a date which is to be spoofed.",
          "Git Commit Contributors: The adversary obtains a legitimate and trusted user's email address and then sets this information via the \"git config\" command. The adversary can then commit changes leveraging this username."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Exploit victims] The adversary infiltrates software and/or system environments with the goal of conducting additional attacks.",
        "techniques": [
          "Active: The adversary attempts to trick victims into downloading the malicious software by means such as phishing and social engineering.",
          "Passive: The adversary waits for victims to download and leverage malicious software."
        ]
      }
    ],
    "prerequisites": [
      "Identification of a popular open-source repository whose metadata is to be spoofed."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to spoof a variety of repository metadata to convince victims the source is trusted."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Alter Execution Logic",
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494"
    ]
  },
  "693": {
    "name": "StarJacking",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "691"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target] The adversary must first identify a target package whose popularity statistics will be leveraged. This will be a popular and widely used package, as to increase the perceived pedigree of the malicious package.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Spoof package popularity] The adversary provides their malicious package to a package manager and uses the source code repository URL identified in Step 1 to spoof the popularity of the package. This malicious package may also closely resemble the legitimate package whose statistics are being utilized.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Exploit victims] The adversary infiltrates development environments with the goal of conducting additional attacks.",
        "techniques": [
          "Active: The adversary attempts to trick victims into downloading the malicious package by means such as phishing and social engineering.",
          "Passive: The adversary waits for victims to download and leverage the malicious package."
        ]
      }
    ],
    "prerequisites": [
      "Identification of a popular open-source package whose popularity metadata is to be used for the malicious package."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Ability to provide a package to a package manager and associate a popular package's source code repository URL."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Accountability"
        ],
        "impacts": [
          "Hide Activities"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Alter Execution Logic",
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494"
    ]
  },
  "694": {
    "name": "System Location Discovery",
    "description": "\n            \n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "169"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[System Locale Information Discovery] The adversary examines system information from various sources such as registry and native API functions and correlates the gathered information to infer the geographical location of the target system",
        "techniques": [
          "Registry Query: Query the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\ContentIndex\\Language\\Language_Dialect on Windows to obtain system language, Computer\\HKEY_CURRENT_USER\\Keyboard Layout\\Preload to obtain the hexadecimal language IDs of the current user's preloaded keyboard layouts, and Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\TimeZoneInformation to obtain the system timezone configuration",
          "Native API Requests: Parse the outputs of Windows API functions GetTimeZoneInformation, GetUserDefaultUILanguage, GetSystemDefaultUILanguage, GetKeyboardLayoutList and GetUserDefaultLangID to obtain information about languages, keyboard layouts, and timezones installed on the system or on macOS or Linux systems, query locale to obtain the $LANG environment variable and view keyboard layout information or use timeanddatectl status to show the system clock settings.",
          "Read Configuration Files: For macOS and Linux-based systems, view the /etc/vconsole.conf file to get information about the keyboard mapping and console font."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must have some level of access to the system and have a basic understanding of the operating system in order to query the appropriate sources for relevant information."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary must know how to query various system sources of information respective of the system's operating system to obtain the relevant information."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "497"
    ],
    "mitreAttack": [
      "T1614"
    ]
  },
  "695": {
    "name": "Repo Jacking",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "616"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target] The adversary must first identify a target repository that is commonly used and whose owner/maintainer has either changed/deleted their username or transferred ownership of the repository and then deleted their account. The target should typically be a popular and widely used package, as to increase the scope of the attack.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Recreate initial repository path] The adversary re-registers the account that was renamed/deleted by the target repository's owner/maintainer and recreates the target repository with malicious code intended to exploit an application. These steps may need to happen in reverse (i.e., recreate repository and then rename an existing account to the target account) if protections are in place to prevent repository reuse.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Exploit victims] The adversary's malicious code is incorporated into applications that directly reference the initial repository, which further allows the adversary to conduct additional attacks.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Identification of a popular repository that may be directly referenced in numerous software applications",
      "A repository owner/maintainer who has recently changed their username or deleted their account"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Ability to create an account on a VCS hosting site and recreate an existing directory structure."
      },
      {
        "level": "Low",
        "details": "Ability to create malware that can exploit various software applications."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Read Data",
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Alter Execution Logic",
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "494",
      "829"
    ],
    "mitreAttack": [
      "T1195.001"
    ]
  },
  "696": {
    "name": "Load Value Injection",
    "description": "An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "663"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey target application and relevant OS shared code libraries] Adversary identifies vulnerable transient instruction sets and the code/function calls to trigger them as well as instruction sets or code fragments (gadgets) to perform attack. The adversary looks for code gadgets which will allow them to load an adversary-controlled value into trusted memory. They also look for code gadgets which might operate on this controlled value.",
        "techniques": [
          "Utilize Disassembler and Debugger tools to examine and trace instruction set execution of source code and shared code libraries on a system."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Fill microarchitectural buffer with controlled value] The adversary will utilize the found code gadget from the previous step to load a value into a microarchitectural buffer.",
        "techniques": [
          "The adversary may choose the controlled value to be memory address of sensitive information that they want the system to access",
          "The adversary may choose the controlled value to be the memory address of other code gadgets that they wish to execute by hijacking the control flow of the system"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Set up instruction to page fault or microcode assist] The adversary must manipulate the system such that a page fault or microcode assist occurs when a valid instruction is run. If the instruction that fails is near where the adversary-controlled value was loaded, the system may forward this value from the microarchitectural buffer incorrectly.",
        "techniques": [
          "When targeting Intel SGX enclaves, adversaries that have privileges can manipulate PTEs to provoke page-fault exceptions or microcode assists.",
          "When targeting Intel SGX enclaves, adversaries can indirectly revoke permissions for enclave code through the “mprotect” system call",
          "An adversary can evict selected virtual memory pages using legacy interfaces or by increasing physical memory utilization",
          "When attacking a Windows machine, wait until the OS clears the PTE accessed bit. When the page is next accessed, the CPU will always issue a microcode assist for re-setting this bit"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Operate on adversary-controlled data] Once the attack has been set up and the page fault or microcode assist occurs, the system operates on the adversary-controlled data.",
        "techniques": [
          "Influence the system to load sensitive information into microarchitectural state which can be read by the adversary using a code gadget.",
          "Hijack execution by jumping to second stage gadgets found in the address space. By utilizing return-oriented programming, this can chain gadgets together and allow the adversary to execute a sequence of gadgets."
        ]
      }
    ],
    "prerequisites": [
      "The adversary needs at least user execution access to a system and a maliciously crafted program/application/process with unprivileged code to misuse transient instruction set execution of the CPU.",
      "The CPU incorrectly transiently forwards values from microarchitectural buffers after faulting or assisted loads",
      "The adversary needs the ability to induce page faults or microcode assists on the target system.",
      "Code gadgets exist that allow the adversary to hijack transient execution and encode secrets into the microarchitectural state."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Detailed knowledge on how various CPU architectures and microcode perform transient execution for various low-level assembly language code instructions/operations."
      },
      {
        "level": "High",
        "details": "Detailed knowledge on compiled binaries and operating system shared libraries of instruction sequences, and layout of application and OS/Kernel address spaces for data leakage."
      },
      {
        "level": "High",
        "details": "The ability to provoke faulting or assisted loads in legitimate execution."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Access Control"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Authorization"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1342"
    ]
  },
  "697": {
    "name": "DHCP Spoofing",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "194"
      },
      {
        "nature": "CanPrecede",
        "capecId": "158"
      },
      {
        "nature": "CanPrecede",
        "capecId": "94"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Exsisting DHCP lease] An adversary observes network traffic and waits for an existing DHCP lease to expire on a target machine in the LAN.",
        "techniques": [
          "Adversary observes LAN traffic for DHCP solicitations"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Capture the DHCP DISCOVER message] The adversary captures \"DISCOVER\" messages and crafts \"OFFER\" responses for the identified target MAC address. The success of this attack centers on the capturing of and responding to these \"DISCOVER\" messages.",
        "techniques": [
          "Adversary captures and responds to DHCP \"DISCOVER\" messages tailored to the target subnet."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Compromise Network Access and Collect Network Activity] An adversary successfully acts as a rogue DHCP server by redirecting legitimate DHCP requests to itself.",
        "techniques": [
          "Adversary sends repeated DHCP \"REQUEST\" messages to quickly lease all the addresses within network's DHCP pool and forcing new DHCP requests to be handled by the rogue DHCP server."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must have access to a machine within the target LAN which can send DHCP offers to the target."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary must identify potential targets for DHCP Spoofing and craft network configurations to obtain the desired results."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity",
          "Access Control"
        ],
        "impacts": [
          "Modify Data",
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      }
    ],
    "relatedWeaknesses": [
      "923"
    ],
    "mitreAttack": [
      "T1557.003"
    ]
  },
  "698": {
    "name": "Install Malicious Extension",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "542"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target(s)] The adversary must first identify target software that allows for extensions/plugins and which they wish to exploit, such as a web browser or desktop application. To increase the attack space, this will often be popular software with a large user-base.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Create malicious extension] Having identified a suitable target, the adversary crafts a malicious extension/plugin that can be installed by the underlying target software. This malware may be targeted to execute on specific operating systems or be operating system agnostic.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Install malicious extension] The malicious extension/plugin is installed by the underlying target software and executes the adversary-created malware, resulting in a variety of negative technical impacts.",
        "techniques": [
          "Adversary-Installed: Having already compromised the target system, the adversary simply installs the malicious extension/plugin themself.",
          "User-Installed: The adversary tricks the user into installing the malicious extension/plugin, via means such as social engineering, or may upload the malware on a reputable extension/plugin hosting site and wait for unknowing victims to install the malicious component."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must craft malware based on the type of software and system(s) they intend to exploit.",
      "If the adversary intends to install the malicious extension themself, they must first compromise the target machine via some other means."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to create malicious extensions that can exploit specific software applications and systems."
      },
      {
        "level": "Medium",
        "details": "Optional: Ability to exploit target system(s) via other means in order to gain entry."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity",
          "Access Control"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Authorization",
          "Access Control"
        ],
        "impacts": [
          "Execute Unauthorized Commands",
          "Alter Execution Logic",
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "507",
      "829"
    ],
    "mitreAttack": [
      "T1176",
      "T1505.004"
    ]
  },
  "699": {
    "name": "Eavesdropping on a Monitor",
    "description": "An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "651"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey Target] The adversary surveys the target location, looking for exposed display cables and locations to hide an SDR. This also includes looking for display cables or monitors placed close to a wall, where the SDR can be in range while behind the wall. The adversary also attempts to discover the resolution and refresh rate of the targeted display.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find target using SDR] The adversary sets up an SDR near the target display cable or monitor. They use the SDR software to locate the corresponding frequency of the display cable. This is done by looking for interference peaks that change depending on what the screen is showing. The adversary notes down the possible frequencies of unintentional emission.",
        "techniques": [
          "An adversary can make use of many different commercially available SDR devices which are easy to setup such as a HackRF, Ubertooth, RTL-SDR, and many others."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Visualize Monitor Image] Once the SDR software has been used to identify the target, the adversary will record the transmissions and visualize the monitor image using these transmissions, which allows them to eavesdrop on the information visible on the monitor.",
        "techniques": [
          "The TempestSDR software can be used in conjunction an SDR device to visualize the monitor image. The adversary will specify the known monitor resolution and refresh rate, or if those are not known they can use the provided auto-correlation graphs to help predict these values. The adversary will then try the different frequencies recorded from the experiment phase, looking for a viewing monitor display. Low pass filters and gain can be manipulated to make the display image clearer."
        ]
      }
    ],
    "prerequisites": [
      "Victim should use an external monitor device",
      "Physical access to the target location and devices"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Knowledge of how to use the SDR and related software: With this knowledge, the adversary will find the correct frequency where the signal is being leaked"
      },
      {
        "level": "Low",
        "details": "Understanding of computing hardware, to identify the video cable and video ports"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1300"
    ]
  },
  "7": {
    "name": "Blind SQL Injection",
    "description": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "66"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Hypothesize SQL queries in application]\n                  \n                  \n               ",
        "techniques": [
          "Research types of SQL queries and determine which ones could be used at various places in an application."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine how to inject information into the queries]\n                  \n               ",
        "techniques": [
          "Add clauses to the SQL queries such that the query logic does not change.",
          "Add delays to the SQL queries in case server does not provide clear error messages (e.g. WAITFOR DELAY '0:0:10' in SQL Server or BENCHMARK(1000000000,MD5(1) in MySQL). If these can be injected into the queries, then the length of time that the server takes to respond reveals whether the query is injectable or not."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the adversary suspects is vulnerable to SQL injection, attempt to inject the values determined in the previous step. If an error does not occur, then the adversary knows that the SQL injection was successful.",
        "techniques": [
          "Use web browser to inject input through text fields or through HTTP GET parameters.",
          "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
          "Use network-level packet injection tools such as netcat to inject input",
          "Use modified client (modified by reverse engineering) to inject input."
        ]
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Determine database type] Determines the type of the database, such as MS SQL Server or Oracle or MySQL, using logical conditions as part of the injected queries",
        "techniques": [
          "Try injecting a string containing char(0x31)=char(0x31) (this evaluates to 1=1 in SQL Server only)",
          "Try injecting a string containing 0x313D31 (this evaluates to 1=1 in MySQL only)",
          "Inject other database-specific commands into input fields susceptible to SQL Injection. The adversary can determine the type of database that is running by checking whether the query executed successfully or not (i.e. whether the adversary received a normal response from the server or not)."
        ]
      },
      {
        "step": "5",
        "phase": "Exploit",
        "description": "[Extract information about database schema] Extract information about database schema by getting the database to answer yes/no questions about the schema.",
        "techniques": [
          "Automatically extract database schema using a tool such as Absinthe.",
          "Manually perform the blind SQL Injection to extract desired information about the database schema."
        ]
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "[Exploit SQL Injection vulnerability] Use the information obtained in the previous steps to successfully inject the database in order to bypass checks or modify, add, retrieve or delete data from the database",
        "techniques": [
          "Use information about how to inject commands into SQL queries as well as information about the database schema to execute attacks such as dropping tables, inserting records, etc."
        ]
      }
    ],
    "prerequisites": [
      "SQL queries used by the application to store, retrieve or modify data.",
      "User-controllable input that is not properly validated by the application as part of SQL queries."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Determining the database type and version, as well as the right number and type of parameters to the query being injected in the absence of error messages requires greater skill than reverse-engineering database error messages."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "89",
      "209",
      "74",
      "20",
      "697",
      "707"
    ]
  },
  "70": {
    "name": "Try Common or Default Usernames and Passwords",
    "description": "An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. \"secret\" or \"password\") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "49"
      },
      {
        "nature": "CanPrecede",
        "capecId": "600"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "560"
      },
      {
        "nature": "CanPrecede",
        "capecId": "561"
      },
      {
        "nature": "CanPrecede",
        "capecId": "653"
      }
    ],
    "prerequisites": [
      "The system uses one factor password based authentication.The adversary has the means to interact with the system."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary just needs to gain access to common default usernames/passwords specific to the technologies used by the system. Additionally, a brute force attack leveraging common passwords can be easily realized if the user name is known."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "521",
      "262",
      "263",
      "798",
      "654",
      "308",
      "309"
    ],
    "mitreAttack": [
      "T1078.001"
    ]
  },
  "700": {
    "name": "Network Boundary Bridging",
    "description": "An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "161"
      },
      {
        "nature": "CanFollow",
        "capecId": "70"
      },
      {
        "nature": "CanFollow",
        "capecId": "560"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify potential targets] An adversary identifies network boundary devices that can be compromised.",
        "techniques": [
          "The adversary traces network traffic to identify which devices the traffic flows through. Additionally, the adversary can identify devices using fingerprinting methods or locating the management page to determine identifying information about the device."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Compromise targets] The adversary must compromise the identified targets in the previous step.",
        "techniques": [
          "Once the device is identified, the adversary can attempt to input known default credentials for the device to gain access to the management console.",
          "Adversaries with sufficient identifying knowledge about the target device can exploit known vulnerabilities in network devices to obtain administrative access."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Bridge Networks] The adversary changes the configuration of the compromised network device to connect the networks the device was segmenting. Depending on the type of network boundary device and its capabilities, bridging can be implemented using various methods.",
        "techniques": [
          "The adversary can abuse Network Address Translation (NAT) in firewalls and routers to manipulate traffic flow to their own design. With control of the network device, the adversary can manipulate NAT by either using existing configurations or creating their own to allow two previously unconnected networks to communicate.",
          "Some network devices can be configured to become a proxy server. Adversaries can set up or exploit an existing proxy server on compromised network devices to create a bridge between separate networks."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must have control of a network boundary device."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary must understand how to manage the target network device to create or edit policies which will bridge networks."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control"
        ],
        "impacts": [
          "Read Data",
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Integrity",
          "Authorization"
        ],
        "impacts": [
          "Alter Execution Logic",
          "Hide Activities"
        ]
      }
    ],
    "mitreAttack": [
      "T1599"
    ]
  },
  "701": {
    "name": "Browser in the Middle (BiTM)",
    "description": "An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "94"
      },
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "148"
      },
      {
        "nature": "CanFollow",
        "capecId": "98"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify potential targets] The adversary identifies an application or service that the target is likely to use.",
        "techniques": [
          "The adversary stands up a server to host the transparent browser and entices victims to use it by using a domain name similar to the legitimate application. In addition to the transparent browser, the adversary could also install a web proxy, sniffer, keylogger, and other tools to assist in their goals."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Lure victims] The adversary crafts a phishing campaign to lure unsuspecting victims into using the transparent browser.",
        "techniques": [
          "An adversary can create a convincing email with a link to download the web client and interact with the transparent browser."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Monitor and Manipulate Data] When the victim establishes the connection to the transparent browser, the adversary can view victim activity and make alterations to what the victim sees when browsing the web.",
        "techniques": [
          "Once a victim has established a connection to the transparent browser, the adversary can use installed tools such as a web proxy, keylogger, or additional malicious browser extensions to gather and manipulate data or impersonate the victim."
        ]
      }
    ],
    "prerequisites": [
      "The adversary must create a convincing web client to establish the connection. The victim then needs to be lured onto the adversary's webpage. In addition, the victim's machine must not use local authentication APIs, a hardware token, or a Trusted Platform Module (TPM) to authenticate."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": ""
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authentication"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Authorization"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "294",
      "345"
    ]
  },
  "702": {
    "name": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "180"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Find and scan debug interface] The adversary must first find and scan a debug interface to determine what they are authorized to use and what devices are chained to that interface.",
        "techniques": [
          "Use a JTAGulator on a JTAG interface to determine the correct pin configuration, baud rate, and number of devices in the chain"
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Connect to debug interface] The adversary next connects a device to the JTAG interface using the properties found in the explore phase so that they can send commands. The adversary sends some test commands to make sure the connection is working.",
        "techniques": [
          "Connect a device such as a BusPirate or UM232H to the JTAG interface and connect using pin layout found from the JTAGulator"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Move along debug chain] Once the adversary has connected to the main TAP, or JTAG interface, they will move along the TAP chain to see what debug interfaces might be available on that chain.",
        "techniques": [
          "Run a command such as “scan_chain” to see what TAPs are available in the chain."
        ]
      }
    ],
    "prerequisites": [
      "Hardware device has an exposed debug interface"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Ability to identify physical debug interfaces on a device"
      },
      {
        "level": "Medium",
        "details": "Ability to operate devices to scan and connect to an exposed debug interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "1296"
    ]
  },
  "71": {
    "name": "Using Unicode Encoding to Bypass Validation Logic",
    "description": "An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various Unicode encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Try to use Unicode encoding of content in Scripts in order to bypass validation routines.",
          "Try to use Unicode encoding of content in HTML in order to bypass validation routines.",
          "Try to use Unicode encoding of content in CSS in order to bypass validation routines."
        ]
      }
    ],
    "prerequisites": [
      "Filtering is performed on data that has not be properly canonicalized."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "An attacker needs to understand Unicode encodings and have an idea (or be able to find out) what system components may not be Unicode aware."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "176",
      "179",
      "180",
      "173",
      "172",
      "184",
      "183",
      "74",
      "20",
      "697",
      "692"
    ]
  },
  "72": {
    "name": "URL Encoding",
    "description": "This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey web application for URLs with parameters] Using a browser, an automated tool or by inspecting the application, an adversary records all URLs that contain parameters.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe URLs to locate vulnerabilities] The adversary uses the URLs gathered in the \"Explore\" phase as a target list and tests parameters with different encodings of special characters to see how the web application will handle them.",
        "techniques": [
          "Use URL encodings of special characters such as semi-colons, backslashes, or question marks that might be filtered out normally.",
          "Combine the use of URL encodings with other encoding techniques such as the triple dot and escape slashes."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject special characters into URL parameters] Using the information gathered in the \"Experiment\" phase, the adversary injects special characters into the URL using URL encoding. This can lead to path traversal, cross-site scripting, SQL injection, etc.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The application should accepts and decodes URL input.",
      "The application performs insufficient filtering/canonicalization on the URLs."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can try special characters in the URL and bypass the URL validation."
      },
      {
        "level": "Medium",
        "details": "The adversary may write a script to defeat the input filtering mechanism."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "173",
      "177",
      "172",
      "73",
      "74",
      "20"
    ]
  },
  "73": {
    "name": "User-Controlled Filename",
    "description": "An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "165"
      },
      {
        "nature": "CanPrecede",
        "capecId": "592"
      }
    ],
    "prerequisites": [
      "The victim must trust the name and locale of user controlled filenames."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To achieve a redirection and use of less trusted source, an attacker can simply edit data that the host uses to build the filename"
      },
      {
        "level": "Medium",
        "details": "Deploying a malicious \"look-a-like\" site (such as a site masquerading as a bank or online auction site) that the user enters their authentication data into."
      },
      {
        "level": "High",
        "details": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "20",
      "184",
      "96",
      "348",
      "116",
      "350",
      "86",
      "697"
    ]
  },
  "74": {
    "name": "Manipulating State",
    "description": "\n            \n            \n            \n         ",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "Adversary determines the nature of state management employed by the target. This includes determining the location (client-side, server-side or both applications) and possibly the items stored as part of user state.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The adversary now tries to modify the user state contents (possibly indiscriminately if the contents are encrypted or otherwise obfuscated) or cause a state transition and observe the effects of this change on the target.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "Having determined how to manipulate the state, the adversary can perform illegitimate actions.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "User state is maintained at least in some way in user-controllable locations, such as cookies or URL parameters.",
      "There is a faulty finite state machine in the hardware logic that can be exploited."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The adversary needs to have knowledge of state management as employed by the target application, and also the ability to manipulate the state in a meaningful way."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "372",
      "315",
      "353",
      "693",
      "1245",
      "1253",
      "1265",
      "1271"
    ]
  },
  "75": {
    "name": "Manipulating Writeable Configuration Files",
    "description": "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "176"
      }
    ],
    "prerequisites": [
      "Configuration files must be modifiable by the attacker"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To identify vulnerable configuration files, and understand how to manipulate servers and erase forensic evidence"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "349",
      "99",
      "77",
      "346",
      "353",
      "354"
    ]
  },
  "76": {
    "name": "Manipulating Web Input to File System Calls",
    "description": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "126"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Fingerprinting of the operating system] In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.",
        "techniques": [
          "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
          "TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
          "Induce errors to find informative error messages"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Survey the Application to Identify User-controllable Inputs] The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user",
        "techniques": [
          "Spider web sites for all available links, entry points to the web site.",
          "Manually explore application and inventory all application inputs"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Vary inputs, looking for malicious results] Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application",
        "techniques": [
          "Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.)",
          "Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests",
          "Inject context-appropriate malicious file system control syntax"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Manipulate files accessible by the application] The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)",
        "techniques": [
          "The attacker injects context-appropriate malicious file path to access the content of the targeted file.",
          "The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.",
          "The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.",
          "The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.",
          "The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.",
          "The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file."
        ]
      }
    ],
    "prerequisites": [
      "Program must allow for user controlled variables to be applied directly to the filesystem"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To identify file system entry point and execute against an over-privileged system interface"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "23",
      "22",
      "73",
      "77",
      "346",
      "348",
      "285",
      "272",
      "59",
      "74",
      "15"
    ]
  },
  "77": {
    "name": "Manipulating User-Controlled Variables",
    "description": "This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "22"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Probe target application] The adversary first probes the target application to determine important information about the target. This information could include types software used, software versions, what user input the application consumes, and so on.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find user-controlled variables] Using the information found by probing the application, the adversary attempts to manipulate many user-controlled variables and observes the effects on the application. If the adversary notices any significant changes to the application, they will know that a certain variable is useful to the application.",
        "techniques": [
          "Adversaries will try to alter many common variable names such as \"count\", \"tempFile\", \"i\", etc. The hope is that they can alter the flow of the application without knowing the inner-workings.",
          "Adversaries will try to alter known environment variables."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Manipulate user-controlled variables] Once the adversary has found a user-controller variable(s) that is important to the application, they will manipulate it to change the normal behavior in a way that benefits the adversary.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A variable consumed by the application server is exposed to the client.",
      "A variable consumed by the application server can be overwritten by the user.",
      "The application server trusts user supplied data to compute business logic.",
      "The application server does not perform proper input validation."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The malicious user can easily try some well-known global variables and find one which matches."
      },
      {
        "level": "Medium",
        "details": "The adversary can use automated tools to probe for variables that they can control."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "15",
      "94",
      "96",
      "285",
      "302",
      "473",
      "1321"
    ]
  },
  "78": {
    "name": "Using Escaped Slashes in Alternate Encoding",
    "description": "This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and attempts to escape multiple different special characters using a backslash.",
        "techniques": [
          "Escape a special character with a backslash to bypass input validation.",
          "Try different encodings of both the backslash and the special character to see if this bypasses input validation"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Manipulate input] Once the adversary determines how to bypass filters that filter out special characters using an escaped slash, they will manipulate the user input in a way that is not intended by the application.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The application accepts the backlash character as escape character.",
      "The application server does incomplete input data decoding, filtering and validation."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "The adversary can naively try backslash character and discover that the target host uses it as escape character."
      },
      {
        "level": "Medium",
        "details": "The adversary may need deep understanding of the host target in order to exploit the vulnerability. The adversary may also use automated tools to probe for this vulnerability."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Resource Consumption"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "180",
      "181",
      "173",
      "172",
      "73",
      "22",
      "74",
      "20",
      "697",
      "707"
    ]
  },
  "79": {
    "name": "Using Slashes in Alternate Encoding",
    "description": "This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser, an automated tool or by inspecting the application, an adversary records all entry points to the application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.",
          "Manually inspect the application to find entry points."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The adversary uses the entry points gathered in the \"Explore\" phase as a target list and looks for areas where user input is used to access resources on the target host. The adversary attempts different encodings of slash characters to bypass input filters.",
        "techniques": [
          "Try both backslash and forward slash characters",
          "Try different encodings for slash characters such as %5C"
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Traverse application directories] Once the adversary determines how to bypass filters that filter out slash characters, they will manipulate the user input to include slashes in order to traverse directories and access resources that are not intended for the user.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The application server accepts paths to locate resources.",
      "The application server does insufficient input data validation on the resource path requested by the user.",
      "The access right to resources are not set properly."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can try variation of the slashes characters."
      },
      {
        "level": "Medium",
        "details": "An adversary can use more sophisticated tool or script to scan a website and find a path filtering problem."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "173",
      "180",
      "181",
      "20",
      "74",
      "73",
      "22",
      "185",
      "200",
      "697",
      "707"
    ]
  },
  "8": {
    "name": "Buffer Overflow in an API Call",
    "description": "This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target application] The adversary, with knowledge of vulnerable libraries or shared code modules, identifies a target application or program that makes use of these.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Find injection vector] The adversary attempts to use the API, and if they can they send a large amount of data to see if the buffer overflow attack really does work.",
        "techniques": [
          "Provide large input to a program or application and observe the behavior. If there is a crash, this means that a buffer overflow attack is possible."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow content] The adversary crafts the content to be injected based on their knowledge of the vulnerability and their desired outcome. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary will craft a set of content that not only overflows the targeted buffer but does so in such a way that the overwritten return address is replaced with one of the adversaries' choosing which points to code injected by the adversary.",
        "techniques": [
          "Create malicious shellcode that will execute when the program execution is returned to it.",
          "Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the API as the injection vector, the adversary injects the crafted overflow content into the buffer.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target host exposes an API to the user.",
      "One or more API functions exposed by the target host has a buffer overflow vulnerability."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "119",
      "118",
      "74",
      "20",
      "680",
      "733",
      "697"
    ]
  },
  "80": {
    "name": "Using UTF-8 Encoding to Bypass Validation Logic",
    "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "PeerOf",
        "capecId": "64"
      },
      {
        "nature": "PeerOf",
        "capecId": "71"
      },
      {
        "nature": "ChildOf",
        "capecId": "267"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe entry points to locate vulnerabilities] The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.",
        "techniques": [
          "Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.",
          "Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.",
          "Try to use UTF-8 encoding of content in CSS in order to bypass validation routines."
        ]
      }
    ],
    "prerequisites": [
      "The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.",
      "Input filtering and validating is not done properly leaving the door open to harmful characters for the target host."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker can inject different representation of a filtered character in UTF-8 format."
      },
      {
        "level": "Medium",
        "details": "An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "173",
      "172",
      "180",
      "181",
      "73",
      "74",
      "20",
      "697",
      "692"
    ]
  },
  "81": {
    "name": "Web Server Logs Tampering",
    "description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "268"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Application Web Server Log File Format] The attacker observes the system and looks for indicators of which logging utility is being used by the web server.",
        "techniques": [
          "Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine Injectable Content] The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.",
        "techniques": [
          "Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.",
        "techniques": [
          "\n                  \n                  \n               ",
          "\n                  \n                  \n               ",
          "Directly through log file or database manipulation, modify existing log entries."
        ]
      }
    ],
    "prerequisites": [
      "Target server software must be a HTTP server that performs web logging."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To input faked entries into Web logs"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "117",
      "93",
      "75",
      "221",
      "96",
      "20",
      "150",
      "276",
      "279",
      "116"
    ]
  },
  "82": {
    "name": "DEPRECATED: Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS))",
    "description": "This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads, CAPEC-231: XML Oversized Payloads, and CAPEC-147: XML Ping of Death. Please refer to these CAPECs going forward."
  },
  "83": {
    "name": "XPath Injection",
    "description": "An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "250"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the target] Using a browser or an automated tool, an adversary records all instances of user-controllable input used to contruct XPath queries.",
        "techniques": [
          "Use an automated tool to record all instances of user-controllable input used to contruct XPath queries.",
          "Use a browser to manually explore the website and analyze how the application processes inputs."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Determine the tructure of queries] Using manual or automated means, test inputs found for XPath weaknesses.",
        "techniques": [
          "Use an automated tool automatically probe the inputs for XPath weaknesses.",
          "Manually probe the inputs using characters such as single quote (') that can cause XPath-releated errors, thus indicating an XPath weakness."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Inject content into XPath query] Craft malicious content containing XPath expressions that is not validated by the application and is executed as part of the XPath queries.",
        "techniques": [
          "Use the crafted input to execute unexpected queries that can disclose sensitive database information to the attacker.",
          "Use a combination of single quote (') and boolean expressions such as \"or 1=1\" to manipulate XPath logic.",
          "Use XPath functions in the malicious content such as \"string-length\", \"substring\", or \"count\" to gain information about the XML document structure being used."
        ]
      }
    ],
    "prerequisites": [
      "XPath queries used to retrieve information stored in XML documents",
      "User-controllable input not properly sanitized before being used as part of XPath queries"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "XPath Injection shares the same basic premises with SQL Injection. An attacker must have knowledge of XPath syntax and constructs in order to successfully leverage XPath Injection"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "91",
      "74",
      "20",
      "707"
    ]
  },
  "84": {
    "name": "XQuery Injection",
    "description": "This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "250"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for user-controllable inputs] Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.",
          "Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Determine user-controllable input susceptible to injection] Determine the user-controllable input susceptible to injection. For each user-controllable input that the attacker suspects is vulnerable to XQL injection, attempt to inject characters that have special meaning in XQL. The goal is to create an XQL query with an invalid syntax.",
        "techniques": [
          "Use web browser to inject input through text fields or through HTTP GET parameters.",
          "Use a web application debugging tool such as Tamper Data, TamperIE, WebScarab,etc. to modify HTTP POST parameters, hidden fields, non-freeform fields, etc.",
          "Use XML files to inject input.",
          "Use network-level packet injection tools such as netcat to inject input",
          "Use modified client (modified by reverse engineering) to inject input."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Information Disclosure] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to inappropriate disclosure of information.",
        "techniques": [
          "Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload. The payload aims to get information on the structure of the underlying XML database and/or the content in it."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Manipulate the data in the XML database] The attacker crafts and injects an XQuery payload which is acted on by an XQL query leading to modification of application data.",
        "techniques": [
          "Leveraging one of the vulnerable inputs identified during the Experiment phase, inject malicious XQuery payload.. The payload tries to insert or replace data in the XML database."
        ]
      }
    ],
    "prerequisites": [
      "The XQL must execute unvalidated data"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Basic understanding of XQuery"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      }
    ],
    "relatedWeaknesses": [
      "74",
      "707"
    ]
  },
  "85": {
    "name": "AJAX Footprinting",
    "description": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Low",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "580"
      },
      {
        "nature": "CanPrecede",
        "capecId": "63"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Send request to target webpage and analyze HTML] Using a browser or an automated tool, an adversary sends requests to a webpage and records the received HTML response. Adversaries then analyze the HTML to identify any known underlying JavaScript architectures. This can aid in mappiong publicly known vulnerabilities to the webpage and can also helpo the adversary guess application architecture and the inner workings of a system.",
        "techniques": [
          "Record all \"src\" values inside script tags. These JavaScript files are compared to lists of files for known architectures. If there is a large match between the \"src\" values and architecture files, then it can be assumed that particular architecture is being used."
        ]
      }
    ],
    "prerequisites": [
      "The user must allow JavaScript to execute in their browser"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "To land and launch a script on victim's machine with appropriate footprinting logic for enumerating services and vulnerabilities in JavaScript"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "79",
      "113",
      "348",
      "96",
      "20",
      "116",
      "184",
      "86",
      "692"
    ]
  },
  "86": {
    "name": "XSS Through HTTP Headers",
    "description": "An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "591"
      },
      {
        "nature": "ChildOf",
        "capecId": "588"
      },
      {
        "nature": "ChildOf",
        "capecId": "592"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Survey the application for public links] Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)",
        "techniques": [
          "Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.",
          "Look for HTML meta tags that could be injectable",
          "Use a proxy tool to record all links visited during a manual traversal of the web application.",
          "Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Probe identified potential entry points for XSS vulnerability]\n                  \n               ",
        "techniques": [
          "Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.",
          "Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.",
          "Use a proxy tool to record results of manual input of XSS probes in known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft malicious XSS URL] Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.",
        "techniques": [
          "Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation.",
          "Send information gathered from the malicious script to a remote endpoint."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Get victim to click URL] In order for the attack to be successful, the victim needs to access the malicious URL.",
        "techniques": [
          "Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.",
          "Put the malicious URL on a public forum, where many victims might accidentally click the link."
        ]
      }
    ],
    "prerequisites": [
      "Target software must be a client that allows scripting communication from remote hosts."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine."
      },
      {
        "level": "High",
        "details": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      }
    ],
    "relatedWeaknesses": [
      "80"
    ]
  },
  "87": {
    "name": "Forceful Browsing",
    "description": "An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "115"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Spider] Using an automated tool, an attacker follows all public links on a web site. They record all the links they find.",
        "techniques": [
          "Use a spidering tool to follow and record all links.",
          "Use a proxy tool to record all links visited during a manual traversal of the web application."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Attempt well-known or guessable resource locations] Using an automated tool, an attacker requests a variety of well-known URLs that correspond to administrative, debugging, or other useful internal actions. They record all the positive responses from the server.",
        "techniques": [
          "Use a spidering tool to follow and record attempts on well-known URLs.",
          "Use a proxy tool to record all links visited during a manual traversal of attempts on well-known URLs."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Use unauthorized resources] By visiting the unprotected resource, the attacker makes use of unauthorized functionality.",
        "techniques": [
          "Access unprotected functions and execute them."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[View unauthorized data] The attacker discovers and views unprotected sensitive data.",
        "techniques": [
          "Direct request of protected pages that directly access database back-ends. (e.g., list.jsp, accounts.jsp, status.jsp, etc.)"
        ]
      }
    ],
    "prerequisites": [
      "The forcibly browseable pages or accessible resources must be discoverable and improperly protected."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Forcibly browseable pages can be discovered by using a number of automated tools. Doing the same manually is tedious but by no means difficult."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "425",
      "285",
      "693"
    ]
  },
  "88": {
    "name": "OS Command Injection",
    "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "248"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify inputs for OS commands] The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.",
        "techniques": [
          "Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.",
          "TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.",
          "Induce errors to find informative error messages"
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Survey the Application] The attacker surveys the target application, possibly as a valid and authenticated user",
        "techniques": [
          "Spidering web sites for all available links",
          "Inventory all application inputs"
        ]
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Vary inputs, looking for malicious results.] Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application",
        "techniques": [
          "Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)",
          "Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)"
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Execute malicious commands] The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.",
        "techniques": [
          "The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection)."
        ]
      }
    ],
    "prerequisites": [
      "User controllable input used as part of commands to the underlying operating system."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges",
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "78",
      "88",
      "20",
      "697"
    ]
  },
  "89": {
    "name": "Pharming",
    "description": "A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "151"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Exploit",
        "description": "Attacker sets up a system mocking the one trusted by the users. This is usually a website that requires or handles sensitive information.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "The attacker then poisons the resolver for the targeted site. This is achieved by poisoning the DNS server, or the local hosts file, that directs the user to the original website",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "When the victim requests the URL for the site, the poisoned records direct the victim to the attackers' system rather than the original one.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "Because of the identical nature of the original site and the attacker controlled one, and the fact that the URL is still the original one, the victim trusts the website reached and the attacker can now \"farm\" sensitive information such as credentials or account numbers.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "Vulnerable DNS software or improperly protected hosts file or router that can be poisoned",
      "A website that handles sensitive information but does not use a secure connection and a certificate that is valid is also prone to pharming"
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to be able to poison the resolver - DNS entries or local hosts file or router entry pointing to a trusted DNS server - in order to successfully carry out a pharming attack. Setting up a fake website, identical to the targeted one, does not require special skills."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "346",
      "350"
    ]
  },
  "9": {
    "name": "Buffer Overflow in Local Command-Line Utilities",
    "description": "This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "100"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify target system] The adversary first finds a target system that they want to gain elevated priveleges on. This could be a system they already have some level of access to or a system that they will gain unauthorized access at a lower privelege using some other means.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Find injection vector] The adversary identifies command line utilities exposed by the target host that contain buffer overflow vulnerabilites. The adversary likely knows which utilities have these vulnerabilities and what the effected versions are, so they will also obtain version numbers for these utilities.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Craft overflow command] Once the adversary has found a vulnerable utility, they will use their knownledge of the vulnerabilty to create the command that will exploit the buffer overflow.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Overflow the buffer] Using the injection vector, the adversary executes the crafted command, gaining elevated priveleges on the machine.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target host exposes a command-line utility to the user.",
      "The command-line utility exposed by the target host has a buffer overflow vulnerability that can be exploited."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "120",
      "118",
      "119",
      "74",
      "20",
      "680",
      "733",
      "697"
    ]
  },
  "90": {
    "name": "Reflection Attack in Authentication Protocol",
    "description": "An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "272"
      },
      {
        "nature": "ChildOf",
        "capecId": "114"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Identify service with vulnerable handshake authentication] The adversary must first identify a vulnerable authentication protocol. The most common indication of an authentication protocol vulnerable to reflection attack is when the client initiates the handshake, rather than the server. This allows the client to get the server to encrypt targeted data using the server's pre-shared key.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Send challenge to target server] The adversary opens a connection to the target server and sends it a challenge. This challenge is arbitrary and is simply used as a placeholder for the protocol in order to get the server to respond.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "[Receive server challenge] The server responds by returning the challenge sent encrypted with the server's pre-shared key, as well as its own challenge to the attacker sent in plaintext. We will call this challenge sent by the server \"C\". C is very important and is stored off by the adversary for the next step.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "[Initiate second handshake] Since the adversary does not possess the pre-shared key, they cannot encrypt C from the previous step in order for the server to authenticate them. To get around this, the adversary initiates a second connection to the server while still keeping the first connection alive. In the second connection, the adversary sends C as the initial client challenge, which rather than being arbitary like the first connection, is very intentional.",
        "techniques": null
      },
      {
        "step": "5",
        "phase": "Experiment",
        "description": "[Receive encrypted challenge] The server treats the intial client challenge in connection two as an arbitrary client challenge and responds by encrypting C with the pre-shared key. The server also sends a new challenge. The adversary ignores the server challenge and stores the encrypted version of C. The second connection is either terminated or left to expire by the adversary as it is no longer needed.",
        "techniques": null
      },
      {
        "step": "6",
        "phase": "Exploit",
        "description": "The adversary now posseses the encrypted version of C that is obtained through connection two. The adversary continues the handshake in connection one by responding to the server with the encrypted version of C, verifying that they have access to the pre-shared key (when they actually do not). Because the server uses the same pre-shared key for all authentication it will decrypt C and authenticate the adversary for the first connection, giving the adversary illegitimate access to the target system.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The attacker must have direct access to the target server in order to successfully mount a reflection attack. An intermediate entity, such as a router or proxy, that handles these exchanges on behalf of the attacker inhibits the attackers' ability to attack the authentication protocol."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "The attacker needs to have knowledge of observing the protocol exchange and managing the required connections in order to issue and respond to challenges"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges",
          "Bypass Protection Mechanism"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "301",
      "303"
    ]
  },
  "91": {
    "name": "DEPRECATED: XSS in IMG Tags",
    "description": "This attack pattern has been deprecated as it is contained in the existing attack pattern \"CAPEC-18 : XSS Targeting Non-Script Elements\". Please refer to this other CAPEC going forward."
  },
  "92": {
    "name": "Forced Integer Overflow",
    "description": "This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "128"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "The first step is exploratory meaning the attacker looks for an integer variable that they can control.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "The attacker finds an integer variable that they can write into or manipulate and try to get the value of the integer out of the possible range.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "The integer variable is forced to have a value out of range which set its final value to an unexpected value.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "The target host acts on the data and unexpected behavior may happen.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The attacker can manipulate the value of an integer variable utilized by the target host.",
      "The target host does not do proper range checking on the variable before utilizing it.",
      "When the integer variable is incremented or decremented to an out of range value, it gets a very different value (e.g. very small or negative number)"
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "An attacker can simply overflow an integer by inserting an out of range value."
      },
      {
        "level": "High",
        "details": "Exploiting a buffer overflow by injecting malicious code into the stack of a software system or even the heap can require a higher skill level."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Integrity",
          "Availability"
        ],
        "impacts": [
          "Execute Unauthorized Commands"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Unreliable Execution"
        ]
      }
    ],
    "relatedWeaknesses": [
      "190",
      "128",
      "120",
      "122",
      "196",
      "680",
      "697"
    ]
  },
  "93": {
    "name": "Log Injection-Tampering-Forging",
    "description": "This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "268"
      },
      {
        "nature": "CanPrecede",
        "capecId": "592"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Application's Log File Format] The first step is exploratory meaning the attacker observes the system. The attacker looks for action and data that are likely to be logged. The attacker may be familiar with the log format of the system.",
        "techniques": [
          "Determine logging utility being used by application (e.g. log4j)",
          "Gain access to application's source code to determine log file formats.",
          "Install or obtain access to instance of application and observe its log file format."
        ]
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "[Manipulate Log Files] The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted input that the target software will write to the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.",
        "techniques": [
          "\n                  \n                  \n                  \n                  \n                  \n               ",
          "\n                  \n                  \n                  \n               "
        ]
      }
    ],
    "prerequisites": [
      "The target host is logging the action and data of the user.",
      "The target host insufficiently protects access to the logs or logging mechanisms."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "This attack can be as simple as adding extra characters to the logged data (e.g. username). Adding entries is typically easier than removing entries."
      },
      {
        "level": "Medium",
        "details": "A more sophisticated attack can try to defeat the input validation mechanism."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "117",
      "75",
      "150"
    ]
  },
  "94": {
    "name": "Adversary in the Middle (AiTM)",
    "description": "\n            \n         ",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "CanPrecede",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "668"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Determine Communication Mechanism] The adversary determines the nature and mechanism of communication between two components, looking for opportunities to exploit.",
        "techniques": [
          "Perform a sniffing attack and observe communication to determine a communication protocol.",
          "Look for application documentation that might describe a communication mechanism used by a target."
        ]
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Position In Between Targets] The adversary inserts themself into the communication channel initially acting as a routing proxy between the two targeted components.",
        "techniques": [
          "Install spyware on a client that will intercept outgoing packets and route them to their destination as well as route incoming packets back to the client.",
          "Exploit a weakness in an encrypted communication mechanism to gain access to traffic. Look for outdated mechanisms such as SSL."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Use Intercepted Data Maliciously] The adversary observes, filters, or alters passed data of its choosing to gain access to sensitive information or to manipulate the actions of the two target components for their own purposes.",
        "techniques": [
          "Prevent some messages from reaching their destination, causing a denial of service."
        ]
      }
    ],
    "prerequisites": [
      "There are two components communicating with each other.",
      "An attacker is able to identify the nature and mechanism of communication between the two target components.",
      "An attacker can eavesdrop on the communication between the target components.",
      "Strong mutual authentication is not used between the two target components yielding opportunity for attacker interposition.",
      "The communication occurs in clear (not encrypted) or with insufficient and spoofable encryption."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "This attack can get sophisticated since the attack may use cryptography."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "300",
      "290",
      "593",
      "287",
      "294"
    ],
    "mitreAttack": [
      "T1557"
    ]
  },
  "95": {
    "name": "WSDL Scanning",
    "description": "This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "54"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Scan for WSDL Documents] The adversary scans for WSDL documents. The WDSL document written in XML is like a handbook on how to communicate with the web services provided by the target host. It provides an open view of the application (function details, purpose, functional break down, entry points, message types, etc.). This is very useful information for the adversary.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "[Analyze WSDL files] An adversary will analyze the WSDL files and try to find potential weaknesses by sending messages matching the pattern described in the WSDL file. The adversary could run through all of the operations with different message request patterns until a breach is identified.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Craft malicious content] Once an adversary finds a potential weakness, they can craft malicious content to be sent to the system. For instance the adversary may try to submit special characters and observe how the system reacts to an invalid request. The message sent by the adversary may not be XML validated and cause unexpected behavior.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "A client program connecting to a web service can read the WSDL to determine what functions are available on the server.",
      "The target host exposes vulnerable functions within its WSDL interface."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "This attack can be as simple as reading WSDL and starting sending invalid request."
      },
      {
        "level": "Medium",
        "details": "This attack can be used to perform more sophisticated attacks (SQL injection, etc.)"
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "538"
    ]
  },
  "96": {
    "name": "Block Access to Libraries",
    "description": "An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.",
    "likelihoodOfAttack": "Medium",
    "typicalSeverity": "Medium",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "603"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "Determine what external libraries the application accesses.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Experiment",
        "description": "Block access to the external libraries accessed by the application.",
        "techniques": null
      },
      {
        "step": "3",
        "phase": "Experiment",
        "description": "Monitor the behavior of the system to see if it goes into an insecure/inconsistent state.",
        "techniques": null
      },
      {
        "step": "4",
        "phase": "Experiment",
        "description": "If the system does go into an insecure/inconsistent state, leverage that to obtain information about the system functionality or data, elevate access control, etc. The rest of this attack will depend on the context and the desired goal.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "An application requires access to external libraries.",
      "An attacker has the privileges to block application access to external libraries."
    ],
    "skillsRequired": [
      {
        "level": "Low",
        "details": "Knowledge of how to block access to libraries, as well as knowledge of how to leverage the resulting state of the application based on the failed call."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Availability"
        ],
        "impacts": [
          "Alter Execution Logic"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Other"
        ]
      },
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Bypass Protection Mechanism"
        ]
      }
    ],
    "relatedWeaknesses": [
      "589"
    ]
  },
  "97": {
    "name": "Cryptanalysis",
    "description": "Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).",
    "likelihoodOfAttack": "Low",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "192"
      },
      {
        "nature": "CanPrecede",
        "capecId": "20"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "An attacker discovers a weakness in the cryptographic algorithm or a weakness in how it was applied to a particular chunk of plaintext.",
        "techniques": null
      },
      {
        "step": "2",
        "phase": "Exploit",
        "description": "An attacker leverages the discovered weakness to decrypt, partially decrypt or infer some information about the contents of the encrypted message. All of that is done without knowing the secret key.",
        "techniques": null
      }
    ],
    "prerequisites": [
      "The target software utilizes some sort of cryptographic algorithm.",
      "An underlying weaknesses exists either in the cryptographic algorithm used or in the way that it was applied to a particular chunk of plaintext.",
      "The encryption algorithm is known to the attacker.",
      "An attacker has access to the ciphertext."
    ],
    "skillsRequired": [
      {
        "level": "High",
        "details": "Cryptanalysis generally requires a very significant level of understanding of mathematics and computation."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "327",
      "1204",
      "1240",
      "1241",
      "1279"
    ]
  },
  "98": {
    "name": "Phishing",
    "description": "Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or \"fishing\" for information.",
    "likelihoodOfAttack": "High",
    "typicalSeverity": "Very High",
    "relatedAttackPatterns": [
      {
        "nature": "ChildOf",
        "capecId": "151"
      },
      {
        "nature": "CanPrecede",
        "capecId": "89"
      },
      {
        "nature": "CanPrecede",
        "capecId": "543"
      },
      {
        "nature": "CanPrecede",
        "capecId": "611"
      },
      {
        "nature": "CanPrecede",
        "capecId": "630"
      },
      {
        "nature": "CanPrecede",
        "capecId": "631"
      },
      {
        "nature": "CanPrecede",
        "capecId": "632"
      }
    ],
    "executionFlow": [
      {
        "step": "1",
        "phase": "Explore",
        "description": "[Obtain domain name and certificate to spoof legitimate site] This optional step can be used to help the attacker impersonate the legitimate site more convincingly. The attacker can use homograph attacks to convince users that they are using the legitimate website. Note that this step is not required for phishing attacks, and many phishing attacks simply supply URLs containing an IP address and no SSL certificate.",
        "techniques": [
          "Optionally obtain a domain name that visually looks similar to the legitimate site's domain name. An example is www.paypaI.com vs. www.paypal.com (the first one contains a capital i, instead of a lower case L)",
          "Optionally obtain a legitimate SSL certificate for the new domain name."
        ]
      },
      {
        "step": "2",
        "phase": "Explore",
        "description": "[Explore legitimate website and create duplicate] An attacker creates a website (optionally at a URL that looks similar to the original URL) that closely resembles the website that they are trying to impersonate. That website will typically have a login form for the victim to put in their authentication credentials. There can be different variations on a theme here.",
        "techniques": [
          "Use spidering software to get copy of web pages on legitimate site.",
          "Manually save copies of required web pages from legitimate site.",
          "Create new web pages that have the legitimate site's look and feel, but contain completely new content."
        ]
      },
      {
        "step": "3",
        "phase": "Exploit",
        "description": "[Convince user to enter sensitive information on attacker's site.] An attacker sends an e-mail to the victim that has some sort of a call to action to get the user to click on the link included in the e-mail (which takes the victim to attacker's website) and log in. The key is to get the victim to believe that the e-mail is coming from a legitimate entity with which the victim does business and that the website pointed to by the URL in the e-mail is the legitimate website. A call to action will usually need to sound legitimate and urgent enough to prompt action from the user.",
        "techniques": [
          "Send the user a message from a spoofed legitimate-looking e-mail address that asks the user to click on the included link.",
          "Place phishing link in post to online forum."
        ]
      },
      {
        "step": "4",
        "phase": "Exploit",
        "description": "[Use stolen credentials to log into legitimate site] Once the attacker captures some sensitive information through phishing (login credentials, credit card information, etc.) the attacker can leverage this information. For instance, the attacker can use the victim's login credentials to log into their bank account and transfer money to an account of their choice.",
        "techniques": [
          "Log in to the legitimate site using another user's supplied credentials"
        ]
      }
    ],
    "prerequisites": [
      "An attacker needs to have a way to initiate contact with the victim. Typically that will happen through e-mail.",
      "An attacker needs to correctly guess the entity with which the victim does business and impersonate it. Most of the time phishers just use the most popular banks/services and send out their \"hooks\" to many potential victims.",
      "An attacker needs to have a sufficiently compelling call to action to prompt the user to take action.",
      "The replicated website needs to look extremely similar to the original website and the URL used to get to that website needs to look like the real URL of the said business entity."
    ],
    "skillsRequired": [
      {
        "level": "Medium",
        "details": "Basic knowledge about websites: obtaining them, designing and implementing them, etc."
      }
    ],
    "consequences": [
      {
        "scopes": [
          "Confidentiality",
          "Access Control",
          "Authorization"
        ],
        "impacts": [
          "Gain Privileges"
        ]
      },
      {
        "scopes": [
          "Confidentiality"
        ],
        "impacts": [
          "Read Data"
        ]
      },
      {
        "scopes": [
          "Integrity"
        ],
        "impacts": [
          "Modify Data"
        ]
      }
    ],
    "relatedWeaknesses": [
      "451"
    ],
    "mitreAttack": [
      "T1566",
      "T1598"
    ]
  },
  "99": {
    "name": "DEPRECATED: XML Parser Attack",
    "description": "This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads and CAPEC-231: XML Oversized Payloads. Please refer to these CAPECs going forward."
  }
}
